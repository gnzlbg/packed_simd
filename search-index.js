var N = null;var searchIndex = {};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["packed_simd"]={"doc":"Simd<[T; N]> - Portable packed vector type","items":[[3,"Simd","packed_simd","Packed vector type",N,N],[3,"m8","","8-bit wide mask.",N,N],[3,"m16","","16-bit wide mask.",N,N],[3,"m32","","32-bit wide mask.",N,N],[3,"m64","","64-bit wide mask.",N,N],[3,"m128","","128-bit wide mask.",N,N],[11,"clone","","",0,[[["self"]],["m8"]]],[11,"new","","Instantiate a mask with `value`",0,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",0,[[["self"]],["bool"]]],[11,"default","","",0,[[],["self"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"ne","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",1,[[["self"]],["m16"]]],[11,"new","","Instantiate a mask with `value`",1,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",1,[[["self"]],["bool"]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"ne","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["self"]],["bool"]]],[11,"gt","","",1,[[["self"],["self"]],["bool"]]],[11,"le","","",1,[[["self"],["self"]],["bool"]]],[11,"ge","","",1,[[["self"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",2,[[["self"]],["m32"]]],[11,"new","","Instantiate a mask with `value`",2,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",2,[[["self"]],["bool"]]],[11,"default","","",2,[[],["self"]]],[11,"eq","","",2,[[["self"],["self"]],["bool"]]],[11,"ne","","",2,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["self"]],["bool"]]],[11,"gt","","",2,[[["self"],["self"]],["bool"]]],[11,"le","","",2,[[["self"],["self"]],["bool"]]],[11,"ge","","",2,[[["self"],["self"]],["bool"]]],[11,"cmp","","",2,[[["self"],["self"]],["ordering"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["m64"]]],[11,"new","","Instantiate a mask with `value`",3,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",3,[[["self"]],["bool"]]],[11,"default","","",3,[[],["self"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"ne","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",3,[[["self"],["self"]],["bool"]]],[11,"gt","","",3,[[["self"],["self"]],["bool"]]],[11,"le","","",3,[[["self"],["self"]],["bool"]]],[11,"ge","","",3,[[["self"],["self"]],["bool"]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",4,[[["self"]],["m128"]]],[11,"new","","Instantiate a mask with `value`",4,[[["bool"]],["self"]]],[11,"test","","Test if the mask is set",4,[[["self"]],["bool"]]],[11,"default","","",4,[[],["self"]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"ne","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["self"]],["bool"]]],[11,"gt","","",4,[[["self"],["self"]],["bool"]]],[11,"le","","",4,[[["self"],["self"]],["bool"]]],[11,"ge","","",4,[[["self"],["self"]],["bool"]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[6,"i8x2","","A 16-bit vector with 2 `i8` lanes.",N,N],[6,"u8x2","","A 16-bit vector with 2 `u8` lanes.",N,N],[6,"m8x2","","A 16-bit vector mask with 2 `m8` lanes.",N,N],[6,"i8x4","","A 32-bit vector with 4 `i8` lanes.",N,N],[6,"u8x4","","A 32-bit vector with 4 `u8` lanes.",N,N],[6,"m8x4","","A 32-bit vector mask with 4 `m8` lanes.",N,N],[6,"i16x2","","A 32-bit vector with 2 `i16` lanes.",N,N],[6,"u16x2","","A 32-bit vector with 2 `u16` lanes.",N,N],[6,"m16x2","","A 32-bit vector mask with 2 `m16` lanes.",N,N],[6,"i8x8","","A 64-bit vector with 8 `i8` lanes.",N,N],[6,"u8x8","","A 64-bit vector with 8 `u8` lanes.",N,N],[6,"m8x8","","A 64-bit vector mask with 8 `m8` lanes.",N,N],[6,"i16x4","","A 64-bit vector with 4 `i16` lanes.",N,N],[6,"u16x4","","A 64-bit vector with 4 `u16` lanes.",N,N],[6,"m16x4","","A 64-bit vector mask with 4 `m16` lanes.",N,N],[6,"i32x2","","A 64-bit vector with 2 `i32` lanes.",N,N],[6,"u32x2","","A 64-bit vector with 2 `u32` lanes.",N,N],[6,"m32x2","","A 64-bit vector mask with 2 `m32` lanes.",N,N],[6,"f32x2","","A 64-bit vector with 2 `f32` lanes.",N,N],[6,"i8x16","","A 128-bit vector with 16 `i8` lanes.",N,N],[6,"u8x16","","A 128-bit vector with 16 `u8` lanes.",N,N],[6,"m8x16","","A 128-bit vector mask with 16 `m8` lanes.",N,N],[6,"i16x8","","A 128-bit vector with 8 `i16` lanes.",N,N],[6,"u16x8","","A 128-bit vector with 8 `u16` lanes.",N,N],[6,"m16x8","","A 128-bit vector mask with 8 `m16` lanes.",N,N],[6,"i32x4","","A 128-bit vector with 4 `i32` lanes.",N,N],[6,"u32x4","","A 128-bit vector with 4 `u32` lanes.",N,N],[6,"f32x4","","A 128-bit vector with 4 `f32` lanes.",N,N],[6,"m32x4","","A 128-bit vector mask with 4 `m32` lanes.",N,N],[6,"i64x2","","A 128-bit vector with 2 `i64` lanes.",N,N],[6,"u64x2","","A 128-bit vector with 2 `u64` lanes.",N,N],[6,"f64x2","","A 128-bit vector with 2 `f64` lanes.",N,N],[6,"m64x2","","A 128-bit vector mask with 2 `m64` lanes.",N,N],[6,"i128x1","","A 128-bit vector with 1 `i128` lane.",N,N],[6,"u128x1","","A 128-bit vector with 1 `u128` lane.",N,N],[6,"m128x1","","A 128-bit vector mask with 1 `m128` lane.",N,N],[6,"i8x32","","A 256-bit vector with 32 `i8` lanes.",N,N],[6,"u8x32","","A 256-bit vector with 32 `u8` lanes.",N,N],[6,"m8x32","","A 256-bit vector mask with 32 `m8` lanes.",N,N],[6,"i16x16","","A 256-bit vector with 16 `i16` lanes.",N,N],[6,"u16x16","","A 256-bit vector with 16 `u16` lanes.",N,N],[6,"m16x16","","A 256-bit vector mask with 16 `m16` lanes.",N,N],[6,"i32x8","","A 256-bit vector with 8 `i32` lanes.",N,N],[6,"u32x8","","A 256-bit vector with 8 `u32` lanes.",N,N],[6,"f32x8","","A 256-bit vector with 8 `f32` lanes.",N,N],[6,"m32x8","","A 256-bit vector mask with 8 `m32` lanes.",N,N],[6,"i64x4","","A 256-bit vector with 4 `i64` lanes.",N,N],[6,"u64x4","","A 256-bit vector with 4 `u64` lanes.",N,N],[6,"f64x4","","A 256-bit vector with 4 `f64` lanes.",N,N],[6,"m64x4","","A 256-bit vector mask with 4 `m64` lanes.",N,N],[6,"i128x2","","A 256-bit vector with 2 `i128` lanes.",N,N],[6,"u128x2","","A 256-bit vector with 2 `u128` lanes.",N,N],[6,"m128x2","","A 256-bit vector mask with 2 `m128` lanes.",N,N],[6,"i8x64","","A 512-bit vector with 64 `i8` lanes.",N,N],[6,"u8x64","","A 512-bit vector with 64 `u8` lanes.",N,N],[6,"m8x64","","A 512-bit vector mask with 64 `m8` lanes.",N,N],[6,"i16x32","","A 512-bit vector with 32 `i16` lanes.",N,N],[6,"u16x32","","A 512-bit vector with 32 `u16` lanes.",N,N],[6,"m16x32","","A 512-bit vector mask with 32 `m16` lanes.",N,N],[6,"i32x16","","A 512-bit vector with 16 `i32` lanes.",N,N],[6,"u32x16","","A 512-bit vector with 16 `u32` lanes.",N,N],[6,"f32x16","","A 512-bit vector with 16 `f32` lanes.",N,N],[6,"m32x16","","A 512-bit vector mask with 16 `m32` lanes.",N,N],[6,"i64x8","","A 512-bit vector with 8 `i64` lanes.",N,N],[6,"u64x8","","A 512-bit vector with 8 `u64` lanes.",N,N],[6,"f64x8","","A 512-bit vector with 8 `f64` lanes.",N,N],[6,"m64x8","","A 512-bit vector mask with 8 `m64` lanes.",N,N],[6,"i128x4","","A 512-bit vector with 4 `i128` lanes.",N,N],[6,"u128x4","","A 512-bit vector with 4 `u128` lanes.",N,N],[6,"m128x4","","A 512-bit vector mask with 4 `m128` lanes.",N,N],[8,"FromCast","","Numeric cast from `T` to `Self`.",N,N],[10,"from_cast","","Numeric cast from `T` to `Self`.",5,[[["t"]],["self"]]],[8,"Cast","","Numeric cast from `Self` to `T`.",N,N],[10,"cast","","Numeric cast from `self` to `T`.",6,[[["self"]],["t"]]],[11,"clone","","",7,[[["self"]],["simd"]]],[14,"shuffle","","Shuffles vector elements.",N,N],[11,"from_cast","","",8,[[["u8x2"]],["self"]]],[11,"from_cast","","",8,[[["m8x2"]],["self"]]],[11,"from_cast","","",8,[[["i16x2"]],["self"]]],[11,"from_cast","","",8,[[["u16x2"]],["self"]]],[11,"from_cast","","",8,[[["m16x2"]],["self"]]],[11,"from_cast","","",8,[[["i32x2"]],["self"]]],[11,"from_cast","","",8,[[["u32x2"]],["self"]]],[11,"from_cast","","",8,[[["f32x2"]],["self"]]],[11,"from_cast","","",8,[[["m32x2"]],["self"]]],[11,"from_cast","","",8,[[["i64x2"]],["self"]]],[11,"from_cast","","",8,[[["u64x2"]],["self"]]],[11,"from_cast","","",8,[[["f64x2"]],["self"]]],[11,"from_cast","","",8,[[["m64x2"]],["self"]]],[11,"from_cast","","",8,[[["i128x2"]],["self"]]],[11,"from_cast","","",8,[[["u128x2"]],["self"]]],[11,"from_cast","","",8,[[["m128x2"]],["self"]]],[11,"from_cast","","",9,[[["i8x2"]],["self"]]],[11,"from_cast","","",9,[[["m8x2"]],["self"]]],[11,"from_cast","","",9,[[["i16x2"]],["self"]]],[11,"from_cast","","",9,[[["u16x2"]],["self"]]],[11,"from_cast","","",9,[[["m16x2"]],["self"]]],[11,"from_cast","","",9,[[["i32x2"]],["self"]]],[11,"from_cast","","",9,[[["u32x2"]],["self"]]],[11,"from_cast","","",9,[[["f32x2"]],["self"]]],[11,"from_cast","","",9,[[["m32x2"]],["self"]]],[11,"from_cast","","",9,[[["i64x2"]],["self"]]],[11,"from_cast","","",9,[[["u64x2"]],["self"]]],[11,"from_cast","","",9,[[["f64x2"]],["self"]]],[11,"from_cast","","",9,[[["m64x2"]],["self"]]],[11,"from_cast","","",9,[[["i128x2"]],["self"]]],[11,"from_cast","","",9,[[["u128x2"]],["self"]]],[11,"from_cast","","",9,[[["m128x2"]],["self"]]],[11,"from_cast","","",10,[[["i8x2"]],["self"]]],[11,"from_cast","","",10,[[["u8x2"]],["self"]]],[11,"from_cast","","",10,[[["i16x2"]],["self"]]],[11,"from_cast","","",10,[[["u16x2"]],["self"]]],[11,"from_cast","","",10,[[["m16x2"]],["self"]]],[11,"from_cast","","",10,[[["i32x2"]],["self"]]],[11,"from_cast","","",10,[[["u32x2"]],["self"]]],[11,"from_cast","","",10,[[["f32x2"]],["self"]]],[11,"from_cast","","",10,[[["m32x2"]],["self"]]],[11,"from_cast","","",10,[[["i64x2"]],["self"]]],[11,"from_cast","","",10,[[["u64x2"]],["self"]]],[11,"from_cast","","",10,[[["f64x2"]],["self"]]],[11,"from_cast","","",10,[[["m64x2"]],["self"]]],[11,"from_cast","","",10,[[["i128x2"]],["self"]]],[11,"from_cast","","",10,[[["u128x2"]],["self"]]],[11,"from_cast","","",10,[[["m128x2"]],["self"]]],[11,"from_cast","","",11,[[["u8x4"]],["self"]]],[11,"from_cast","","",11,[[["m8x4"]],["self"]]],[11,"from_cast","","",11,[[["i16x4"]],["self"]]],[11,"from_cast","","",11,[[["u16x4"]],["self"]]],[11,"from_cast","","",11,[[["m16x4"]],["self"]]],[11,"from_cast","","",11,[[["i32x4"]],["self"]]],[11,"from_cast","","",11,[[["u32x4"]],["self"]]],[11,"from_cast","","",11,[[["f32x4"]],["self"]]],[11,"from_cast","","",11,[[["m32x4"]],["self"]]],[11,"from_cast","","",11,[[["i64x4"]],["self"]]],[11,"from_cast","","",11,[[["u64x4"]],["self"]]],[11,"from_cast","","",11,[[["f64x4"]],["self"]]],[11,"from_cast","","",11,[[["m64x4"]],["self"]]],[11,"from_cast","","",11,[[["i128x4"]],["self"]]],[11,"from_cast","","",11,[[["u128x4"]],["self"]]],[11,"from_cast","","",11,[[["m128x4"]],["self"]]],[11,"from_cast","","",12,[[["i8x4"]],["self"]]],[11,"from_cast","","",12,[[["m8x4"]],["self"]]],[11,"from_cast","","",12,[[["i16x4"]],["self"]]],[11,"from_cast","","",12,[[["u16x4"]],["self"]]],[11,"from_cast","","",12,[[["m16x4"]],["self"]]],[11,"from_cast","","",12,[[["i32x4"]],["self"]]],[11,"from_cast","","",12,[[["u32x4"]],["self"]]],[11,"from_cast","","",12,[[["f32x4"]],["self"]]],[11,"from_cast","","",12,[[["m32x4"]],["self"]]],[11,"from_cast","","",12,[[["i64x4"]],["self"]]],[11,"from_cast","","",12,[[["u64x4"]],["self"]]],[11,"from_cast","","",12,[[["f64x4"]],["self"]]],[11,"from_cast","","",12,[[["m64x4"]],["self"]]],[11,"from_cast","","",12,[[["i128x4"]],["self"]]],[11,"from_cast","","",12,[[["u128x4"]],["self"]]],[11,"from_cast","","",12,[[["m128x4"]],["self"]]],[11,"from_cast","","",13,[[["i8x4"]],["self"]]],[11,"from_cast","","",13,[[["u8x4"]],["self"]]],[11,"from_cast","","",13,[[["i16x4"]],["self"]]],[11,"from_cast","","",13,[[["u16x4"]],["self"]]],[11,"from_cast","","",13,[[["m16x4"]],["self"]]],[11,"from_cast","","",13,[[["i32x4"]],["self"]]],[11,"from_cast","","",13,[[["u32x4"]],["self"]]],[11,"from_cast","","",13,[[["f32x4"]],["self"]]],[11,"from_cast","","",13,[[["m32x4"]],["self"]]],[11,"from_cast","","",13,[[["i64x4"]],["self"]]],[11,"from_cast","","",13,[[["u64x4"]],["self"]]],[11,"from_cast","","",13,[[["f64x4"]],["self"]]],[11,"from_cast","","",13,[[["m64x4"]],["self"]]],[11,"from_cast","","",13,[[["i128x4"]],["self"]]],[11,"from_cast","","",13,[[["u128x4"]],["self"]]],[11,"from_cast","","",13,[[["m128x4"]],["self"]]],[11,"from_cast","","",14,[[["i8x2"]],["self"]]],[11,"from_cast","","",14,[[["u8x2"]],["self"]]],[11,"from_cast","","",14,[[["m8x2"]],["self"]]],[11,"from_cast","","",14,[[["u16x2"]],["self"]]],[11,"from_cast","","",14,[[["m16x2"]],["self"]]],[11,"from_cast","","",14,[[["i32x2"]],["self"]]],[11,"from_cast","","",14,[[["u32x2"]],["self"]]],[11,"from_cast","","",14,[[["f32x2"]],["self"]]],[11,"from_cast","","",14,[[["m32x2"]],["self"]]],[11,"from_cast","","",14,[[["i64x2"]],["self"]]],[11,"from_cast","","",14,[[["u64x2"]],["self"]]],[11,"from_cast","","",14,[[["f64x2"]],["self"]]],[11,"from_cast","","",14,[[["m64x2"]],["self"]]],[11,"from_cast","","",14,[[["i128x2"]],["self"]]],[11,"from_cast","","",14,[[["u128x2"]],["self"]]],[11,"from_cast","","",14,[[["m128x2"]],["self"]]],[11,"from_cast","","",15,[[["i8x2"]],["self"]]],[11,"from_cast","","",15,[[["u8x2"]],["self"]]],[11,"from_cast","","",15,[[["m8x2"]],["self"]]],[11,"from_cast","","",15,[[["i16x2"]],["self"]]],[11,"from_cast","","",15,[[["m16x2"]],["self"]]],[11,"from_cast","","",15,[[["i32x2"]],["self"]]],[11,"from_cast","","",15,[[["u32x2"]],["self"]]],[11,"from_cast","","",15,[[["f32x2"]],["self"]]],[11,"from_cast","","",15,[[["m32x2"]],["self"]]],[11,"from_cast","","",15,[[["i64x2"]],["self"]]],[11,"from_cast","","",15,[[["u64x2"]],["self"]]],[11,"from_cast","","",15,[[["f64x2"]],["self"]]],[11,"from_cast","","",15,[[["m64x2"]],["self"]]],[11,"from_cast","","",15,[[["i128x2"]],["self"]]],[11,"from_cast","","",15,[[["u128x2"]],["self"]]],[11,"from_cast","","",15,[[["m128x2"]],["self"]]],[11,"from_cast","","",16,[[["i8x2"]],["self"]]],[11,"from_cast","","",16,[[["u8x2"]],["self"]]],[11,"from_cast","","",16,[[["m8x2"]],["self"]]],[11,"from_cast","","",16,[[["i16x2"]],["self"]]],[11,"from_cast","","",16,[[["u16x2"]],["self"]]],[11,"from_cast","","",16,[[["i32x2"]],["self"]]],[11,"from_cast","","",16,[[["u32x2"]],["self"]]],[11,"from_cast","","",16,[[["f32x2"]],["self"]]],[11,"from_cast","","",16,[[["m32x2"]],["self"]]],[11,"from_cast","","",16,[[["i64x2"]],["self"]]],[11,"from_cast","","",16,[[["u64x2"]],["self"]]],[11,"from_cast","","",16,[[["f64x2"]],["self"]]],[11,"from_cast","","",16,[[["m64x2"]],["self"]]],[11,"from_cast","","",16,[[["i128x2"]],["self"]]],[11,"from_cast","","",16,[[["u128x2"]],["self"]]],[11,"from_cast","","",16,[[["m128x2"]],["self"]]],[11,"from_cast","","",17,[[["u8x8"]],["self"]]],[11,"from_cast","","",17,[[["m8x8"]],["self"]]],[11,"from_cast","","",17,[[["i16x8"]],["self"]]],[11,"from_cast","","",17,[[["u16x8"]],["self"]]],[11,"from_cast","","",17,[[["m16x8"]],["self"]]],[11,"from_cast","","",17,[[["i32x8"]],["self"]]],[11,"from_cast","","",17,[[["u32x8"]],["self"]]],[11,"from_cast","","",17,[[["f32x8"]],["self"]]],[11,"from_cast","","",17,[[["m32x8"]],["self"]]],[11,"from_cast","","",17,[[["i64x8"]],["self"]]],[11,"from_cast","","",17,[[["u64x8"]],["self"]]],[11,"from_cast","","",17,[[["f64x8"]],["self"]]],[11,"from_cast","","",17,[[["m64x8"]],["self"]]],[11,"from_cast","","",18,[[["i8x8"]],["self"]]],[11,"from_cast","","",18,[[["m8x8"]],["self"]]],[11,"from_cast","","",18,[[["i16x8"]],["self"]]],[11,"from_cast","","",18,[[["u16x8"]],["self"]]],[11,"from_cast","","",18,[[["m16x8"]],["self"]]],[11,"from_cast","","",18,[[["i32x8"]],["self"]]],[11,"from_cast","","",18,[[["u32x8"]],["self"]]],[11,"from_cast","","",18,[[["f32x8"]],["self"]]],[11,"from_cast","","",18,[[["m32x8"]],["self"]]],[11,"from_cast","","",18,[[["i64x8"]],["self"]]],[11,"from_cast","","",18,[[["u64x8"]],["self"]]],[11,"from_cast","","",18,[[["f64x8"]],["self"]]],[11,"from_cast","","",18,[[["m64x8"]],["self"]]],[11,"from_cast","","",19,[[["i8x8"]],["self"]]],[11,"from_cast","","",19,[[["u8x8"]],["self"]]],[11,"from_cast","","",19,[[["i16x8"]],["self"]]],[11,"from_cast","","",19,[[["u16x8"]],["self"]]],[11,"from_cast","","",19,[[["m16x8"]],["self"]]],[11,"from_cast","","",19,[[["i32x8"]],["self"]]],[11,"from_cast","","",19,[[["u32x8"]],["self"]]],[11,"from_cast","","",19,[[["f32x8"]],["self"]]],[11,"from_cast","","",19,[[["m32x8"]],["self"]]],[11,"from_cast","","",19,[[["i64x8"]],["self"]]],[11,"from_cast","","",19,[[["u64x8"]],["self"]]],[11,"from_cast","","",19,[[["f64x8"]],["self"]]],[11,"from_cast","","",19,[[["m64x8"]],["self"]]],[11,"from_cast","","",20,[[["i8x4"]],["self"]]],[11,"from_cast","","",20,[[["u8x4"]],["self"]]],[11,"from_cast","","",20,[[["m8x4"]],["self"]]],[11,"from_cast","","",20,[[["u16x4"]],["self"]]],[11,"from_cast","","",20,[[["m16x4"]],["self"]]],[11,"from_cast","","",20,[[["i32x4"]],["self"]]],[11,"from_cast","","",20,[[["u32x4"]],["self"]]],[11,"from_cast","","",20,[[["f32x4"]],["self"]]],[11,"from_cast","","",20,[[["m32x4"]],["self"]]],[11,"from_cast","","",20,[[["i64x4"]],["self"]]],[11,"from_cast","","",20,[[["u64x4"]],["self"]]],[11,"from_cast","","",20,[[["f64x4"]],["self"]]],[11,"from_cast","","",20,[[["m64x4"]],["self"]]],[11,"from_cast","","",20,[[["i128x4"]],["self"]]],[11,"from_cast","","",20,[[["u128x4"]],["self"]]],[11,"from_cast","","",20,[[["m128x4"]],["self"]]],[11,"from_cast","","",21,[[["i8x4"]],["self"]]],[11,"from_cast","","",21,[[["u8x4"]],["self"]]],[11,"from_cast","","",21,[[["m8x4"]],["self"]]],[11,"from_cast","","",21,[[["i16x4"]],["self"]]],[11,"from_cast","","",21,[[["m16x4"]],["self"]]],[11,"from_cast","","",21,[[["i32x4"]],["self"]]],[11,"from_cast","","",21,[[["u32x4"]],["self"]]],[11,"from_cast","","",21,[[["f32x4"]],["self"]]],[11,"from_cast","","",21,[[["m32x4"]],["self"]]],[11,"from_cast","","",21,[[["i64x4"]],["self"]]],[11,"from_cast","","",21,[[["u64x4"]],["self"]]],[11,"from_cast","","",21,[[["f64x4"]],["self"]]],[11,"from_cast","","",21,[[["m64x4"]],["self"]]],[11,"from_cast","","",21,[[["i128x4"]],["self"]]],[11,"from_cast","","",21,[[["u128x4"]],["self"]]],[11,"from_cast","","",21,[[["m128x4"]],["self"]]],[11,"from_cast","","",22,[[["i8x4"]],["self"]]],[11,"from_cast","","",22,[[["u8x4"]],["self"]]],[11,"from_cast","","",22,[[["m8x4"]],["self"]]],[11,"from_cast","","",22,[[["i16x4"]],["self"]]],[11,"from_cast","","",22,[[["u16x4"]],["self"]]],[11,"from_cast","","",22,[[["i32x4"]],["self"]]],[11,"from_cast","","",22,[[["u32x4"]],["self"]]],[11,"from_cast","","",22,[[["f32x4"]],["self"]]],[11,"from_cast","","",22,[[["m32x4"]],["self"]]],[11,"from_cast","","",22,[[["i64x4"]],["self"]]],[11,"from_cast","","",22,[[["u64x4"]],["self"]]],[11,"from_cast","","",22,[[["f64x4"]],["self"]]],[11,"from_cast","","",22,[[["m64x4"]],["self"]]],[11,"from_cast","","",22,[[["i128x4"]],["self"]]],[11,"from_cast","","",22,[[["u128x4"]],["self"]]],[11,"from_cast","","",22,[[["m128x4"]],["self"]]],[11,"from_cast","","",23,[[["i8x2"]],["self"]]],[11,"from_cast","","",23,[[["u8x2"]],["self"]]],[11,"from_cast","","",23,[[["m8x2"]],["self"]]],[11,"from_cast","","",23,[[["i16x2"]],["self"]]],[11,"from_cast","","",23,[[["u16x2"]],["self"]]],[11,"from_cast","","",23,[[["m16x2"]],["self"]]],[11,"from_cast","","",23,[[["u32x2"]],["self"]]],[11,"from_cast","","",23,[[["f32x2"]],["self"]]],[11,"from_cast","","",23,[[["m32x2"]],["self"]]],[11,"from_cast","","",23,[[["i64x2"]],["self"]]],[11,"from_cast","","",23,[[["u64x2"]],["self"]]],[11,"from_cast","","",23,[[["f64x2"]],["self"]]],[11,"from_cast","","",23,[[["m64x2"]],["self"]]],[11,"from_cast","","",23,[[["i128x2"]],["self"]]],[11,"from_cast","","",23,[[["u128x2"]],["self"]]],[11,"from_cast","","",23,[[["m128x2"]],["self"]]],[11,"from_cast","","",24,[[["i8x2"]],["self"]]],[11,"from_cast","","",24,[[["u8x2"]],["self"]]],[11,"from_cast","","",24,[[["m8x2"]],["self"]]],[11,"from_cast","","",24,[[["i16x2"]],["self"]]],[11,"from_cast","","",24,[[["u16x2"]],["self"]]],[11,"from_cast","","",24,[[["m16x2"]],["self"]]],[11,"from_cast","","",24,[[["i32x2"]],["self"]]],[11,"from_cast","","",24,[[["f32x2"]],["self"]]],[11,"from_cast","","",24,[[["m32x2"]],["self"]]],[11,"from_cast","","",24,[[["i64x2"]],["self"]]],[11,"from_cast","","",24,[[["u64x2"]],["self"]]],[11,"from_cast","","",24,[[["f64x2"]],["self"]]],[11,"from_cast","","",24,[[["m64x2"]],["self"]]],[11,"from_cast","","",24,[[["i128x2"]],["self"]]],[11,"from_cast","","",24,[[["u128x2"]],["self"]]],[11,"from_cast","","",24,[[["m128x2"]],["self"]]],[11,"from_cast","","",25,[[["i8x2"]],["self"]]],[11,"from_cast","","",25,[[["u8x2"]],["self"]]],[11,"from_cast","","",25,[[["m8x2"]],["self"]]],[11,"from_cast","","",25,[[["i16x2"]],["self"]]],[11,"from_cast","","",25,[[["u16x2"]],["self"]]],[11,"from_cast","","",25,[[["m16x2"]],["self"]]],[11,"from_cast","","",25,[[["i32x2"]],["self"]]],[11,"from_cast","","",25,[[["u32x2"]],["self"]]],[11,"from_cast","","",25,[[["m32x2"]],["self"]]],[11,"from_cast","","",25,[[["i64x2"]],["self"]]],[11,"from_cast","","",25,[[["u64x2"]],["self"]]],[11,"from_cast","","",25,[[["f64x2"]],["self"]]],[11,"from_cast","","",25,[[["m64x2"]],["self"]]],[11,"from_cast","","",25,[[["i128x2"]],["self"]]],[11,"from_cast","","",25,[[["u128x2"]],["self"]]],[11,"from_cast","","",25,[[["m128x2"]],["self"]]],[11,"from_cast","","",26,[[["i8x2"]],["self"]]],[11,"from_cast","","",26,[[["u8x2"]],["self"]]],[11,"from_cast","","",26,[[["m8x2"]],["self"]]],[11,"from_cast","","",26,[[["i16x2"]],["self"]]],[11,"from_cast","","",26,[[["u16x2"]],["self"]]],[11,"from_cast","","",26,[[["m16x2"]],["self"]]],[11,"from_cast","","",26,[[["i32x2"]],["self"]]],[11,"from_cast","","",26,[[["u32x2"]],["self"]]],[11,"from_cast","","",26,[[["f32x2"]],["self"]]],[11,"from_cast","","",26,[[["i64x2"]],["self"]]],[11,"from_cast","","",26,[[["u64x2"]],["self"]]],[11,"from_cast","","",26,[[["f64x2"]],["self"]]],[11,"from_cast","","",26,[[["m64x2"]],["self"]]],[11,"from_cast","","",26,[[["i128x2"]],["self"]]],[11,"from_cast","","",26,[[["u128x2"]],["self"]]],[11,"from_cast","","",26,[[["m128x2"]],["self"]]],[11,"from_cast","","",27,[[["u8x16"]],["self"]]],[11,"from_cast","","",27,[[["m8x16"]],["self"]]],[11,"from_cast","","",27,[[["i16x16"]],["self"]]],[11,"from_cast","","",27,[[["u16x16"]],["self"]]],[11,"from_cast","","",27,[[["m16x16"]],["self"]]],[11,"from_cast","","",27,[[["i32x16"]],["self"]]],[11,"from_cast","","",27,[[["u32x16"]],["self"]]],[11,"from_cast","","",27,[[["f32x16"]],["self"]]],[11,"from_cast","","",27,[[["m32x16"]],["self"]]],[11,"from_cast","","",28,[[["i8x16"]],["self"]]],[11,"from_cast","","",28,[[["m8x16"]],["self"]]],[11,"from_cast","","",28,[[["i16x16"]],["self"]]],[11,"from_cast","","",28,[[["u16x16"]],["self"]]],[11,"from_cast","","",28,[[["m16x16"]],["self"]]],[11,"from_cast","","",28,[[["i32x16"]],["self"]]],[11,"from_cast","","",28,[[["u32x16"]],["self"]]],[11,"from_cast","","",28,[[["f32x16"]],["self"]]],[11,"from_cast","","",28,[[["m32x16"]],["self"]]],[11,"from_cast","","",29,[[["i8x16"]],["self"]]],[11,"from_cast","","",29,[[["u8x16"]],["self"]]],[11,"from_cast","","",29,[[["i16x16"]],["self"]]],[11,"from_cast","","",29,[[["u16x16"]],["self"]]],[11,"from_cast","","",29,[[["m16x16"]],["self"]]],[11,"from_cast","","",29,[[["i32x16"]],["self"]]],[11,"from_cast","","",29,[[["u32x16"]],["self"]]],[11,"from_cast","","",29,[[["f32x16"]],["self"]]],[11,"from_cast","","",29,[[["m32x16"]],["self"]]],[11,"from_cast","","",30,[[["i8x8"]],["self"]]],[11,"from_cast","","",30,[[["u8x8"]],["self"]]],[11,"from_cast","","",30,[[["m8x8"]],["self"]]],[11,"from_cast","","",30,[[["u16x8"]],["self"]]],[11,"from_cast","","",30,[[["m16x8"]],["self"]]],[11,"from_cast","","",30,[[["i32x8"]],["self"]]],[11,"from_cast","","",30,[[["u32x8"]],["self"]]],[11,"from_cast","","",30,[[["f32x8"]],["self"]]],[11,"from_cast","","",30,[[["m32x8"]],["self"]]],[11,"from_cast","","",30,[[["i64x8"]],["self"]]],[11,"from_cast","","",30,[[["u64x8"]],["self"]]],[11,"from_cast","","",30,[[["f64x8"]],["self"]]],[11,"from_cast","","",30,[[["m64x8"]],["self"]]],[11,"from_cast","","",31,[[["i8x8"]],["self"]]],[11,"from_cast","","",31,[[["u8x8"]],["self"]]],[11,"from_cast","","",31,[[["m8x8"]],["self"]]],[11,"from_cast","","",31,[[["i16x8"]],["self"]]],[11,"from_cast","","",31,[[["m16x8"]],["self"]]],[11,"from_cast","","",31,[[["i32x8"]],["self"]]],[11,"from_cast","","",31,[[["u32x8"]],["self"]]],[11,"from_cast","","",31,[[["f32x8"]],["self"]]],[11,"from_cast","","",31,[[["m32x8"]],["self"]]],[11,"from_cast","","",31,[[["i64x8"]],["self"]]],[11,"from_cast","","",31,[[["u64x8"]],["self"]]],[11,"from_cast","","",31,[[["f64x8"]],["self"]]],[11,"from_cast","","",31,[[["m64x8"]],["self"]]],[11,"from_cast","","",32,[[["i8x8"]],["self"]]],[11,"from_cast","","",32,[[["u8x8"]],["self"]]],[11,"from_cast","","",32,[[["m8x8"]],["self"]]],[11,"from_cast","","",32,[[["i16x8"]],["self"]]],[11,"from_cast","","",32,[[["u16x8"]],["self"]]],[11,"from_cast","","",32,[[["i32x8"]],["self"]]],[11,"from_cast","","",32,[[["u32x8"]],["self"]]],[11,"from_cast","","",32,[[["f32x8"]],["self"]]],[11,"from_cast","","",32,[[["m32x8"]],["self"]]],[11,"from_cast","","",32,[[["i64x8"]],["self"]]],[11,"from_cast","","",32,[[["u64x8"]],["self"]]],[11,"from_cast","","",32,[[["f64x8"]],["self"]]],[11,"from_cast","","",32,[[["m64x8"]],["self"]]],[11,"from_cast","","",33,[[["i8x4"]],["self"]]],[11,"from_cast","","",33,[[["u8x4"]],["self"]]],[11,"from_cast","","",33,[[["m8x4"]],["self"]]],[11,"from_cast","","",33,[[["i16x4"]],["self"]]],[11,"from_cast","","",33,[[["u16x4"]],["self"]]],[11,"from_cast","","",33,[[["m16x4"]],["self"]]],[11,"from_cast","","",33,[[["u32x4"]],["self"]]],[11,"from_cast","","",33,[[["f32x4"]],["self"]]],[11,"from_cast","","",33,[[["m32x4"]],["self"]]],[11,"from_cast","","",33,[[["i64x4"]],["self"]]],[11,"from_cast","","",33,[[["u64x4"]],["self"]]],[11,"from_cast","","",33,[[["f64x4"]],["self"]]],[11,"from_cast","","",33,[[["m64x4"]],["self"]]],[11,"from_cast","","",33,[[["i128x4"]],["self"]]],[11,"from_cast","","",33,[[["u128x4"]],["self"]]],[11,"from_cast","","",33,[[["m128x4"]],["self"]]],[11,"from_cast","","",34,[[["i8x4"]],["self"]]],[11,"from_cast","","",34,[[["u8x4"]],["self"]]],[11,"from_cast","","",34,[[["m8x4"]],["self"]]],[11,"from_cast","","",34,[[["i16x4"]],["self"]]],[11,"from_cast","","",34,[[["u16x4"]],["self"]]],[11,"from_cast","","",34,[[["m16x4"]],["self"]]],[11,"from_cast","","",34,[[["i32x4"]],["self"]]],[11,"from_cast","","",34,[[["f32x4"]],["self"]]],[11,"from_cast","","",34,[[["m32x4"]],["self"]]],[11,"from_cast","","",34,[[["i64x4"]],["self"]]],[11,"from_cast","","",34,[[["u64x4"]],["self"]]],[11,"from_cast","","",34,[[["f64x4"]],["self"]]],[11,"from_cast","","",34,[[["m64x4"]],["self"]]],[11,"from_cast","","",34,[[["i128x4"]],["self"]]],[11,"from_cast","","",34,[[["u128x4"]],["self"]]],[11,"from_cast","","",34,[[["m128x4"]],["self"]]],[11,"from_cast","","",35,[[["i8x4"]],["self"]]],[11,"from_cast","","",35,[[["u8x4"]],["self"]]],[11,"from_cast","","",35,[[["m8x4"]],["self"]]],[11,"from_cast","","",35,[[["i16x4"]],["self"]]],[11,"from_cast","","",35,[[["u16x4"]],["self"]]],[11,"from_cast","","",35,[[["m16x4"]],["self"]]],[11,"from_cast","","",35,[[["i32x4"]],["self"]]],[11,"from_cast","","",35,[[["u32x4"]],["self"]]],[11,"from_cast","","",35,[[["m32x4"]],["self"]]],[11,"from_cast","","",35,[[["i64x4"]],["self"]]],[11,"from_cast","","",35,[[["u64x4"]],["self"]]],[11,"from_cast","","",35,[[["f64x4"]],["self"]]],[11,"from_cast","","",35,[[["m64x4"]],["self"]]],[11,"from_cast","","",35,[[["i128x4"]],["self"]]],[11,"from_cast","","",35,[[["u128x4"]],["self"]]],[11,"from_cast","","",35,[[["m128x4"]],["self"]]],[11,"from_cast","","",36,[[["i8x4"]],["self"]]],[11,"from_cast","","",36,[[["u8x4"]],["self"]]],[11,"from_cast","","",36,[[["m8x4"]],["self"]]],[11,"from_cast","","",36,[[["i16x4"]],["self"]]],[11,"from_cast","","",36,[[["u16x4"]],["self"]]],[11,"from_cast","","",36,[[["m16x4"]],["self"]]],[11,"from_cast","","",36,[[["i32x4"]],["self"]]],[11,"from_cast","","",36,[[["u32x4"]],["self"]]],[11,"from_cast","","",36,[[["f32x4"]],["self"]]],[11,"from_cast","","",36,[[["i64x4"]],["self"]]],[11,"from_cast","","",36,[[["u64x4"]],["self"]]],[11,"from_cast","","",36,[[["f64x4"]],["self"]]],[11,"from_cast","","",36,[[["m64x4"]],["self"]]],[11,"from_cast","","",36,[[["i128x4"]],["self"]]],[11,"from_cast","","",36,[[["u128x4"]],["self"]]],[11,"from_cast","","",36,[[["m128x4"]],["self"]]],[11,"from_cast","","",37,[[["i8x2"]],["self"]]],[11,"from_cast","","",37,[[["u8x2"]],["self"]]],[11,"from_cast","","",37,[[["m8x2"]],["self"]]],[11,"from_cast","","",37,[[["i16x2"]],["self"]]],[11,"from_cast","","",37,[[["u16x2"]],["self"]]],[11,"from_cast","","",37,[[["m16x2"]],["self"]]],[11,"from_cast","","",37,[[["i32x2"]],["self"]]],[11,"from_cast","","",37,[[["u32x2"]],["self"]]],[11,"from_cast","","",37,[[["f32x2"]],["self"]]],[11,"from_cast","","",37,[[["m32x2"]],["self"]]],[11,"from_cast","","",37,[[["u64x2"]],["self"]]],[11,"from_cast","","",37,[[["f64x2"]],["self"]]],[11,"from_cast","","",37,[[["m64x2"]],["self"]]],[11,"from_cast","","",37,[[["i128x2"]],["self"]]],[11,"from_cast","","",37,[[["u128x2"]],["self"]]],[11,"from_cast","","",37,[[["m128x2"]],["self"]]],[11,"from_cast","","",38,[[["i8x2"]],["self"]]],[11,"from_cast","","",38,[[["u8x2"]],["self"]]],[11,"from_cast","","",38,[[["m8x2"]],["self"]]],[11,"from_cast","","",38,[[["i16x2"]],["self"]]],[11,"from_cast","","",38,[[["u16x2"]],["self"]]],[11,"from_cast","","",38,[[["m16x2"]],["self"]]],[11,"from_cast","","",38,[[["i32x2"]],["self"]]],[11,"from_cast","","",38,[[["u32x2"]],["self"]]],[11,"from_cast","","",38,[[["f32x2"]],["self"]]],[11,"from_cast","","",38,[[["m32x2"]],["self"]]],[11,"from_cast","","",38,[[["i64x2"]],["self"]]],[11,"from_cast","","",38,[[["f64x2"]],["self"]]],[11,"from_cast","","",38,[[["m64x2"]],["self"]]],[11,"from_cast","","",38,[[["i128x2"]],["self"]]],[11,"from_cast","","",38,[[["u128x2"]],["self"]]],[11,"from_cast","","",38,[[["m128x2"]],["self"]]],[11,"from_cast","","",39,[[["i8x2"]],["self"]]],[11,"from_cast","","",39,[[["u8x2"]],["self"]]],[11,"from_cast","","",39,[[["m8x2"]],["self"]]],[11,"from_cast","","",39,[[["i16x2"]],["self"]]],[11,"from_cast","","",39,[[["u16x2"]],["self"]]],[11,"from_cast","","",39,[[["m16x2"]],["self"]]],[11,"from_cast","","",39,[[["i32x2"]],["self"]]],[11,"from_cast","","",39,[[["u32x2"]],["self"]]],[11,"from_cast","","",39,[[["f32x2"]],["self"]]],[11,"from_cast","","",39,[[["m32x2"]],["self"]]],[11,"from_cast","","",39,[[["i64x2"]],["self"]]],[11,"from_cast","","",39,[[["u64x2"]],["self"]]],[11,"from_cast","","",39,[[["m64x2"]],["self"]]],[11,"from_cast","","",39,[[["i128x2"]],["self"]]],[11,"from_cast","","",39,[[["u128x2"]],["self"]]],[11,"from_cast","","",39,[[["m128x2"]],["self"]]],[11,"from_cast","","",40,[[["i8x2"]],["self"]]],[11,"from_cast","","",40,[[["u8x2"]],["self"]]],[11,"from_cast","","",40,[[["m8x2"]],["self"]]],[11,"from_cast","","",40,[[["i16x2"]],["self"]]],[11,"from_cast","","",40,[[["u16x2"]],["self"]]],[11,"from_cast","","",40,[[["m16x2"]],["self"]]],[11,"from_cast","","",40,[[["i32x2"]],["self"]]],[11,"from_cast","","",40,[[["u32x2"]],["self"]]],[11,"from_cast","","",40,[[["f32x2"]],["self"]]],[11,"from_cast","","",40,[[["m32x2"]],["self"]]],[11,"from_cast","","",40,[[["i64x2"]],["self"]]],[11,"from_cast","","",40,[[["u64x2"]],["self"]]],[11,"from_cast","","",40,[[["f64x2"]],["self"]]],[11,"from_cast","","",40,[[["i128x2"]],["self"]]],[11,"from_cast","","",40,[[["u128x2"]],["self"]]],[11,"from_cast","","",40,[[["m128x2"]],["self"]]],[11,"from_cast","","",41,[[["u8x32"]],["self"]]],[11,"from_cast","","",41,[[["m8x32"]],["self"]]],[11,"from_cast","","",41,[[["i16x32"]],["self"]]],[11,"from_cast","","",41,[[["u16x32"]],["self"]]],[11,"from_cast","","",41,[[["m16x32"]],["self"]]],[11,"from_cast","","",42,[[["i8x32"]],["self"]]],[11,"from_cast","","",42,[[["m8x32"]],["self"]]],[11,"from_cast","","",42,[[["i16x32"]],["self"]]],[11,"from_cast","","",42,[[["u16x32"]],["self"]]],[11,"from_cast","","",42,[[["m16x32"]],["self"]]],[11,"from_cast","","",43,[[["i8x32"]],["self"]]],[11,"from_cast","","",43,[[["u8x32"]],["self"]]],[11,"from_cast","","",43,[[["i16x32"]],["self"]]],[11,"from_cast","","",43,[[["u16x32"]],["self"]]],[11,"from_cast","","",43,[[["m16x32"]],["self"]]],[11,"from_cast","","",44,[[["i8x16"]],["self"]]],[11,"from_cast","","",44,[[["u8x16"]],["self"]]],[11,"from_cast","","",44,[[["m8x16"]],["self"]]],[11,"from_cast","","",44,[[["u16x16"]],["self"]]],[11,"from_cast","","",44,[[["m16x16"]],["self"]]],[11,"from_cast","","",44,[[["i32x16"]],["self"]]],[11,"from_cast","","",44,[[["u32x16"]],["self"]]],[11,"from_cast","","",44,[[["f32x16"]],["self"]]],[11,"from_cast","","",44,[[["m32x16"]],["self"]]],[11,"from_cast","","",45,[[["i8x16"]],["self"]]],[11,"from_cast","","",45,[[["u8x16"]],["self"]]],[11,"from_cast","","",45,[[["m8x16"]],["self"]]],[11,"from_cast","","",45,[[["i16x16"]],["self"]]],[11,"from_cast","","",45,[[["m16x16"]],["self"]]],[11,"from_cast","","",45,[[["i32x16"]],["self"]]],[11,"from_cast","","",45,[[["u32x16"]],["self"]]],[11,"from_cast","","",45,[[["f32x16"]],["self"]]],[11,"from_cast","","",45,[[["m32x16"]],["self"]]],[11,"from_cast","","",46,[[["i8x16"]],["self"]]],[11,"from_cast","","",46,[[["u8x16"]],["self"]]],[11,"from_cast","","",46,[[["m8x16"]],["self"]]],[11,"from_cast","","",46,[[["i16x16"]],["self"]]],[11,"from_cast","","",46,[[["u16x16"]],["self"]]],[11,"from_cast","","",46,[[["i32x16"]],["self"]]],[11,"from_cast","","",46,[[["u32x16"]],["self"]]],[11,"from_cast","","",46,[[["f32x16"]],["self"]]],[11,"from_cast","","",46,[[["m32x16"]],["self"]]],[11,"from_cast","","",47,[[["i8x8"]],["self"]]],[11,"from_cast","","",47,[[["u8x8"]],["self"]]],[11,"from_cast","","",47,[[["m8x8"]],["self"]]],[11,"from_cast","","",47,[[["i16x8"]],["self"]]],[11,"from_cast","","",47,[[["u16x8"]],["self"]]],[11,"from_cast","","",47,[[["m16x8"]],["self"]]],[11,"from_cast","","",47,[[["u32x8"]],["self"]]],[11,"from_cast","","",47,[[["f32x8"]],["self"]]],[11,"from_cast","","",47,[[["m32x8"]],["self"]]],[11,"from_cast","","",47,[[["i64x8"]],["self"]]],[11,"from_cast","","",47,[[["u64x8"]],["self"]]],[11,"from_cast","","",47,[[["f64x8"]],["self"]]],[11,"from_cast","","",47,[[["m64x8"]],["self"]]],[11,"from_cast","","",48,[[["i8x8"]],["self"]]],[11,"from_cast","","",48,[[["u8x8"]],["self"]]],[11,"from_cast","","",48,[[["m8x8"]],["self"]]],[11,"from_cast","","",48,[[["i16x8"]],["self"]]],[11,"from_cast","","",48,[[["u16x8"]],["self"]]],[11,"from_cast","","",48,[[["m16x8"]],["self"]]],[11,"from_cast","","",48,[[["i32x8"]],["self"]]],[11,"from_cast","","",48,[[["f32x8"]],["self"]]],[11,"from_cast","","",48,[[["m32x8"]],["self"]]],[11,"from_cast","","",48,[[["i64x8"]],["self"]]],[11,"from_cast","","",48,[[["u64x8"]],["self"]]],[11,"from_cast","","",48,[[["f64x8"]],["self"]]],[11,"from_cast","","",48,[[["m64x8"]],["self"]]],[11,"from_cast","","",49,[[["i8x8"]],["self"]]],[11,"from_cast","","",49,[[["u8x8"]],["self"]]],[11,"from_cast","","",49,[[["m8x8"]],["self"]]],[11,"from_cast","","",49,[[["i16x8"]],["self"]]],[11,"from_cast","","",49,[[["u16x8"]],["self"]]],[11,"from_cast","","",49,[[["m16x8"]],["self"]]],[11,"from_cast","","",49,[[["i32x8"]],["self"]]],[11,"from_cast","","",49,[[["u32x8"]],["self"]]],[11,"from_cast","","",49,[[["m32x8"]],["self"]]],[11,"from_cast","","",49,[[["i64x8"]],["self"]]],[11,"from_cast","","",49,[[["u64x8"]],["self"]]],[11,"from_cast","","",49,[[["f64x8"]],["self"]]],[11,"from_cast","","",49,[[["m64x8"]],["self"]]],[11,"from_cast","","",50,[[["i8x8"]],["self"]]],[11,"from_cast","","",50,[[["u8x8"]],["self"]]],[11,"from_cast","","",50,[[["m8x8"]],["self"]]],[11,"from_cast","","",50,[[["i16x8"]],["self"]]],[11,"from_cast","","",50,[[["u16x8"]],["self"]]],[11,"from_cast","","",50,[[["m16x8"]],["self"]]],[11,"from_cast","","",50,[[["i32x8"]],["self"]]],[11,"from_cast","","",50,[[["u32x8"]],["self"]]],[11,"from_cast","","",50,[[["f32x8"]],["self"]]],[11,"from_cast","","",50,[[["i64x8"]],["self"]]],[11,"from_cast","","",50,[[["u64x8"]],["self"]]],[11,"from_cast","","",50,[[["f64x8"]],["self"]]],[11,"from_cast","","",50,[[["m64x8"]],["self"]]],[11,"from_cast","","",51,[[["i8x4"]],["self"]]],[11,"from_cast","","",51,[[["u8x4"]],["self"]]],[11,"from_cast","","",51,[[["m8x4"]],["self"]]],[11,"from_cast","","",51,[[["i16x4"]],["self"]]],[11,"from_cast","","",51,[[["u16x4"]],["self"]]],[11,"from_cast","","",51,[[["m16x4"]],["self"]]],[11,"from_cast","","",51,[[["i32x4"]],["self"]]],[11,"from_cast","","",51,[[["u32x4"]],["self"]]],[11,"from_cast","","",51,[[["f32x4"]],["self"]]],[11,"from_cast","","",51,[[["m32x4"]],["self"]]],[11,"from_cast","","",51,[[["u64x4"]],["self"]]],[11,"from_cast","","",51,[[["f64x4"]],["self"]]],[11,"from_cast","","",51,[[["m64x4"]],["self"]]],[11,"from_cast","","",51,[[["i128x4"]],["self"]]],[11,"from_cast","","",51,[[["u128x4"]],["self"]]],[11,"from_cast","","",51,[[["m128x4"]],["self"]]],[11,"from_cast","","",52,[[["i8x4"]],["self"]]],[11,"from_cast","","",52,[[["u8x4"]],["self"]]],[11,"from_cast","","",52,[[["m8x4"]],["self"]]],[11,"from_cast","","",52,[[["i16x4"]],["self"]]],[11,"from_cast","","",52,[[["u16x4"]],["self"]]],[11,"from_cast","","",52,[[["m16x4"]],["self"]]],[11,"from_cast","","",52,[[["i32x4"]],["self"]]],[11,"from_cast","","",52,[[["u32x4"]],["self"]]],[11,"from_cast","","",52,[[["f32x4"]],["self"]]],[11,"from_cast","","",52,[[["m32x4"]],["self"]]],[11,"from_cast","","",52,[[["i64x4"]],["self"]]],[11,"from_cast","","",52,[[["f64x4"]],["self"]]],[11,"from_cast","","",52,[[["m64x4"]],["self"]]],[11,"from_cast","","",52,[[["i128x4"]],["self"]]],[11,"from_cast","","",52,[[["u128x4"]],["self"]]],[11,"from_cast","","",52,[[["m128x4"]],["self"]]],[11,"from_cast","","",53,[[["i8x4"]],["self"]]],[11,"from_cast","","",53,[[["u8x4"]],["self"]]],[11,"from_cast","","",53,[[["m8x4"]],["self"]]],[11,"from_cast","","",53,[[["i16x4"]],["self"]]],[11,"from_cast","","",53,[[["u16x4"]],["self"]]],[11,"from_cast","","",53,[[["m16x4"]],["self"]]],[11,"from_cast","","",53,[[["i32x4"]],["self"]]],[11,"from_cast","","",53,[[["u32x4"]],["self"]]],[11,"from_cast","","",53,[[["f32x4"]],["self"]]],[11,"from_cast","","",53,[[["m32x4"]],["self"]]],[11,"from_cast","","",53,[[["i64x4"]],["self"]]],[11,"from_cast","","",53,[[["u64x4"]],["self"]]],[11,"from_cast","","",53,[[["m64x4"]],["self"]]],[11,"from_cast","","",53,[[["i128x4"]],["self"]]],[11,"from_cast","","",53,[[["u128x4"]],["self"]]],[11,"from_cast","","",53,[[["m128x4"]],["self"]]],[11,"from_cast","","",54,[[["i8x4"]],["self"]]],[11,"from_cast","","",54,[[["u8x4"]],["self"]]],[11,"from_cast","","",54,[[["m8x4"]],["self"]]],[11,"from_cast","","",54,[[["i16x4"]],["self"]]],[11,"from_cast","","",54,[[["u16x4"]],["self"]]],[11,"from_cast","","",54,[[["m16x4"]],["self"]]],[11,"from_cast","","",54,[[["i32x4"]],["self"]]],[11,"from_cast","","",54,[[["u32x4"]],["self"]]],[11,"from_cast","","",54,[[["f32x4"]],["self"]]],[11,"from_cast","","",54,[[["m32x4"]],["self"]]],[11,"from_cast","","",54,[[["i64x4"]],["self"]]],[11,"from_cast","","",54,[[["u64x4"]],["self"]]],[11,"from_cast","","",54,[[["f64x4"]],["self"]]],[11,"from_cast","","",54,[[["i128x4"]],["self"]]],[11,"from_cast","","",54,[[["u128x4"]],["self"]]],[11,"from_cast","","",54,[[["m128x4"]],["self"]]],[11,"from_cast","","",55,[[["u8x64"]],["self"]]],[11,"from_cast","","",55,[[["m8x64"]],["self"]]],[11,"from_cast","","",56,[[["i8x64"]],["self"]]],[11,"from_cast","","",56,[[["m8x64"]],["self"]]],[11,"from_cast","","",57,[[["i8x64"]],["self"]]],[11,"from_cast","","",57,[[["u8x64"]],["self"]]],[11,"from_cast","","",58,[[["i8x32"]],["self"]]],[11,"from_cast","","",58,[[["u8x32"]],["self"]]],[11,"from_cast","","",58,[[["m8x32"]],["self"]]],[11,"from_cast","","",58,[[["u16x32"]],["self"]]],[11,"from_cast","","",58,[[["m16x32"]],["self"]]],[11,"from_cast","","",59,[[["i8x32"]],["self"]]],[11,"from_cast","","",59,[[["u8x32"]],["self"]]],[11,"from_cast","","",59,[[["m8x32"]],["self"]]],[11,"from_cast","","",59,[[["i16x32"]],["self"]]],[11,"from_cast","","",59,[[["m16x32"]],["self"]]],[11,"from_cast","","",60,[[["i8x32"]],["self"]]],[11,"from_cast","","",60,[[["u8x32"]],["self"]]],[11,"from_cast","","",60,[[["m8x32"]],["self"]]],[11,"from_cast","","",60,[[["i16x32"]],["self"]]],[11,"from_cast","","",60,[[["u16x32"]],["self"]]],[11,"from_cast","","",61,[[["i8x16"]],["self"]]],[11,"from_cast","","",61,[[["u8x16"]],["self"]]],[11,"from_cast","","",61,[[["m8x16"]],["self"]]],[11,"from_cast","","",61,[[["i16x16"]],["self"]]],[11,"from_cast","","",61,[[["u16x16"]],["self"]]],[11,"from_cast","","",61,[[["m16x16"]],["self"]]],[11,"from_cast","","",61,[[["u32x16"]],["self"]]],[11,"from_cast","","",61,[[["f32x16"]],["self"]]],[11,"from_cast","","",61,[[["m32x16"]],["self"]]],[11,"from_cast","","",62,[[["i8x16"]],["self"]]],[11,"from_cast","","",62,[[["u8x16"]],["self"]]],[11,"from_cast","","",62,[[["m8x16"]],["self"]]],[11,"from_cast","","",62,[[["i16x16"]],["self"]]],[11,"from_cast","","",62,[[["u16x16"]],["self"]]],[11,"from_cast","","",62,[[["m16x16"]],["self"]]],[11,"from_cast","","",62,[[["i32x16"]],["self"]]],[11,"from_cast","","",62,[[["f32x16"]],["self"]]],[11,"from_cast","","",62,[[["m32x16"]],["self"]]],[11,"from_cast","","",63,[[["i8x16"]],["self"]]],[11,"from_cast","","",63,[[["u8x16"]],["self"]]],[11,"from_cast","","",63,[[["m8x16"]],["self"]]],[11,"from_cast","","",63,[[["i16x16"]],["self"]]],[11,"from_cast","","",63,[[["u16x16"]],["self"]]],[11,"from_cast","","",63,[[["m16x16"]],["self"]]],[11,"from_cast","","",63,[[["i32x16"]],["self"]]],[11,"from_cast","","",63,[[["u32x16"]],["self"]]],[11,"from_cast","","",63,[[["m32x16"]],["self"]]],[11,"from_cast","","",64,[[["i8x16"]],["self"]]],[11,"from_cast","","",64,[[["u8x16"]],["self"]]],[11,"from_cast","","",64,[[["m8x16"]],["self"]]],[11,"from_cast","","",64,[[["i16x16"]],["self"]]],[11,"from_cast","","",64,[[["u16x16"]],["self"]]],[11,"from_cast","","",64,[[["m16x16"]],["self"]]],[11,"from_cast","","",64,[[["i32x16"]],["self"]]],[11,"from_cast","","",64,[[["u32x16"]],["self"]]],[11,"from_cast","","",64,[[["f32x16"]],["self"]]],[11,"from_cast","","",65,[[["i8x8"]],["self"]]],[11,"from_cast","","",65,[[["u8x8"]],["self"]]],[11,"from_cast","","",65,[[["m8x8"]],["self"]]],[11,"from_cast","","",65,[[["i16x8"]],["self"]]],[11,"from_cast","","",65,[[["u16x8"]],["self"]]],[11,"from_cast","","",65,[[["m16x8"]],["self"]]],[11,"from_cast","","",65,[[["i32x8"]],["self"]]],[11,"from_cast","","",65,[[["u32x8"]],["self"]]],[11,"from_cast","","",65,[[["f32x8"]],["self"]]],[11,"from_cast","","",65,[[["m32x8"]],["self"]]],[11,"from_cast","","",65,[[["u64x8"]],["self"]]],[11,"from_cast","","",65,[[["f64x8"]],["self"]]],[11,"from_cast","","",65,[[["m64x8"]],["self"]]],[11,"from_cast","","",66,[[["i8x8"]],["self"]]],[11,"from_cast","","",66,[[["u8x8"]],["self"]]],[11,"from_cast","","",66,[[["m8x8"]],["self"]]],[11,"from_cast","","",66,[[["i16x8"]],["self"]]],[11,"from_cast","","",66,[[["u16x8"]],["self"]]],[11,"from_cast","","",66,[[["m16x8"]],["self"]]],[11,"from_cast","","",66,[[["i32x8"]],["self"]]],[11,"from_cast","","",66,[[["u32x8"]],["self"]]],[11,"from_cast","","",66,[[["f32x8"]],["self"]]],[11,"from_cast","","",66,[[["m32x8"]],["self"]]],[11,"from_cast","","",66,[[["i64x8"]],["self"]]],[11,"from_cast","","",66,[[["f64x8"]],["self"]]],[11,"from_cast","","",66,[[["m64x8"]],["self"]]],[11,"from_cast","","",67,[[["i8x8"]],["self"]]],[11,"from_cast","","",67,[[["u8x8"]],["self"]]],[11,"from_cast","","",67,[[["m8x8"]],["self"]]],[11,"from_cast","","",67,[[["i16x8"]],["self"]]],[11,"from_cast","","",67,[[["u16x8"]],["self"]]],[11,"from_cast","","",67,[[["m16x8"]],["self"]]],[11,"from_cast","","",67,[[["i32x8"]],["self"]]],[11,"from_cast","","",67,[[["u32x8"]],["self"]]],[11,"from_cast","","",67,[[["f32x8"]],["self"]]],[11,"from_cast","","",67,[[["m32x8"]],["self"]]],[11,"from_cast","","",67,[[["i64x8"]],["self"]]],[11,"from_cast","","",67,[[["u64x8"]],["self"]]],[11,"from_cast","","",67,[[["m64x8"]],["self"]]],[11,"from_cast","","",68,[[["i8x8"]],["self"]]],[11,"from_cast","","",68,[[["u8x8"]],["self"]]],[11,"from_cast","","",68,[[["m8x8"]],["self"]]],[11,"from_cast","","",68,[[["i16x8"]],["self"]]],[11,"from_cast","","",68,[[["u16x8"]],["self"]]],[11,"from_cast","","",68,[[["m16x8"]],["self"]]],[11,"from_cast","","",68,[[["i32x8"]],["self"]]],[11,"from_cast","","",68,[[["u32x8"]],["self"]]],[11,"from_cast","","",68,[[["f32x8"]],["self"]]],[11,"from_cast","","",68,[[["m32x8"]],["self"]]],[11,"from_cast","","",68,[[["i64x8"]],["self"]]],[11,"from_cast","","",68,[[["u64x8"]],["self"]]],[11,"from_cast","","",68,[[["f64x8"]],["self"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",8,[[["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",8,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",8,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",8,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",8,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",8,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",8,[[["self"],["self"]],["self"]]],[11,"sub","","",8,[[["self"],["self"]],["self"]]],[11,"mul","","",8,[[["self"],["self"]],["self"]]],[11,"div","","",8,[[["self"],["self"]],["self"]]],[11,"rem","","",8,[[["self"],["self"]],["self"]]],[11,"add_assign","","",8,[[["self"],["self"]]]],[11,"sub_assign","","",8,[[["self"],["self"]]]],[11,"mul_assign","","",8,[[["self"],["self"]]]],[11,"div_assign","","",8,[[["self"],["self"]]]],[11,"rem_assign","","",8,[[["self"],["self"]]]],[11,"add","","",8,[[["self"],["i8"]],["self"]]],[11,"sub","","",8,[[["self"],["i8"]],["self"]]],[11,"mul","","",8,[[["self"],["i8"]],["self"]]],[11,"div","","",8,[[["self"],["i8"]],["self"]]],[11,"rem","","",8,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",8,[[["self"],["i8"]]]],[11,"sub_assign","","",8,[[["self"],["i8"]]]],[11,"mul_assign","","",8,[[["self"],["i8"]]]],[11,"div_assign","","",8,[[["self"],["i8"]]]],[11,"rem_assign","","",8,[[["self"],["i8"]]]],[11,"not","","",8,[[["self"]],["self"]]],[11,"bitxor","","",8,[[["self"],["self"]],["self"]]],[11,"bitand","","",8,[[["self"],["self"]],["self"]]],[11,"bitor","","",8,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",8,[[["self"],["self"]]]],[11,"bitor_assign","","",8,[[["self"],["self"]]]],[11,"bitxor_assign","","",8,[[["self"],["self"]]]],[11,"bitxor","","",8,[[["self"],["i8"]],["self"]]],[11,"bitand","","",8,[[["self"],["i8"]],["self"]]],[11,"bitor","","",8,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",8,[[["self"],["i8"]]]],[11,"bitor_assign","","",8,[[["self"],["i8"]]]],[11,"bitxor_assign","","",8,[[["self"],["i8"]]]],[11,"shl","","",8,[[["self"],["self"]],["self"]]],[11,"shr","","",8,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["self"]]]],[11,"shr_assign","","",8,[[["self"],["self"]]]],[11,"shl","","",8,[[["self"],["u32"]],["self"]]],[11,"shr","","",8,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",8,[[["self"],["u32"]]]],[11,"shr_assign","","",8,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",8,[[["self"],["i8x2"]],["i8x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",8,[[["self"],["i8x2"]],["i8x2"]]],[11,"neg","","",8,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",8,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",8,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",8,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",8,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",8,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",8,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",8,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",8,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",8,[[["self"]],["i8"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from","","",8,N],[11,"default","","",8,[[],["self"]]],[11,"hash","","",8,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",8,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",8,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",8,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",8,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",8,N],[11,"swap_bytes","","Reverses the byte order of the vector.",8,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",8,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",8,[[["self"]],["self"]]],[11,"eq","","",8,[[["self"],["self"]],["bool"]]],[11,"ne","","",8,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",8,[[["self"],["i8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",8,[[["self"],["i8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",8,[[["self"],["i8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",8,[[["self"],["i8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",8,[[["self"],["i8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",8,[[["self"],["i8x2"]],["m8x2"]]],[11,"partial_cmp","","",8,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["self"]],["bool"]]],[11,"le","","",8,[[["self"],["self"]],["bool"]]],[11,"ge","","",8,[[["self"],["self"]],["bool"]]],[11,"gt","","",8,[[["self"],["self"]],["bool"]]],[11,"cmp","","",8,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",9,[[["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",9,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",9,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",9,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",9,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",9,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",9,[[["self"],["self"]],["self"]]],[11,"sub","","",9,[[["self"],["self"]],["self"]]],[11,"mul","","",9,[[["self"],["self"]],["self"]]],[11,"div","","",9,[[["self"],["self"]],["self"]]],[11,"rem","","",9,[[["self"],["self"]],["self"]]],[11,"add_assign","","",9,[[["self"],["self"]]]],[11,"sub_assign","","",9,[[["self"],["self"]]]],[11,"mul_assign","","",9,[[["self"],["self"]]]],[11,"div_assign","","",9,[[["self"],["self"]]]],[11,"rem_assign","","",9,[[["self"],["self"]]]],[11,"add","","",9,[[["self"],["u8"]],["self"]]],[11,"sub","","",9,[[["self"],["u8"]],["self"]]],[11,"mul","","",9,[[["self"],["u8"]],["self"]]],[11,"div","","",9,[[["self"],["u8"]],["self"]]],[11,"rem","","",9,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",9,[[["self"],["u8"]]]],[11,"sub_assign","","",9,[[["self"],["u8"]]]],[11,"mul_assign","","",9,[[["self"],["u8"]]]],[11,"div_assign","","",9,[[["self"],["u8"]]]],[11,"rem_assign","","",9,[[["self"],["u8"]]]],[11,"not","","",9,[[["self"]],["self"]]],[11,"bitxor","","",9,[[["self"],["self"]],["self"]]],[11,"bitand","","",9,[[["self"],["self"]],["self"]]],[11,"bitor","","",9,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",9,[[["self"],["self"]]]],[11,"bitor_assign","","",9,[[["self"],["self"]]]],[11,"bitxor_assign","","",9,[[["self"],["self"]]]],[11,"bitxor","","",9,[[["self"],["u8"]],["self"]]],[11,"bitand","","",9,[[["self"],["u8"]],["self"]]],[11,"bitor","","",9,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",9,[[["self"],["u8"]]]],[11,"bitor_assign","","",9,[[["self"],["u8"]]]],[11,"bitxor_assign","","",9,[[["self"],["u8"]]]],[11,"shl","","",9,[[["self"],["self"]],["self"]]],[11,"shr","","",9,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["self"]]]],[11,"shr_assign","","",9,[[["self"],["self"]]]],[11,"shl","","",9,[[["self"],["u32"]],["self"]]],[11,"shr","","",9,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",9,[[["self"],["u32"]]]],[11,"shr_assign","","",9,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",9,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",9,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",9,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",9,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",9,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",9,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",9,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",9,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",9,[[["self"]],["u8"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"from","","",9,N],[11,"default","","",9,[[],["self"]]],[11,"hash","","",9,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",9,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",9,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",9,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",9,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",9,N],[11,"swap_bytes","","Reverses the byte order of the vector.",9,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",9,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",9,[[["self"]],["self"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"ne","","",9,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",9,[[["self"],["u8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",9,[[["self"],["u8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",9,[[["self"],["u8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",9,[[["self"],["u8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",9,[[["self"],["u8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",9,[[["self"],["u8x2"]],["m8x2"]]],[11,"partial_cmp","","",9,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",9,[[["self"],["self"]],["bool"]]],[11,"le","","",9,[[["self"],["self"]],["bool"]]],[11,"ge","","",9,[[["self"],["self"]],["bool"]]],[11,"gt","","",9,[[["self"],["self"]],["bool"]]],[11,"cmp","","",9,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",10,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",10,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",10,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",10,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",10,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",10,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",10,[[["self"]],["self"]]],[11,"bitxor","","",10,[[["self"],["self"]],["self"]]],[11,"bitand","","",10,[[["self"],["self"]],["self"]]],[11,"bitor","","",10,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",10,[[["self"],["self"]]]],[11,"bitor_assign","","",10,[[["self"],["self"]]]],[11,"bitxor_assign","","",10,[[["self"],["self"]]]],[11,"bitxor","","",10,[[["self"],["bool"]],["self"]]],[11,"bitand","","",10,[[["self"],["bool"]],["self"]]],[11,"bitor","","",10,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",10,[[["self"],["bool"]]]],[11,"bitor_assign","","",10,[[["self"],["bool"]]]],[11,"bitxor_assign","","",10,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",10,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",10,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",10,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",10,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",10,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",10,[[["self"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"from","","",10,N],[11,"from","","",10,[[["m16x2"]],["self"]]],[11,"from","","",10,[[["m32x2"]],["self"]]],[11,"from","","",10,[[["m64x2"]],["self"]]],[11,"from","","",10,[[["m128x2"]],["self"]]],[11,"default","","",10,[[],["self"]]],[11,"eq","","",10,[[["self"],["self"]],["bool"]]],[11,"ne","","",10,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",10,[[["self"],["m8x2"]],["m8x2"]]],[11,"ne","","Lane-wise inequality comparison.",10,[[["self"],["m8x2"]],["m8x2"]]],[11,"lt","","Lane-wise less-than comparison.",10,[[["self"],["m8x2"]],["m8x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",10,[[["self"],["m8x2"]],["m8x2"]]],[11,"gt","","Lane-wise greater-than comparison.",10,[[["self"],["m8x2"]],["m8x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",10,[[["self"],["m8x2"]],["m8x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",10,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",10,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["self"]],["bool"]]],[11,"le","","",10,[[["self"],["self"]],["bool"]]],[11,"ge","","",10,[[["self"],["self"]],["bool"]]],[11,"gt","","",10,[[["self"],["self"]],["bool"]]],[11,"cmp","","",10,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",11,[[["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",11,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",11,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",11,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",11,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",11,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",11,[[["self"],["self"]],["self"]]],[11,"sub","","",11,[[["self"],["self"]],["self"]]],[11,"mul","","",11,[[["self"],["self"]],["self"]]],[11,"div","","",11,[[["self"],["self"]],["self"]]],[11,"rem","","",11,[[["self"],["self"]],["self"]]],[11,"add_assign","","",11,[[["self"],["self"]]]],[11,"sub_assign","","",11,[[["self"],["self"]]]],[11,"mul_assign","","",11,[[["self"],["self"]]]],[11,"div_assign","","",11,[[["self"],["self"]]]],[11,"rem_assign","","",11,[[["self"],["self"]]]],[11,"add","","",11,[[["self"],["i8"]],["self"]]],[11,"sub","","",11,[[["self"],["i8"]],["self"]]],[11,"mul","","",11,[[["self"],["i8"]],["self"]]],[11,"div","","",11,[[["self"],["i8"]],["self"]]],[11,"rem","","",11,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",11,[[["self"],["i8"]]]],[11,"sub_assign","","",11,[[["self"],["i8"]]]],[11,"mul_assign","","",11,[[["self"],["i8"]]]],[11,"div_assign","","",11,[[["self"],["i8"]]]],[11,"rem_assign","","",11,[[["self"],["i8"]]]],[11,"not","","",11,[[["self"]],["self"]]],[11,"bitxor","","",11,[[["self"],["self"]],["self"]]],[11,"bitand","","",11,[[["self"],["self"]],["self"]]],[11,"bitor","","",11,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",11,[[["self"],["self"]]]],[11,"bitor_assign","","",11,[[["self"],["self"]]]],[11,"bitxor_assign","","",11,[[["self"],["self"]]]],[11,"bitxor","","",11,[[["self"],["i8"]],["self"]]],[11,"bitand","","",11,[[["self"],["i8"]],["self"]]],[11,"bitor","","",11,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",11,[[["self"],["i8"]]]],[11,"bitor_assign","","",11,[[["self"],["i8"]]]],[11,"bitxor_assign","","",11,[[["self"],["i8"]]]],[11,"shl","","",11,[[["self"],["self"]],["self"]]],[11,"shr","","",11,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",11,[[["self"],["self"]]]],[11,"shr_assign","","",11,[[["self"],["self"]]]],[11,"shl","","",11,[[["self"],["u32"]],["self"]]],[11,"shr","","",11,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",11,[[["self"],["u32"]]]],[11,"shr_assign","","",11,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",11,[[["self"],["i8x4"]],["i8x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,[[["self"],["i8x4"]],["i8x4"]]],[11,"neg","","",11,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",11,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",11,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",11,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",11,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",11,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",11,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",11,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",11,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",11,[[["self"]],["i8"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,N],[11,"default","","",11,[[],["self"]]],[11,"hash","","",11,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",11,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",11,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",11,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",11,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",11,N],[11,"swap_bytes","","Reverses the byte order of the vector.",11,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",11,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",11,[[["self"]],["self"]]],[11,"eq","","",11,[[["self"],["self"]],["bool"]]],[11,"ne","","",11,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",11,[[["self"],["i8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",11,[[["self"],["i8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",11,[[["self"],["i8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",11,[[["self"],["i8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",11,[[["self"],["i8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",11,[[["self"],["i8x4"]],["m8x4"]]],[11,"partial_cmp","","",11,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",11,[[["self"],["self"]],["bool"]]],[11,"le","","",11,[[["self"],["self"]],["bool"]]],[11,"ge","","",11,[[["self"],["self"]],["bool"]]],[11,"gt","","",11,[[["self"],["self"]],["bool"]]],[11,"cmp","","",11,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",12,[[["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",12,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",12,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",12,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",12,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",12,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",12,[[["self"],["self"]],["self"]]],[11,"sub","","",12,[[["self"],["self"]],["self"]]],[11,"mul","","",12,[[["self"],["self"]],["self"]]],[11,"div","","",12,[[["self"],["self"]],["self"]]],[11,"rem","","",12,[[["self"],["self"]],["self"]]],[11,"add_assign","","",12,[[["self"],["self"]]]],[11,"sub_assign","","",12,[[["self"],["self"]]]],[11,"mul_assign","","",12,[[["self"],["self"]]]],[11,"div_assign","","",12,[[["self"],["self"]]]],[11,"rem_assign","","",12,[[["self"],["self"]]]],[11,"add","","",12,[[["self"],["u8"]],["self"]]],[11,"sub","","",12,[[["self"],["u8"]],["self"]]],[11,"mul","","",12,[[["self"],["u8"]],["self"]]],[11,"div","","",12,[[["self"],["u8"]],["self"]]],[11,"rem","","",12,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",12,[[["self"],["u8"]]]],[11,"sub_assign","","",12,[[["self"],["u8"]]]],[11,"mul_assign","","",12,[[["self"],["u8"]]]],[11,"div_assign","","",12,[[["self"],["u8"]]]],[11,"rem_assign","","",12,[[["self"],["u8"]]]],[11,"not","","",12,[[["self"]],["self"]]],[11,"bitxor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand","","",12,[[["self"],["self"]],["self"]]],[11,"bitor","","",12,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["self"]]]],[11,"bitor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor_assign","","",12,[[["self"],["self"]]]],[11,"bitxor","","",12,[[["self"],["u8"]],["self"]]],[11,"bitand","","",12,[[["self"],["u8"]],["self"]]],[11,"bitor","","",12,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",12,[[["self"],["u8"]]]],[11,"bitor_assign","","",12,[[["self"],["u8"]]]],[11,"bitxor_assign","","",12,[[["self"],["u8"]]]],[11,"shl","","",12,[[["self"],["self"]],["self"]]],[11,"shr","","",12,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["self"]]]],[11,"shr_assign","","",12,[[["self"],["self"]]]],[11,"shl","","",12,[[["self"],["u32"]],["self"]]],[11,"shr","","",12,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",12,[[["self"],["u32"]]]],[11,"shr_assign","","",12,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",12,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",12,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",12,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",12,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",12,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",12,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",12,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",12,[[["self"]],["u8"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"from","","",12,N],[11,"default","","",12,[[],["self"]]],[11,"hash","","",12,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",12,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",12,N],[11,"swap_bytes","","Reverses the byte order of the vector.",12,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",12,[[["self"]],["self"]]],[11,"eq","","",12,[[["self"],["self"]],["bool"]]],[11,"ne","","",12,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",12,[[["self"],["u8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",12,[[["self"],["u8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",12,[[["self"],["u8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",12,[[["self"],["u8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",12,[[["self"],["u8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",12,[[["self"],["u8x4"]],["m8x4"]]],[11,"partial_cmp","","",12,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",12,[[["self"],["self"]],["bool"]]],[11,"le","","",12,[[["self"],["self"]],["bool"]]],[11,"ge","","",12,[[["self"],["self"]],["bool"]]],[11,"gt","","",12,[[["self"],["self"]],["bool"]]],[11,"cmp","","",12,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",13,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",13,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",13,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",13,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",13,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",13,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",13,[[["self"]],["self"]]],[11,"bitxor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand","","",13,[[["self"],["self"]],["self"]]],[11,"bitor","","",13,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["self"]]]],[11,"bitor_assign","","",13,[[["self"],["self"]]]],[11,"bitxor_assign","","",13,[[["self"],["self"]]]],[11,"bitxor","","",13,[[["self"],["bool"]],["self"]]],[11,"bitand","","",13,[[["self"],["bool"]],["self"]]],[11,"bitor","","",13,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",13,[[["self"],["bool"]]]],[11,"bitor_assign","","",13,[[["self"],["bool"]]]],[11,"bitxor_assign","","",13,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",13,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",13,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",13,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",13,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",13,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",13,[[["self"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"from","","",13,N],[11,"from","","",13,[[["m16x4"]],["self"]]],[11,"from","","",13,[[["m32x4"]],["self"]]],[11,"from","","",13,[[["m64x4"]],["self"]]],[11,"default","","",13,[[],["self"]]],[11,"eq","","",13,[[["self"],["self"]],["bool"]]],[11,"ne","","",13,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",13,[[["self"],["m8x4"]],["m8x4"]]],[11,"ne","","Lane-wise inequality comparison.",13,[[["self"],["m8x4"]],["m8x4"]]],[11,"lt","","Lane-wise less-than comparison.",13,[[["self"],["m8x4"]],["m8x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",13,[[["self"],["m8x4"]],["m8x4"]]],[11,"gt","","Lane-wise greater-than comparison.",13,[[["self"],["m8x4"]],["m8x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",13,[[["self"],["m8x4"]],["m8x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",13,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",13,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["self"]],["bool"]]],[11,"le","","",13,[[["self"],["self"]],["bool"]]],[11,"ge","","",13,[[["self"],["self"]],["bool"]]],[11,"gt","","",13,[[["self"],["self"]],["bool"]]],[11,"cmp","","",13,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",14,[[["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",14,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",14,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",14,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",14,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",14,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",14,[[["self"],["self"]],["self"]]],[11,"sub","","",14,[[["self"],["self"]],["self"]]],[11,"mul","","",14,[[["self"],["self"]],["self"]]],[11,"div","","",14,[[["self"],["self"]],["self"]]],[11,"rem","","",14,[[["self"],["self"]],["self"]]],[11,"add_assign","","",14,[[["self"],["self"]]]],[11,"sub_assign","","",14,[[["self"],["self"]]]],[11,"mul_assign","","",14,[[["self"],["self"]]]],[11,"div_assign","","",14,[[["self"],["self"]]]],[11,"rem_assign","","",14,[[["self"],["self"]]]],[11,"add","","",14,[[["self"],["i16"]],["self"]]],[11,"sub","","",14,[[["self"],["i16"]],["self"]]],[11,"mul","","",14,[[["self"],["i16"]],["self"]]],[11,"div","","",14,[[["self"],["i16"]],["self"]]],[11,"rem","","",14,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",14,[[["self"],["i16"]]]],[11,"sub_assign","","",14,[[["self"],["i16"]]]],[11,"mul_assign","","",14,[[["self"],["i16"]]]],[11,"div_assign","","",14,[[["self"],["i16"]]]],[11,"rem_assign","","",14,[[["self"],["i16"]]]],[11,"not","","",14,[[["self"]],["self"]]],[11,"bitxor","","",14,[[["self"],["self"]],["self"]]],[11,"bitand","","",14,[[["self"],["self"]],["self"]]],[11,"bitor","","",14,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",14,[[["self"],["self"]]]],[11,"bitor_assign","","",14,[[["self"],["self"]]]],[11,"bitxor_assign","","",14,[[["self"],["self"]]]],[11,"bitxor","","",14,[[["self"],["i16"]],["self"]]],[11,"bitand","","",14,[[["self"],["i16"]],["self"]]],[11,"bitor","","",14,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",14,[[["self"],["i16"]]]],[11,"bitor_assign","","",14,[[["self"],["i16"]]]],[11,"bitxor_assign","","",14,[[["self"],["i16"]]]],[11,"shl","","",14,[[["self"],["self"]],["self"]]],[11,"shr","","",14,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",14,[[["self"],["self"]]]],[11,"shr_assign","","",14,[[["self"],["self"]]]],[11,"shl","","",14,[[["self"],["u32"]],["self"]]],[11,"shr","","",14,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",14,[[["self"],["u32"]]]],[11,"shr_assign","","",14,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",14,[[["self"],["i16x2"]],["i16x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",14,[[["self"],["i16x2"]],["i16x2"]]],[11,"neg","","",14,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",14,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",14,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",14,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",14,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",14,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",14,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",14,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",14,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",14,[[["self"]],["i16"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"from","","",14,N],[11,"from","","",14,[[["i8x2"]],["self"]]],[11,"from","","",14,[[["u8x2"]],["self"]]],[11,"default","","",14,[[],["self"]]],[11,"hash","","",14,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",14,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",14,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",14,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",14,N],[11,"swap_bytes","","Reverses the byte order of the vector.",14,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",14,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",14,[[["self"]],["self"]]],[11,"eq","","",14,[[["self"],["self"]],["bool"]]],[11,"ne","","",14,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",14,[[["self"],["i16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",14,[[["self"],["i16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",14,[[["self"],["i16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",14,[[["self"],["i16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",14,[[["self"],["i16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",14,[[["self"],["i16x2"]],["m16x2"]]],[11,"partial_cmp","","",14,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["self"]],["bool"]]],[11,"le","","",14,[[["self"],["self"]],["bool"]]],[11,"ge","","",14,[[["self"],["self"]],["bool"]]],[11,"gt","","",14,[[["self"],["self"]],["bool"]]],[11,"cmp","","",14,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",15,[[["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",15,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",15,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",15,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",15,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",15,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",15,[[["self"],["self"]],["self"]]],[11,"sub","","",15,[[["self"],["self"]],["self"]]],[11,"mul","","",15,[[["self"],["self"]],["self"]]],[11,"div","","",15,[[["self"],["self"]],["self"]]],[11,"rem","","",15,[[["self"],["self"]],["self"]]],[11,"add_assign","","",15,[[["self"],["self"]]]],[11,"sub_assign","","",15,[[["self"],["self"]]]],[11,"mul_assign","","",15,[[["self"],["self"]]]],[11,"div_assign","","",15,[[["self"],["self"]]]],[11,"rem_assign","","",15,[[["self"],["self"]]]],[11,"add","","",15,[[["self"],["u16"]],["self"]]],[11,"sub","","",15,[[["self"],["u16"]],["self"]]],[11,"mul","","",15,[[["self"],["u16"]],["self"]]],[11,"div","","",15,[[["self"],["u16"]],["self"]]],[11,"rem","","",15,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",15,[[["self"],["u16"]]]],[11,"sub_assign","","",15,[[["self"],["u16"]]]],[11,"mul_assign","","",15,[[["self"],["u16"]]]],[11,"div_assign","","",15,[[["self"],["u16"]]]],[11,"rem_assign","","",15,[[["self"],["u16"]]]],[11,"not","","",15,[[["self"]],["self"]]],[11,"bitxor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand","","",15,[[["self"],["self"]],["self"]]],[11,"bitor","","",15,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["self"]]]],[11,"bitor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor_assign","","",15,[[["self"],["self"]]]],[11,"bitxor","","",15,[[["self"],["u16"]],["self"]]],[11,"bitand","","",15,[[["self"],["u16"]],["self"]]],[11,"bitor","","",15,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",15,[[["self"],["u16"]]]],[11,"bitor_assign","","",15,[[["self"],["u16"]]]],[11,"bitxor_assign","","",15,[[["self"],["u16"]]]],[11,"shl","","",15,[[["self"],["self"]],["self"]]],[11,"shr","","",15,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",15,[[["self"],["self"]]]],[11,"shr_assign","","",15,[[["self"],["self"]]]],[11,"shl","","",15,[[["self"],["u32"]],["self"]]],[11,"shr","","",15,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",15,[[["self"],["u32"]]]],[11,"shr_assign","","",15,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",15,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",15,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",15,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",15,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",15,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",15,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",15,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",15,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",15,[[["self"]],["u16"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"from","","",15,N],[11,"from","","",15,[[["u8x2"]],["self"]]],[11,"default","","",15,[[],["self"]]],[11,"hash","","",15,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",15,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",15,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",15,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",15,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",15,N],[11,"swap_bytes","","Reverses the byte order of the vector.",15,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",15,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",15,[[["self"]],["self"]]],[11,"eq","","",15,[[["self"],["self"]],["bool"]]],[11,"ne","","",15,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",15,[[["self"],["u16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",15,[[["self"],["u16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",15,[[["self"],["u16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",15,[[["self"],["u16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",15,[[["self"],["u16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",15,[[["self"],["u16x2"]],["m16x2"]]],[11,"partial_cmp","","",15,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",15,[[["self"],["self"]],["bool"]]],[11,"le","","",15,[[["self"],["self"]],["bool"]]],[11,"ge","","",15,[[["self"],["self"]],["bool"]]],[11,"gt","","",15,[[["self"],["self"]],["bool"]]],[11,"cmp","","",15,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",16,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",16,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",16,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",16,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",16,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",16,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",16,[[["self"]],["self"]]],[11,"bitxor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand","","",16,[[["self"],["self"]],["self"]]],[11,"bitor","","",16,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["self"]]]],[11,"bitor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor_assign","","",16,[[["self"],["self"]]]],[11,"bitxor","","",16,[[["self"],["bool"]],["self"]]],[11,"bitand","","",16,[[["self"],["bool"]],["self"]]],[11,"bitor","","",16,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",16,[[["self"],["bool"]]]],[11,"bitor_assign","","",16,[[["self"],["bool"]]]],[11,"bitxor_assign","","",16,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",16,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",16,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",16,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",16,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",16,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",16,[[["self"]],["bool"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"from","","",16,N],[11,"from","","",16,[[["m8x2"]],["self"]]],[11,"from","","",16,[[["m32x2"]],["self"]]],[11,"from","","",16,[[["m64x2"]],["self"]]],[11,"from","","",16,[[["m128x2"]],["self"]]],[11,"default","","",16,[[],["self"]]],[11,"eq","","",16,[[["self"],["self"]],["bool"]]],[11,"ne","","",16,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",16,[[["self"],["m16x2"]],["m16x2"]]],[11,"ne","","Lane-wise inequality comparison.",16,[[["self"],["m16x2"]],["m16x2"]]],[11,"lt","","Lane-wise less-than comparison.",16,[[["self"],["m16x2"]],["m16x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",16,[[["self"],["m16x2"]],["m16x2"]]],[11,"gt","","Lane-wise greater-than comparison.",16,[[["self"],["m16x2"]],["m16x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",16,[[["self"],["m16x2"]],["m16x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",16,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",16,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",16,[[["self"],["self"]],["bool"]]],[11,"le","","",16,[[["self"],["self"]],["bool"]]],[11,"ge","","",16,[[["self"],["self"]],["bool"]]],[11,"gt","","",16,[[["self"],["self"]],["bool"]]],[11,"cmp","","",16,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",17,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",17,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",17,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",17,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",17,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",17,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",17,[[["self"],["self"]],["self"]]],[11,"sub","","",17,[[["self"],["self"]],["self"]]],[11,"mul","","",17,[[["self"],["self"]],["self"]]],[11,"div","","",17,[[["self"],["self"]],["self"]]],[11,"rem","","",17,[[["self"],["self"]],["self"]]],[11,"add_assign","","",17,[[["self"],["self"]]]],[11,"sub_assign","","",17,[[["self"],["self"]]]],[11,"mul_assign","","",17,[[["self"],["self"]]]],[11,"div_assign","","",17,[[["self"],["self"]]]],[11,"rem_assign","","",17,[[["self"],["self"]]]],[11,"add","","",17,[[["self"],["i8"]],["self"]]],[11,"sub","","",17,[[["self"],["i8"]],["self"]]],[11,"mul","","",17,[[["self"],["i8"]],["self"]]],[11,"div","","",17,[[["self"],["i8"]],["self"]]],[11,"rem","","",17,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",17,[[["self"],["i8"]]]],[11,"sub_assign","","",17,[[["self"],["i8"]]]],[11,"mul_assign","","",17,[[["self"],["i8"]]]],[11,"div_assign","","",17,[[["self"],["i8"]]]],[11,"rem_assign","","",17,[[["self"],["i8"]]]],[11,"not","","",17,[[["self"]],["self"]]],[11,"bitxor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand","","",17,[[["self"],["self"]],["self"]]],[11,"bitor","","",17,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["self"]]]],[11,"bitor_assign","","",17,[[["self"],["self"]]]],[11,"bitxor_assign","","",17,[[["self"],["self"]]]],[11,"bitxor","","",17,[[["self"],["i8"]],["self"]]],[11,"bitand","","",17,[[["self"],["i8"]],["self"]]],[11,"bitor","","",17,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",17,[[["self"],["i8"]]]],[11,"bitor_assign","","",17,[[["self"],["i8"]]]],[11,"bitxor_assign","","",17,[[["self"],["i8"]]]],[11,"shl","","",17,[[["self"],["self"]],["self"]]],[11,"shr","","",17,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["self"]]]],[11,"shr_assign","","",17,[[["self"],["self"]]]],[11,"shl","","",17,[[["self"],["u32"]],["self"]]],[11,"shr","","",17,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",17,[[["self"],["u32"]]]],[11,"shr_assign","","",17,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",17,[[["self"],["i8x8"]],["i8x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",17,[[["self"],["i8x8"]],["i8x8"]]],[11,"neg","","",17,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",17,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",17,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",17,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",17,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",17,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",17,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",17,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",17,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",17,[[["self"]],["i8"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"from","","",17,N],[11,"default","","",17,[[],["self"]]],[11,"hash","","",17,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",17,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",17,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",17,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",17,N],[11,"swap_bytes","","Reverses the byte order of the vector.",17,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",17,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",17,[[["self"]],["self"]]],[11,"eq","","",17,[[["self"],["self"]],["bool"]]],[11,"ne","","",17,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",17,[[["self"],["i8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",17,[[["self"],["i8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",17,[[["self"],["i8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",17,[[["self"],["i8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",17,[[["self"],["i8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",17,[[["self"],["i8x8"]],["m8x8"]]],[11,"partial_cmp","","",17,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",17,[[["self"],["self"]],["bool"]]],[11,"le","","",17,[[["self"],["self"]],["bool"]]],[11,"ge","","",17,[[["self"],["self"]],["bool"]]],[11,"gt","","",17,[[["self"],["self"]],["bool"]]],[11,"cmp","","",17,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",18,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",18,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",18,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",18,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",18,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",18,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",18,[[["self"],["self"]],["self"]]],[11,"sub","","",18,[[["self"],["self"]],["self"]]],[11,"mul","","",18,[[["self"],["self"]],["self"]]],[11,"div","","",18,[[["self"],["self"]],["self"]]],[11,"rem","","",18,[[["self"],["self"]],["self"]]],[11,"add_assign","","",18,[[["self"],["self"]]]],[11,"sub_assign","","",18,[[["self"],["self"]]]],[11,"mul_assign","","",18,[[["self"],["self"]]]],[11,"div_assign","","",18,[[["self"],["self"]]]],[11,"rem_assign","","",18,[[["self"],["self"]]]],[11,"add","","",18,[[["self"],["u8"]],["self"]]],[11,"sub","","",18,[[["self"],["u8"]],["self"]]],[11,"mul","","",18,[[["self"],["u8"]],["self"]]],[11,"div","","",18,[[["self"],["u8"]],["self"]]],[11,"rem","","",18,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",18,[[["self"],["u8"]]]],[11,"sub_assign","","",18,[[["self"],["u8"]]]],[11,"mul_assign","","",18,[[["self"],["u8"]]]],[11,"div_assign","","",18,[[["self"],["u8"]]]],[11,"rem_assign","","",18,[[["self"],["u8"]]]],[11,"not","","",18,[[["self"]],["self"]]],[11,"bitxor","","",18,[[["self"],["self"]],["self"]]],[11,"bitand","","",18,[[["self"],["self"]],["self"]]],[11,"bitor","","",18,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",18,[[["self"],["self"]]]],[11,"bitor_assign","","",18,[[["self"],["self"]]]],[11,"bitxor_assign","","",18,[[["self"],["self"]]]],[11,"bitxor","","",18,[[["self"],["u8"]],["self"]]],[11,"bitand","","",18,[[["self"],["u8"]],["self"]]],[11,"bitor","","",18,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",18,[[["self"],["u8"]]]],[11,"bitor_assign","","",18,[[["self"],["u8"]]]],[11,"bitxor_assign","","",18,[[["self"],["u8"]]]],[11,"shl","","",18,[[["self"],["self"]],["self"]]],[11,"shr","","",18,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",18,[[["self"],["self"]]]],[11,"shr_assign","","",18,[[["self"],["self"]]]],[11,"shl","","",18,[[["self"],["u32"]],["self"]]],[11,"shr","","",18,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",18,[[["self"],["u32"]]]],[11,"shr_assign","","",18,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",18,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",18,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",18,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",18,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",18,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",18,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",18,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",18,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",18,[[["self"]],["u8"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"from","","",18,N],[11,"default","","",18,[[],["self"]]],[11,"hash","","",18,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",18,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",18,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",18,N],[11,"swap_bytes","","Reverses the byte order of the vector.",18,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",18,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",18,[[["self"]],["self"]]],[11,"eq","","",18,[[["self"],["self"]],["bool"]]],[11,"ne","","",18,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",18,[[["self"],["u8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",18,[[["self"],["u8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",18,[[["self"],["u8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",18,[[["self"],["u8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",18,[[["self"],["u8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",18,[[["self"],["u8x8"]],["m8x8"]]],[11,"partial_cmp","","",18,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",18,[[["self"],["self"]],["bool"]]],[11,"le","","",18,[[["self"],["self"]],["bool"]]],[11,"ge","","",18,[[["self"],["self"]],["bool"]]],[11,"gt","","",18,[[["self"],["self"]],["bool"]]],[11,"cmp","","",18,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",19,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",19,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",19,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",19,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",19,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",19,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",19,[[["self"]],["self"]]],[11,"bitxor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand","","",19,[[["self"],["self"]],["self"]]],[11,"bitor","","",19,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["self"]]]],[11,"bitor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor_assign","","",19,[[["self"],["self"]]]],[11,"bitxor","","",19,[[["self"],["bool"]],["self"]]],[11,"bitand","","",19,[[["self"],["bool"]],["self"]]],[11,"bitor","","",19,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",19,[[["self"],["bool"]]]],[11,"bitor_assign","","",19,[[["self"],["bool"]]]],[11,"bitxor_assign","","",19,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",19,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",19,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",19,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",19,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",19,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",19,[[["self"]],["bool"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"from","","",19,N],[11,"from","","",19,[[["m16x8"]],["self"]]],[11,"from","","",19,[[["m32x8"]],["self"]]],[11,"default","","",19,[[],["self"]]],[11,"eq","","",19,[[["self"],["self"]],["bool"]]],[11,"ne","","",19,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",19,[[["self"],["m8x8"]],["m8x8"]]],[11,"ne","","Lane-wise inequality comparison.",19,[[["self"],["m8x8"]],["m8x8"]]],[11,"lt","","Lane-wise less-than comparison.",19,[[["self"],["m8x8"]],["m8x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",19,[[["self"],["m8x8"]],["m8x8"]]],[11,"gt","","Lane-wise greater-than comparison.",19,[[["self"],["m8x8"]],["m8x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",19,[[["self"],["m8x8"]],["m8x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",19,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",19,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",19,[[["self"],["self"]],["bool"]]],[11,"le","","",19,[[["self"],["self"]],["bool"]]],[11,"ge","","",19,[[["self"],["self"]],["bool"]]],[11,"gt","","",19,[[["self"],["self"]],["bool"]]],[11,"cmp","","",19,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",20,[[["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",20,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",20,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",20,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",20,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",20,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",20,[[["self"],["self"]],["self"]]],[11,"sub","","",20,[[["self"],["self"]],["self"]]],[11,"mul","","",20,[[["self"],["self"]],["self"]]],[11,"div","","",20,[[["self"],["self"]],["self"]]],[11,"rem","","",20,[[["self"],["self"]],["self"]]],[11,"add_assign","","",20,[[["self"],["self"]]]],[11,"sub_assign","","",20,[[["self"],["self"]]]],[11,"mul_assign","","",20,[[["self"],["self"]]]],[11,"div_assign","","",20,[[["self"],["self"]]]],[11,"rem_assign","","",20,[[["self"],["self"]]]],[11,"add","","",20,[[["self"],["i16"]],["self"]]],[11,"sub","","",20,[[["self"],["i16"]],["self"]]],[11,"mul","","",20,[[["self"],["i16"]],["self"]]],[11,"div","","",20,[[["self"],["i16"]],["self"]]],[11,"rem","","",20,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",20,[[["self"],["i16"]]]],[11,"sub_assign","","",20,[[["self"],["i16"]]]],[11,"mul_assign","","",20,[[["self"],["i16"]]]],[11,"div_assign","","",20,[[["self"],["i16"]]]],[11,"rem_assign","","",20,[[["self"],["i16"]]]],[11,"not","","",20,[[["self"]],["self"]]],[11,"bitxor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand","","",20,[[["self"],["self"]],["self"]]],[11,"bitor","","",20,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["self"]]]],[11,"bitor_assign","","",20,[[["self"],["self"]]]],[11,"bitxor_assign","","",20,[[["self"],["self"]]]],[11,"bitxor","","",20,[[["self"],["i16"]],["self"]]],[11,"bitand","","",20,[[["self"],["i16"]],["self"]]],[11,"bitor","","",20,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",20,[[["self"],["i16"]]]],[11,"bitor_assign","","",20,[[["self"],["i16"]]]],[11,"bitxor_assign","","",20,[[["self"],["i16"]]]],[11,"shl","","",20,[[["self"],["self"]],["self"]]],[11,"shr","","",20,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["self"]]]],[11,"shr_assign","","",20,[[["self"],["self"]]]],[11,"shl","","",20,[[["self"],["u32"]],["self"]]],[11,"shr","","",20,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",20,[[["self"],["u32"]]]],[11,"shr_assign","","",20,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["i16x4"]],["i16x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["i16x4"]],["i16x4"]]],[11,"neg","","",20,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",20,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",20,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",20,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",20,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",20,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",20,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",20,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",20,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",20,[[["self"]],["i16"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"from","","",20,N],[11,"from","","",20,[[["i8x4"]],["self"]]],[11,"from","","",20,[[["u8x4"]],["self"]]],[11,"default","","",20,[[],["self"]]],[11,"hash","","",20,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",20,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",20,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",20,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",20,N],[11,"swap_bytes","","Reverses the byte order of the vector.",20,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",20,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",20,[[["self"]],["self"]]],[11,"eq","","",20,[[["self"],["self"]],["bool"]]],[11,"ne","","",20,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",20,[[["self"],["i16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",20,[[["self"],["i16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",20,[[["self"],["i16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",20,[[["self"],["i16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",20,[[["self"],["i16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",20,[[["self"],["i16x4"]],["m16x4"]]],[11,"partial_cmp","","",20,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",20,[[["self"],["self"]],["bool"]]],[11,"le","","",20,[[["self"],["self"]],["bool"]]],[11,"ge","","",20,[[["self"],["self"]],["bool"]]],[11,"gt","","",20,[[["self"],["self"]],["bool"]]],[11,"cmp","","",20,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",21,[[["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",21,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",21,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",21,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",21,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",21,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",21,[[["self"],["self"]],["self"]]],[11,"sub","","",21,[[["self"],["self"]],["self"]]],[11,"mul","","",21,[[["self"],["self"]],["self"]]],[11,"div","","",21,[[["self"],["self"]],["self"]]],[11,"rem","","",21,[[["self"],["self"]],["self"]]],[11,"add_assign","","",21,[[["self"],["self"]]]],[11,"sub_assign","","",21,[[["self"],["self"]]]],[11,"mul_assign","","",21,[[["self"],["self"]]]],[11,"div_assign","","",21,[[["self"],["self"]]]],[11,"rem_assign","","",21,[[["self"],["self"]]]],[11,"add","","",21,[[["self"],["u16"]],["self"]]],[11,"sub","","",21,[[["self"],["u16"]],["self"]]],[11,"mul","","",21,[[["self"],["u16"]],["self"]]],[11,"div","","",21,[[["self"],["u16"]],["self"]]],[11,"rem","","",21,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",21,[[["self"],["u16"]]]],[11,"sub_assign","","",21,[[["self"],["u16"]]]],[11,"mul_assign","","",21,[[["self"],["u16"]]]],[11,"div_assign","","",21,[[["self"],["u16"]]]],[11,"rem_assign","","",21,[[["self"],["u16"]]]],[11,"not","","",21,[[["self"]],["self"]]],[11,"bitxor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand","","",21,[[["self"],["self"]],["self"]]],[11,"bitor","","",21,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["self"]]]],[11,"bitor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor_assign","","",21,[[["self"],["self"]]]],[11,"bitxor","","",21,[[["self"],["u16"]],["self"]]],[11,"bitand","","",21,[[["self"],["u16"]],["self"]]],[11,"bitor","","",21,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",21,[[["self"],["u16"]]]],[11,"bitor_assign","","",21,[[["self"],["u16"]]]],[11,"bitxor_assign","","",21,[[["self"],["u16"]]]],[11,"shl","","",21,[[["self"],["self"]],["self"]]],[11,"shr","","",21,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",21,[[["self"],["self"]]]],[11,"shr_assign","","",21,[[["self"],["self"]]]],[11,"shl","","",21,[[["self"],["u32"]],["self"]]],[11,"shr","","",21,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",21,[[["self"],["u32"]]]],[11,"shr_assign","","",21,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",21,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",21,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",21,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",21,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",21,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",21,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",21,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",21,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",21,[[["self"]],["u16"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"from","","",21,N],[11,"from","","",21,[[["u8x4"]],["self"]]],[11,"default","","",21,[[],["self"]]],[11,"hash","","",21,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",21,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",21,N],[11,"swap_bytes","","Reverses the byte order of the vector.",21,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",21,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",21,[[["self"]],["self"]]],[11,"eq","","",21,[[["self"],["self"]],["bool"]]],[11,"ne","","",21,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",21,[[["self"],["u16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",21,[[["self"],["u16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",21,[[["self"],["u16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",21,[[["self"],["u16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",21,[[["self"],["u16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",21,[[["self"],["u16x4"]],["m16x4"]]],[11,"partial_cmp","","",21,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",21,[[["self"],["self"]],["bool"]]],[11,"le","","",21,[[["self"],["self"]],["bool"]]],[11,"ge","","",21,[[["self"],["self"]],["bool"]]],[11,"gt","","",21,[[["self"],["self"]],["bool"]]],[11,"cmp","","",21,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",22,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",22,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",22,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",22,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",22,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",22,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",22,[[["self"]],["self"]]],[11,"bitxor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand","","",22,[[["self"],["self"]],["self"]]],[11,"bitor","","",22,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["self"]]]],[11,"bitor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor_assign","","",22,[[["self"],["self"]]]],[11,"bitxor","","",22,[[["self"],["bool"]],["self"]]],[11,"bitand","","",22,[[["self"],["bool"]],["self"]]],[11,"bitor","","",22,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",22,[[["self"],["bool"]]]],[11,"bitor_assign","","",22,[[["self"],["bool"]]]],[11,"bitxor_assign","","",22,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",22,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",22,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",22,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",22,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",22,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",22,[[["self"]],["bool"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"from","","",22,N],[11,"from","","",22,[[["m8x4"]],["self"]]],[11,"from","","",22,[[["m32x4"]],["self"]]],[11,"from","","",22,[[["m64x4"]],["self"]]],[11,"default","","",22,[[],["self"]]],[11,"eq","","",22,[[["self"],["self"]],["bool"]]],[11,"ne","","",22,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",22,[[["self"],["m16x4"]],["m16x4"]]],[11,"ne","","Lane-wise inequality comparison.",22,[[["self"],["m16x4"]],["m16x4"]]],[11,"lt","","Lane-wise less-than comparison.",22,[[["self"],["m16x4"]],["m16x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",22,[[["self"],["m16x4"]],["m16x4"]]],[11,"gt","","Lane-wise greater-than comparison.",22,[[["self"],["m16x4"]],["m16x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",22,[[["self"],["m16x4"]],["m16x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",22,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",22,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",22,[[["self"],["self"]],["bool"]]],[11,"le","","",22,[[["self"],["self"]],["bool"]]],[11,"ge","","",22,[[["self"],["self"]],["bool"]]],[11,"gt","","",22,[[["self"],["self"]],["bool"]]],[11,"cmp","","",22,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",23,[[["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",23,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",23,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",23,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",23,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",23,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",23,[[["self"],["self"]],["self"]]],[11,"sub","","",23,[[["self"],["self"]],["self"]]],[11,"mul","","",23,[[["self"],["self"]],["self"]]],[11,"div","","",23,[[["self"],["self"]],["self"]]],[11,"rem","","",23,[[["self"],["self"]],["self"]]],[11,"add_assign","","",23,[[["self"],["self"]]]],[11,"sub_assign","","",23,[[["self"],["self"]]]],[11,"mul_assign","","",23,[[["self"],["self"]]]],[11,"div_assign","","",23,[[["self"],["self"]]]],[11,"rem_assign","","",23,[[["self"],["self"]]]],[11,"add","","",23,[[["self"],["i32"]],["self"]]],[11,"sub","","",23,[[["self"],["i32"]],["self"]]],[11,"mul","","",23,[[["self"],["i32"]],["self"]]],[11,"div","","",23,[[["self"],["i32"]],["self"]]],[11,"rem","","",23,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",23,[[["self"],["i32"]]]],[11,"sub_assign","","",23,[[["self"],["i32"]]]],[11,"mul_assign","","",23,[[["self"],["i32"]]]],[11,"div_assign","","",23,[[["self"],["i32"]]]],[11,"rem_assign","","",23,[[["self"],["i32"]]]],[11,"not","","",23,[[["self"]],["self"]]],[11,"bitxor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand","","",23,[[["self"],["self"]],["self"]]],[11,"bitor","","",23,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["self"]]]],[11,"bitor_assign","","",23,[[["self"],["self"]]]],[11,"bitxor_assign","","",23,[[["self"],["self"]]]],[11,"bitxor","","",23,[[["self"],["i32"]],["self"]]],[11,"bitand","","",23,[[["self"],["i32"]],["self"]]],[11,"bitor","","",23,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",23,[[["self"],["i32"]]]],[11,"bitor_assign","","",23,[[["self"],["i32"]]]],[11,"bitxor_assign","","",23,[[["self"],["i32"]]]],[11,"shl","","",23,[[["self"],["self"]],["self"]]],[11,"shr","","",23,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["self"]]]],[11,"shr_assign","","",23,[[["self"],["self"]]]],[11,"shl","","",23,[[["self"],["u32"]],["self"]]],[11,"shr","","",23,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",23,[[["self"],["u32"]]]],[11,"shr_assign","","",23,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",23,[[["self"],["i32x2"]],["i32x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",23,[[["self"],["i32x2"]],["i32x2"]]],[11,"neg","","",23,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",23,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",23,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",23,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",23,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",23,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",23,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",23,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",23,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",23,[[["self"]],["i32"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"from","","",23,N],[11,"from","","",23,[[["i8x2"]],["self"]]],[11,"from","","",23,[[["u8x2"]],["self"]]],[11,"from","","",23,[[["i16x2"]],["self"]]],[11,"from","","",23,[[["u16x2"]],["self"]]],[11,"default","","",23,[[],["self"]]],[11,"hash","","",23,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",23,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",23,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",23,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",23,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",23,N],[11,"swap_bytes","","Reverses the byte order of the vector.",23,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",23,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",23,[[["self"]],["self"]]],[11,"eq","","",23,[[["self"],["self"]],["bool"]]],[11,"ne","","",23,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",23,[[["self"],["i32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",23,[[["self"],["i32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",23,[[["self"],["i32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",23,[[["self"],["i32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",23,[[["self"],["i32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",23,[[["self"],["i32x2"]],["m32x2"]]],[11,"partial_cmp","","",23,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",23,[[["self"],["self"]],["bool"]]],[11,"le","","",23,[[["self"],["self"]],["bool"]]],[11,"ge","","",23,[[["self"],["self"]],["bool"]]],[11,"gt","","",23,[[["self"],["self"]],["bool"]]],[11,"cmp","","",23,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",24,[[["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",24,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",24,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",24,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",24,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",24,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",24,[[["self"],["self"]],["self"]]],[11,"sub","","",24,[[["self"],["self"]],["self"]]],[11,"mul","","",24,[[["self"],["self"]],["self"]]],[11,"div","","",24,[[["self"],["self"]],["self"]]],[11,"rem","","",24,[[["self"],["self"]],["self"]]],[11,"add_assign","","",24,[[["self"],["self"]]]],[11,"sub_assign","","",24,[[["self"],["self"]]]],[11,"mul_assign","","",24,[[["self"],["self"]]]],[11,"div_assign","","",24,[[["self"],["self"]]]],[11,"rem_assign","","",24,[[["self"],["self"]]]],[11,"add","","",24,[[["self"],["u32"]],["self"]]],[11,"sub","","",24,[[["self"],["u32"]],["self"]]],[11,"mul","","",24,[[["self"],["u32"]],["self"]]],[11,"div","","",24,[[["self"],["u32"]],["self"]]],[11,"rem","","",24,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",24,[[["self"],["u32"]]]],[11,"sub_assign","","",24,[[["self"],["u32"]]]],[11,"mul_assign","","",24,[[["self"],["u32"]]]],[11,"div_assign","","",24,[[["self"],["u32"]]]],[11,"rem_assign","","",24,[[["self"],["u32"]]]],[11,"not","","",24,[[["self"]],["self"]]],[11,"bitxor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand","","",24,[[["self"],["self"]],["self"]]],[11,"bitor","","",24,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["self"]]]],[11,"bitor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor_assign","","",24,[[["self"],["self"]]]],[11,"bitxor","","",24,[[["self"],["u32"]],["self"]]],[11,"bitand","","",24,[[["self"],["u32"]],["self"]]],[11,"bitor","","",24,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",24,[[["self"],["u32"]]]],[11,"bitor_assign","","",24,[[["self"],["u32"]]]],[11,"bitxor_assign","","",24,[[["self"],["u32"]]]],[11,"shl","","",24,[[["self"],["self"]],["self"]]],[11,"shr","","",24,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",24,[[["self"],["self"]]]],[11,"shr_assign","","",24,[[["self"],["self"]]]],[11,"shl","","",24,[[["self"],["u32"]],["self"]]],[11,"shr","","",24,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",24,[[["self"],["u32"]]]],[11,"shr_assign","","",24,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",24,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",24,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",24,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",24,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",24,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",24,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",24,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",24,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",24,[[["self"]],["u32"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"from","","",24,N],[11,"from","","",24,[[["u8x2"]],["self"]]],[11,"from","","",24,[[["u16x2"]],["self"]]],[11,"default","","",24,[[],["self"]]],[11,"hash","","",24,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",24,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",24,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",24,N],[11,"swap_bytes","","Reverses the byte order of the vector.",24,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",24,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",24,[[["self"]],["self"]]],[11,"eq","","",24,[[["self"],["self"]],["bool"]]],[11,"ne","","",24,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",24,[[["self"],["u32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",24,[[["self"],["u32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",24,[[["self"],["u32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",24,[[["self"],["u32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",24,[[["self"],["u32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",24,[[["self"],["u32x2"]],["m32x2"]]],[11,"partial_cmp","","",24,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["self"]],["bool"]]],[11,"le","","",24,[[["self"],["self"]],["bool"]]],[11,"ge","","",24,[[["self"],["self"]],["bool"]]],[11,"gt","","",24,[[["self"],["self"]],["bool"]]],[11,"cmp","","",24,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",26,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",26,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",26,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",26,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",26,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",26,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",26,[[["self"]],["self"]]],[11,"bitxor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand","","",26,[[["self"],["self"]],["self"]]],[11,"bitor","","",26,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["self"]]]],[11,"bitor_assign","","",26,[[["self"],["self"]]]],[11,"bitxor_assign","","",26,[[["self"],["self"]]]],[11,"bitxor","","",26,[[["self"],["bool"]],["self"]]],[11,"bitand","","",26,[[["self"],["bool"]],["self"]]],[11,"bitor","","",26,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",26,[[["self"],["bool"]]]],[11,"bitor_assign","","",26,[[["self"],["bool"]]]],[11,"bitxor_assign","","",26,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",26,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",26,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",26,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",26,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",26,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",26,[[["self"]],["bool"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"from","","",26,N],[11,"from","","",26,[[["m8x2"]],["self"]]],[11,"from","","",26,[[["m16x2"]],["self"]]],[11,"from","","",26,[[["m64x2"]],["self"]]],[11,"from","","",26,[[["m128x2"]],["self"]]],[11,"default","","",26,[[],["self"]]],[11,"eq","","",26,[[["self"],["self"]],["bool"]]],[11,"ne","","",26,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",26,[[["self"],["m32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",26,[[["self"],["m32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",26,[[["self"],["m32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",26,[[["self"],["m32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",26,[[["self"],["m32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",26,[[["self"],["m32x2"]],["m32x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",26,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",26,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["self"]],["bool"]]],[11,"le","","",26,[[["self"],["self"]],["bool"]]],[11,"ge","","",26,[[["self"],["self"]],["bool"]]],[11,"gt","","",26,[[["self"],["self"]],["bool"]]],[11,"cmp","","",26,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",25,[[["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",25,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",25,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",25,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",25,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",25,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",25,[[["self"],["self"]],["self"]]],[11,"sub","","",25,[[["self"],["self"]],["self"]]],[11,"mul","","",25,[[["self"],["self"]],["self"]]],[11,"div","","",25,[[["self"],["self"]],["self"]]],[11,"rem","","",25,[[["self"],["self"]],["self"]]],[11,"add_assign","","",25,[[["self"],["self"]]]],[11,"sub_assign","","",25,[[["self"],["self"]]]],[11,"mul_assign","","",25,[[["self"],["self"]]]],[11,"div_assign","","",25,[[["self"],["self"]]]],[11,"rem_assign","","",25,[[["self"],["self"]]]],[11,"add","","",25,[[["self"],["f32"]],["self"]]],[11,"sub","","",25,[[["self"],["f32"]],["self"]]],[11,"mul","","",25,[[["self"],["f32"]],["self"]]],[11,"div","","",25,[[["self"],["f32"]],["self"]]],[11,"rem","","",25,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",25,[[["self"],["f32"]]]],[11,"sub_assign","","",25,[[["self"],["f32"]]]],[11,"mul_assign","","",25,[[["self"],["f32"]]]],[11,"div_assign","","",25,[[["self"],["f32"]]]],[11,"rem_assign","","",25,[[["self"],["f32"]]]],[11,"neg","","",25,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",25,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",25,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",25,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",25,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",25,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",25,[[["self"]],["f32"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"from","","",25,N],[11,"from","","",25,[[["i8x2"]],["self"]]],[11,"from","","",25,[[["u8x2"]],["self"]]],[11,"from","","",25,[[["i16x2"]],["self"]]],[11,"from","","",25,[[["u16x2"]],["self"]]],[11,"default","","",25,[[],["self"]]],[11,"eq","","",25,[[["self"],["self"]],["bool"]]],[11,"ne","","",25,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",25,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",25,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",25,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",25,N],[11,"abs","","Absolute value.",25,[[["self"]],["self"]]],[11,"cos","","Cosine.",25,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",25,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",25,[[["self"]],["self"]]],[11,"sin","","",25,[[["self"]],["self"]]],[11,"sqrt","","",25,[[["self"]],["self"]]],[11,"sqrte","","",25,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",25,[[["self"],["f32x2"]],["m32x2"]]],[11,"ne","","Lane-wise inequality comparison.",25,[[["self"],["f32x2"]],["m32x2"]]],[11,"lt","","Lane-wise less-than comparison.",25,[[["self"],["f32x2"]],["m32x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",25,[[["self"],["f32x2"]],["m32x2"]]],[11,"gt","","Lane-wise greater-than comparison.",25,[[["self"],["f32x2"]],["m32x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",25,[[["self"],["f32x2"]],["m32x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",27,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",27,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",27,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",27,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",27,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",27,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",27,[[["self"],["self"]],["self"]]],[11,"sub","","",27,[[["self"],["self"]],["self"]]],[11,"mul","","",27,[[["self"],["self"]],["self"]]],[11,"div","","",27,[[["self"],["self"]],["self"]]],[11,"rem","","",27,[[["self"],["self"]],["self"]]],[11,"add_assign","","",27,[[["self"],["self"]]]],[11,"sub_assign","","",27,[[["self"],["self"]]]],[11,"mul_assign","","",27,[[["self"],["self"]]]],[11,"div_assign","","",27,[[["self"],["self"]]]],[11,"rem_assign","","",27,[[["self"],["self"]]]],[11,"add","","",27,[[["self"],["i8"]],["self"]]],[11,"sub","","",27,[[["self"],["i8"]],["self"]]],[11,"mul","","",27,[[["self"],["i8"]],["self"]]],[11,"div","","",27,[[["self"],["i8"]],["self"]]],[11,"rem","","",27,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",27,[[["self"],["i8"]]]],[11,"sub_assign","","",27,[[["self"],["i8"]]]],[11,"mul_assign","","",27,[[["self"],["i8"]]]],[11,"div_assign","","",27,[[["self"],["i8"]]]],[11,"rem_assign","","",27,[[["self"],["i8"]]]],[11,"not","","",27,[[["self"]],["self"]]],[11,"bitxor","","",27,[[["self"],["self"]],["self"]]],[11,"bitand","","",27,[[["self"],["self"]],["self"]]],[11,"bitor","","",27,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",27,[[["self"],["self"]]]],[11,"bitor_assign","","",27,[[["self"],["self"]]]],[11,"bitxor_assign","","",27,[[["self"],["self"]]]],[11,"bitxor","","",27,[[["self"],["i8"]],["self"]]],[11,"bitand","","",27,[[["self"],["i8"]],["self"]]],[11,"bitor","","",27,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",27,[[["self"],["i8"]]]],[11,"bitor_assign","","",27,[[["self"],["i8"]]]],[11,"bitxor_assign","","",27,[[["self"],["i8"]]]],[11,"shl","","",27,[[["self"],["self"]],["self"]]],[11,"shr","","",27,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",27,[[["self"],["self"]]]],[11,"shr_assign","","",27,[[["self"],["self"]]]],[11,"shl","","",27,[[["self"],["u32"]],["self"]]],[11,"shr","","",27,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",27,[[["self"],["u32"]]]],[11,"shr_assign","","",27,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",27,[[["self"],["i8x16"]],["i8x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",27,[[["self"],["i8x16"]],["i8x16"]]],[11,"neg","","",27,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",27,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",27,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",27,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",27,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",27,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",27,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",27,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",27,[[["self"]],["i8"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"from","","",27,N],[11,"default","","",27,[[],["self"]]],[11,"hash","","",27,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",27,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",27,N],[11,"swap_bytes","","Reverses the byte order of the vector.",27,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",27,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",27,[[["self"]],["self"]]],[11,"eq","","",27,[[["self"],["self"]],["bool"]]],[11,"ne","","",27,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",27,[[["self"],["i8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",27,[[["self"],["i8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",27,[[["self"],["i8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",27,[[["self"],["i8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",27,[[["self"],["i8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",27,[[["self"],["i8x16"]],["m8x16"]]],[11,"partial_cmp","","",27,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["self"]],["bool"]]],[11,"le","","",27,[[["self"],["self"]],["bool"]]],[11,"ge","","",27,[[["self"],["self"]],["bool"]]],[11,"gt","","",27,[[["self"],["self"]],["bool"]]],[11,"cmp","","",27,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",28,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",28,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",28,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",28,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",28,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",28,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",28,[[["self"],["self"]],["self"]]],[11,"sub","","",28,[[["self"],["self"]],["self"]]],[11,"mul","","",28,[[["self"],["self"]],["self"]]],[11,"div","","",28,[[["self"],["self"]],["self"]]],[11,"rem","","",28,[[["self"],["self"]],["self"]]],[11,"add_assign","","",28,[[["self"],["self"]]]],[11,"sub_assign","","",28,[[["self"],["self"]]]],[11,"mul_assign","","",28,[[["self"],["self"]]]],[11,"div_assign","","",28,[[["self"],["self"]]]],[11,"rem_assign","","",28,[[["self"],["self"]]]],[11,"add","","",28,[[["self"],["u8"]],["self"]]],[11,"sub","","",28,[[["self"],["u8"]],["self"]]],[11,"mul","","",28,[[["self"],["u8"]],["self"]]],[11,"div","","",28,[[["self"],["u8"]],["self"]]],[11,"rem","","",28,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",28,[[["self"],["u8"]]]],[11,"sub_assign","","",28,[[["self"],["u8"]]]],[11,"mul_assign","","",28,[[["self"],["u8"]]]],[11,"div_assign","","",28,[[["self"],["u8"]]]],[11,"rem_assign","","",28,[[["self"],["u8"]]]],[11,"not","","",28,[[["self"]],["self"]]],[11,"bitxor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand","","",28,[[["self"],["self"]],["self"]]],[11,"bitor","","",28,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["self"]]]],[11,"bitor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor_assign","","",28,[[["self"],["self"]]]],[11,"bitxor","","",28,[[["self"],["u8"]],["self"]]],[11,"bitand","","",28,[[["self"],["u8"]],["self"]]],[11,"bitor","","",28,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",28,[[["self"],["u8"]]]],[11,"bitor_assign","","",28,[[["self"],["u8"]]]],[11,"bitxor_assign","","",28,[[["self"],["u8"]]]],[11,"shl","","",28,[[["self"],["self"]],["self"]]],[11,"shr","","",28,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",28,[[["self"],["self"]]]],[11,"shr_assign","","",28,[[["self"],["self"]]]],[11,"shl","","",28,[[["self"],["u32"]],["self"]]],[11,"shr","","",28,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",28,[[["self"],["u32"]]]],[11,"shr_assign","","",28,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",28,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",28,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",28,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",28,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",28,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",28,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",28,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",28,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",28,[[["self"]],["u8"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"from","","",28,N],[11,"default","","",28,[[],["self"]]],[11,"hash","","",28,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",28,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",28,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",28,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",28,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",28,N],[11,"swap_bytes","","Reverses the byte order of the vector.",28,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",28,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",28,[[["self"]],["self"]]],[11,"eq","","",28,[[["self"],["self"]],["bool"]]],[11,"ne","","",28,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",28,[[["self"],["u8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",28,[[["self"],["u8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",28,[[["self"],["u8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",28,[[["self"],["u8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",28,[[["self"],["u8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",28,[[["self"],["u8x16"]],["m8x16"]]],[11,"partial_cmp","","",28,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",28,[[["self"],["self"]],["bool"]]],[11,"le","","",28,[[["self"],["self"]],["bool"]]],[11,"ge","","",28,[[["self"],["self"]],["bool"]]],[11,"gt","","",28,[[["self"],["self"]],["bool"]]],[11,"cmp","","",28,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",29,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",29,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",29,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",29,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",29,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",29,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",29,[[["self"]],["self"]]],[11,"bitxor","","",29,[[["self"],["self"]],["self"]]],[11,"bitand","","",29,[[["self"],["self"]],["self"]]],[11,"bitor","","",29,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",29,[[["self"],["self"]]]],[11,"bitor_assign","","",29,[[["self"],["self"]]]],[11,"bitxor_assign","","",29,[[["self"],["self"]]]],[11,"bitxor","","",29,[[["self"],["bool"]],["self"]]],[11,"bitand","","",29,[[["self"],["bool"]],["self"]]],[11,"bitor","","",29,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",29,[[["self"],["bool"]]]],[11,"bitor_assign","","",29,[[["self"],["bool"]]]],[11,"bitxor_assign","","",29,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",29,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",29,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",29,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",29,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",29,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",29,[[["self"]],["bool"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"from","","",29,N],[11,"from","","",29,[[["m16x16"]],["self"]]],[11,"default","","",29,[[],["self"]]],[11,"eq","","",29,[[["self"],["self"]],["bool"]]],[11,"ne","","",29,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",29,[[["self"],["m8x16"]],["m8x16"]]],[11,"ne","","Lane-wise inequality comparison.",29,[[["self"],["m8x16"]],["m8x16"]]],[11,"lt","","Lane-wise less-than comparison.",29,[[["self"],["m8x16"]],["m8x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",29,[[["self"],["m8x16"]],["m8x16"]]],[11,"gt","","Lane-wise greater-than comparison.",29,[[["self"],["m8x16"]],["m8x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",29,[[["self"],["m8x16"]],["m8x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",29,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",29,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["self"]],["bool"]]],[11,"le","","",29,[[["self"],["self"]],["bool"]]],[11,"ge","","",29,[[["self"],["self"]],["bool"]]],[11,"gt","","",29,[[["self"],["self"]],["bool"]]],[11,"cmp","","",29,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",30,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",30,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",30,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",30,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",30,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",30,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",30,[[["self"],["self"]],["self"]]],[11,"sub","","",30,[[["self"],["self"]],["self"]]],[11,"mul","","",30,[[["self"],["self"]],["self"]]],[11,"div","","",30,[[["self"],["self"]],["self"]]],[11,"rem","","",30,[[["self"],["self"]],["self"]]],[11,"add_assign","","",30,[[["self"],["self"]]]],[11,"sub_assign","","",30,[[["self"],["self"]]]],[11,"mul_assign","","",30,[[["self"],["self"]]]],[11,"div_assign","","",30,[[["self"],["self"]]]],[11,"rem_assign","","",30,[[["self"],["self"]]]],[11,"add","","",30,[[["self"],["i16"]],["self"]]],[11,"sub","","",30,[[["self"],["i16"]],["self"]]],[11,"mul","","",30,[[["self"],["i16"]],["self"]]],[11,"div","","",30,[[["self"],["i16"]],["self"]]],[11,"rem","","",30,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",30,[[["self"],["i16"]]]],[11,"sub_assign","","",30,[[["self"],["i16"]]]],[11,"mul_assign","","",30,[[["self"],["i16"]]]],[11,"div_assign","","",30,[[["self"],["i16"]]]],[11,"rem_assign","","",30,[[["self"],["i16"]]]],[11,"not","","",30,[[["self"]],["self"]]],[11,"bitxor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand","","",30,[[["self"],["self"]],["self"]]],[11,"bitor","","",30,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["self"]]]],[11,"bitor_assign","","",30,[[["self"],["self"]]]],[11,"bitxor_assign","","",30,[[["self"],["self"]]]],[11,"bitxor","","",30,[[["self"],["i16"]],["self"]]],[11,"bitand","","",30,[[["self"],["i16"]],["self"]]],[11,"bitor","","",30,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",30,[[["self"],["i16"]]]],[11,"bitor_assign","","",30,[[["self"],["i16"]]]],[11,"bitxor_assign","","",30,[[["self"],["i16"]]]],[11,"shl","","",30,[[["self"],["self"]],["self"]]],[11,"shr","","",30,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["self"]]]],[11,"shr_assign","","",30,[[["self"],["self"]]]],[11,"shl","","",30,[[["self"],["u32"]],["self"]]],[11,"shr","","",30,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",30,[[["self"],["u32"]]]],[11,"shr_assign","","",30,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",30,[[["self"],["i16x8"]],["i16x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",30,[[["self"],["i16x8"]],["i16x8"]]],[11,"neg","","",30,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",30,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",30,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",30,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",30,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",30,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",30,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",30,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",30,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",30,[[["self"]],["i16"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"from","","",30,N],[11,"from","","",30,[[["i8x8"]],["self"]]],[11,"from","","",30,[[["u8x8"]],["self"]]],[11,"default","","",30,[[],["self"]]],[11,"hash","","",30,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",30,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",30,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",30,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",30,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",30,N],[11,"swap_bytes","","Reverses the byte order of the vector.",30,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",30,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",30,[[["self"]],["self"]]],[11,"eq","","",30,[[["self"],["self"]],["bool"]]],[11,"ne","","",30,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",30,[[["self"],["i16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",30,[[["self"],["i16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",30,[[["self"],["i16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",30,[[["self"],["i16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",30,[[["self"],["i16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",30,[[["self"],["i16x8"]],["m16x8"]]],[11,"partial_cmp","","",30,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",30,[[["self"],["self"]],["bool"]]],[11,"le","","",30,[[["self"],["self"]],["bool"]]],[11,"ge","","",30,[[["self"],["self"]],["bool"]]],[11,"gt","","",30,[[["self"],["self"]],["bool"]]],[11,"cmp","","",30,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",31,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",31,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",31,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",31,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",31,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",31,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",31,[[["self"],["self"]],["self"]]],[11,"sub","","",31,[[["self"],["self"]],["self"]]],[11,"mul","","",31,[[["self"],["self"]],["self"]]],[11,"div","","",31,[[["self"],["self"]],["self"]]],[11,"rem","","",31,[[["self"],["self"]],["self"]]],[11,"add_assign","","",31,[[["self"],["self"]]]],[11,"sub_assign","","",31,[[["self"],["self"]]]],[11,"mul_assign","","",31,[[["self"],["self"]]]],[11,"div_assign","","",31,[[["self"],["self"]]]],[11,"rem_assign","","",31,[[["self"],["self"]]]],[11,"add","","",31,[[["self"],["u16"]],["self"]]],[11,"sub","","",31,[[["self"],["u16"]],["self"]]],[11,"mul","","",31,[[["self"],["u16"]],["self"]]],[11,"div","","",31,[[["self"],["u16"]],["self"]]],[11,"rem","","",31,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",31,[[["self"],["u16"]]]],[11,"sub_assign","","",31,[[["self"],["u16"]]]],[11,"mul_assign","","",31,[[["self"],["u16"]]]],[11,"div_assign","","",31,[[["self"],["u16"]]]],[11,"rem_assign","","",31,[[["self"],["u16"]]]],[11,"not","","",31,[[["self"]],["self"]]],[11,"bitxor","","",31,[[["self"],["self"]],["self"]]],[11,"bitand","","",31,[[["self"],["self"]],["self"]]],[11,"bitor","","",31,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",31,[[["self"],["self"]]]],[11,"bitor_assign","","",31,[[["self"],["self"]]]],[11,"bitxor_assign","","",31,[[["self"],["self"]]]],[11,"bitxor","","",31,[[["self"],["u16"]],["self"]]],[11,"bitand","","",31,[[["self"],["u16"]],["self"]]],[11,"bitor","","",31,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",31,[[["self"],["u16"]]]],[11,"bitor_assign","","",31,[[["self"],["u16"]]]],[11,"bitxor_assign","","",31,[[["self"],["u16"]]]],[11,"shl","","",31,[[["self"],["self"]],["self"]]],[11,"shr","","",31,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",31,[[["self"],["self"]]]],[11,"shr_assign","","",31,[[["self"],["self"]]]],[11,"shl","","",31,[[["self"],["u32"]],["self"]]],[11,"shr","","",31,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",31,[[["self"],["u32"]]]],[11,"shr_assign","","",31,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",31,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",31,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",31,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",31,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",31,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",31,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",31,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",31,[[["self"]],["u16"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"from","","",31,N],[11,"from","","",31,[[["u8x8"]],["self"]]],[11,"default","","",31,[[],["self"]]],[11,"hash","","",31,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",31,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",31,N],[11,"swap_bytes","","Reverses the byte order of the vector.",31,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",31,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",31,[[["self"]],["self"]]],[11,"eq","","",31,[[["self"],["self"]],["bool"]]],[11,"ne","","",31,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",31,[[["self"],["u16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",31,[[["self"],["u16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",31,[[["self"],["u16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",31,[[["self"],["u16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",31,[[["self"],["u16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",31,[[["self"],["u16x8"]],["m16x8"]]],[11,"partial_cmp","","",31,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",31,[[["self"],["self"]],["bool"]]],[11,"le","","",31,[[["self"],["self"]],["bool"]]],[11,"ge","","",31,[[["self"],["self"]],["bool"]]],[11,"gt","","",31,[[["self"],["self"]],["bool"]]],[11,"cmp","","",31,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",32,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",32,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",32,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",32,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",32,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",32,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",32,[[["self"]],["self"]]],[11,"bitxor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand","","",32,[[["self"],["self"]],["self"]]],[11,"bitor","","",32,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["self"]]]],[11,"bitor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor_assign","","",32,[[["self"],["self"]]]],[11,"bitxor","","",32,[[["self"],["bool"]],["self"]]],[11,"bitand","","",32,[[["self"],["bool"]],["self"]]],[11,"bitor","","",32,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",32,[[["self"],["bool"]]]],[11,"bitor_assign","","",32,[[["self"],["bool"]]]],[11,"bitxor_assign","","",32,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",32,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",32,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",32,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",32,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",32,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",32,[[["self"]],["bool"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"from","","",32,N],[11,"from","","",32,[[["m8x8"]],["self"]]],[11,"from","","",32,[[["m32x8"]],["self"]]],[11,"default","","",32,[[],["self"]]],[11,"eq","","",32,[[["self"],["self"]],["bool"]]],[11,"ne","","",32,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",32,[[["self"],["m16x8"]],["m16x8"]]],[11,"ne","","Lane-wise inequality comparison.",32,[[["self"],["m16x8"]],["m16x8"]]],[11,"lt","","Lane-wise less-than comparison.",32,[[["self"],["m16x8"]],["m16x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",32,[[["self"],["m16x8"]],["m16x8"]]],[11,"gt","","Lane-wise greater-than comparison.",32,[[["self"],["m16x8"]],["m16x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",32,[[["self"],["m16x8"]],["m16x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",32,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",32,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["self"]],["bool"]]],[11,"le","","",32,[[["self"],["self"]],["bool"]]],[11,"ge","","",32,[[["self"],["self"]],["bool"]]],[11,"gt","","",32,[[["self"],["self"]],["bool"]]],[11,"cmp","","",32,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",33,[[["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",33,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",33,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",33,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",33,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",33,[[["self"],["self"]],["self"]]],[11,"sub","","",33,[[["self"],["self"]],["self"]]],[11,"mul","","",33,[[["self"],["self"]],["self"]]],[11,"div","","",33,[[["self"],["self"]],["self"]]],[11,"rem","","",33,[[["self"],["self"]],["self"]]],[11,"add_assign","","",33,[[["self"],["self"]]]],[11,"sub_assign","","",33,[[["self"],["self"]]]],[11,"mul_assign","","",33,[[["self"],["self"]]]],[11,"div_assign","","",33,[[["self"],["self"]]]],[11,"rem_assign","","",33,[[["self"],["self"]]]],[11,"add","","",33,[[["self"],["i32"]],["self"]]],[11,"sub","","",33,[[["self"],["i32"]],["self"]]],[11,"mul","","",33,[[["self"],["i32"]],["self"]]],[11,"div","","",33,[[["self"],["i32"]],["self"]]],[11,"rem","","",33,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",33,[[["self"],["i32"]]]],[11,"sub_assign","","",33,[[["self"],["i32"]]]],[11,"mul_assign","","",33,[[["self"],["i32"]]]],[11,"div_assign","","",33,[[["self"],["i32"]]]],[11,"rem_assign","","",33,[[["self"],["i32"]]]],[11,"not","","",33,[[["self"]],["self"]]],[11,"bitxor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand","","",33,[[["self"],["self"]],["self"]]],[11,"bitor","","",33,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["self"]]]],[11,"bitor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor","","",33,[[["self"],["i32"]],["self"]]],[11,"bitand","","",33,[[["self"],["i32"]],["self"]]],[11,"bitor","","",33,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",33,[[["self"],["i32"]]]],[11,"bitor_assign","","",33,[[["self"],["i32"]]]],[11,"bitxor_assign","","",33,[[["self"],["i32"]]]],[11,"shl","","",33,[[["self"],["self"]],["self"]]],[11,"shr","","",33,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["self"]]]],[11,"shr_assign","","",33,[[["self"],["self"]]]],[11,"shl","","",33,[[["self"],["u32"]],["self"]]],[11,"shr","","",33,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",33,[[["self"],["u32"]]]],[11,"shr_assign","","",33,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",33,[[["self"],["i32x4"]],["i32x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",33,[[["self"],["i32x4"]],["i32x4"]]],[11,"neg","","",33,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",33,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",33,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",33,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",33,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",33,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",33,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",33,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",33,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",33,[[["self"]],["i32"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"from","","",33,N],[11,"from","","",33,[[["i8x4"]],["self"]]],[11,"from","","",33,[[["u8x4"]],["self"]]],[11,"from","","",33,[[["i16x4"]],["self"]]],[11,"from","","",33,[[["u16x4"]],["self"]]],[11,"default","","",33,[[],["self"]]],[11,"hash","","",33,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",33,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",33,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",33,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",33,N],[11,"swap_bytes","","Reverses the byte order of the vector.",33,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",33,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",33,[[["self"]],["self"]]],[11,"eq","","",33,[[["self"],["self"]],["bool"]]],[11,"ne","","",33,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",33,[[["self"],["i32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",33,[[["self"],["i32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",33,[[["self"],["i32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",33,[[["self"],["i32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",33,[[["self"],["i32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",33,[[["self"],["i32x4"]],["m32x4"]]],[11,"partial_cmp","","",33,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",33,[[["self"],["self"]],["bool"]]],[11,"le","","",33,[[["self"],["self"]],["bool"]]],[11,"ge","","",33,[[["self"],["self"]],["bool"]]],[11,"gt","","",33,[[["self"],["self"]],["bool"]]],[11,"cmp","","",33,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",34,[[["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",34,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",34,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",34,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",34,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",34,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",34,[[["self"],["self"]],["self"]]],[11,"sub","","",34,[[["self"],["self"]],["self"]]],[11,"mul","","",34,[[["self"],["self"]],["self"]]],[11,"div","","",34,[[["self"],["self"]],["self"]]],[11,"rem","","",34,[[["self"],["self"]],["self"]]],[11,"add_assign","","",34,[[["self"],["self"]]]],[11,"sub_assign","","",34,[[["self"],["self"]]]],[11,"mul_assign","","",34,[[["self"],["self"]]]],[11,"div_assign","","",34,[[["self"],["self"]]]],[11,"rem_assign","","",34,[[["self"],["self"]]]],[11,"add","","",34,[[["self"],["u32"]],["self"]]],[11,"sub","","",34,[[["self"],["u32"]],["self"]]],[11,"mul","","",34,[[["self"],["u32"]],["self"]]],[11,"div","","",34,[[["self"],["u32"]],["self"]]],[11,"rem","","",34,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",34,[[["self"],["u32"]]]],[11,"sub_assign","","",34,[[["self"],["u32"]]]],[11,"mul_assign","","",34,[[["self"],["u32"]]]],[11,"div_assign","","",34,[[["self"],["u32"]]]],[11,"rem_assign","","",34,[[["self"],["u32"]]]],[11,"not","","",34,[[["self"]],["self"]]],[11,"bitxor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand","","",34,[[["self"],["self"]],["self"]]],[11,"bitor","","",34,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["self"]]]],[11,"bitor_assign","","",34,[[["self"],["self"]]]],[11,"bitxor_assign","","",34,[[["self"],["self"]]]],[11,"bitxor","","",34,[[["self"],["u32"]],["self"]]],[11,"bitand","","",34,[[["self"],["u32"]],["self"]]],[11,"bitor","","",34,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",34,[[["self"],["u32"]]]],[11,"bitor_assign","","",34,[[["self"],["u32"]]]],[11,"bitxor_assign","","",34,[[["self"],["u32"]]]],[11,"shl","","",34,[[["self"],["self"]],["self"]]],[11,"shr","","",34,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["self"]]]],[11,"shr_assign","","",34,[[["self"],["self"]]]],[11,"shl","","",34,[[["self"],["u32"]],["self"]]],[11,"shr","","",34,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",34,[[["self"],["u32"]]]],[11,"shr_assign","","",34,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",34,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",34,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",34,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",34,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",34,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",34,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",34,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",34,[[["self"]],["u32"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"from","","",34,N],[11,"from","","",34,[[["u8x4"]],["self"]]],[11,"from","","",34,[[["u16x4"]],["self"]]],[11,"default","","",34,[[],["self"]]],[11,"hash","","",34,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",34,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",34,N],[11,"swap_bytes","","Reverses the byte order of the vector.",34,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",34,[[["self"]],["self"]]],[11,"eq","","",34,[[["self"],["self"]],["bool"]]],[11,"ne","","",34,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",34,[[["self"],["u32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",34,[[["self"],["u32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",34,[[["self"],["u32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",34,[[["self"],["u32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",34,[[["self"],["u32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",34,[[["self"],["u32x4"]],["m32x4"]]],[11,"partial_cmp","","",34,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",34,[[["self"],["self"]],["bool"]]],[11,"le","","",34,[[["self"],["self"]],["bool"]]],[11,"ge","","",34,[[["self"],["self"]],["bool"]]],[11,"gt","","",34,[[["self"],["self"]],["bool"]]],[11,"cmp","","",34,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",35,[[["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",35,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",35,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",35,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",35,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",35,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",35,[[["self"],["self"]],["self"]]],[11,"sub","","",35,[[["self"],["self"]],["self"]]],[11,"mul","","",35,[[["self"],["self"]],["self"]]],[11,"div","","",35,[[["self"],["self"]],["self"]]],[11,"rem","","",35,[[["self"],["self"]],["self"]]],[11,"add_assign","","",35,[[["self"],["self"]]]],[11,"sub_assign","","",35,[[["self"],["self"]]]],[11,"mul_assign","","",35,[[["self"],["self"]]]],[11,"div_assign","","",35,[[["self"],["self"]]]],[11,"rem_assign","","",35,[[["self"],["self"]]]],[11,"add","","",35,[[["self"],["f32"]],["self"]]],[11,"sub","","",35,[[["self"],["f32"]],["self"]]],[11,"mul","","",35,[[["self"],["f32"]],["self"]]],[11,"div","","",35,[[["self"],["f32"]],["self"]]],[11,"rem","","",35,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",35,[[["self"],["f32"]]]],[11,"sub_assign","","",35,[[["self"],["f32"]]]],[11,"mul_assign","","",35,[[["self"],["f32"]]]],[11,"div_assign","","",35,[[["self"],["f32"]]]],[11,"rem_assign","","",35,[[["self"],["f32"]]]],[11,"neg","","",35,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",35,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",35,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",35,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",35,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",35,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",35,[[["self"]],["f32"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"from","","",35,N],[11,"from","","",35,[[["i8x4"]],["self"]]],[11,"from","","",35,[[["u8x4"]],["self"]]],[11,"from","","",35,[[["i16x4"]],["self"]]],[11,"from","","",35,[[["u16x4"]],["self"]]],[11,"default","","",35,[[],["self"]]],[11,"eq","","",35,[[["self"],["self"]],["bool"]]],[11,"ne","","",35,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",35,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",35,N],[11,"abs","","Absolute value.",35,[[["self"]],["self"]]],[11,"cos","","Cosine.",35,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",35,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",35,[[["self"]],["self"]]],[11,"sin","","",35,[[["self"]],["self"]]],[11,"sqrt","","",35,[[["self"]],["self"]]],[11,"sqrte","","",35,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",35,[[["self"],["f32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",35,[[["self"],["f32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",35,[[["self"],["f32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",35,[[["self"],["f32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",35,[[["self"],["f32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",35,[[["self"],["f32x4"]],["m32x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",36,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",36,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",36,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",36,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",36,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",36,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",36,[[["self"]],["self"]]],[11,"bitxor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand","","",36,[[["self"],["self"]],["self"]]],[11,"bitor","","",36,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["self"]]]],[11,"bitor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor_assign","","",36,[[["self"],["self"]]]],[11,"bitxor","","",36,[[["self"],["bool"]],["self"]]],[11,"bitand","","",36,[[["self"],["bool"]],["self"]]],[11,"bitor","","",36,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",36,[[["self"],["bool"]]]],[11,"bitor_assign","","",36,[[["self"],["bool"]]]],[11,"bitxor_assign","","",36,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",36,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",36,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",36,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",36,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",36,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",36,[[["self"]],["bool"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"from","","",36,N],[11,"from","","",36,[[["m8x4"]],["self"]]],[11,"from","","",36,[[["m16x4"]],["self"]]],[11,"from","","",36,[[["m64x4"]],["self"]]],[11,"default","","",36,[[],["self"]]],[11,"eq","","",36,[[["self"],["self"]],["bool"]]],[11,"ne","","",36,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",36,[[["self"],["m32x4"]],["m32x4"]]],[11,"ne","","Lane-wise inequality comparison.",36,[[["self"],["m32x4"]],["m32x4"]]],[11,"lt","","Lane-wise less-than comparison.",36,[[["self"],["m32x4"]],["m32x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",36,[[["self"],["m32x4"]],["m32x4"]]],[11,"gt","","Lane-wise greater-than comparison.",36,[[["self"],["m32x4"]],["m32x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",36,[[["self"],["m32x4"]],["m32x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",36,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",36,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",36,[[["self"],["self"]],["bool"]]],[11,"le","","",36,[[["self"],["self"]],["bool"]]],[11,"ge","","",36,[[["self"],["self"]],["bool"]]],[11,"gt","","",36,[[["self"],["self"]],["bool"]]],[11,"cmp","","",36,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",37,[[["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",37,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",37,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",37,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",37,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",37,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",37,[[["self"],["self"]],["self"]]],[11,"sub","","",37,[[["self"],["self"]],["self"]]],[11,"mul","","",37,[[["self"],["self"]],["self"]]],[11,"div","","",37,[[["self"],["self"]],["self"]]],[11,"rem","","",37,[[["self"],["self"]],["self"]]],[11,"add_assign","","",37,[[["self"],["self"]]]],[11,"sub_assign","","",37,[[["self"],["self"]]]],[11,"mul_assign","","",37,[[["self"],["self"]]]],[11,"div_assign","","",37,[[["self"],["self"]]]],[11,"rem_assign","","",37,[[["self"],["self"]]]],[11,"add","","",37,[[["self"],["i64"]],["self"]]],[11,"sub","","",37,[[["self"],["i64"]],["self"]]],[11,"mul","","",37,[[["self"],["i64"]],["self"]]],[11,"div","","",37,[[["self"],["i64"]],["self"]]],[11,"rem","","",37,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",37,[[["self"],["i64"]]]],[11,"sub_assign","","",37,[[["self"],["i64"]]]],[11,"mul_assign","","",37,[[["self"],["i64"]]]],[11,"div_assign","","",37,[[["self"],["i64"]]]],[11,"rem_assign","","",37,[[["self"],["i64"]]]],[11,"not","","",37,[[["self"]],["self"]]],[11,"bitxor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand","","",37,[[["self"],["self"]],["self"]]],[11,"bitor","","",37,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["self"]]]],[11,"bitor_assign","","",37,[[["self"],["self"]]]],[11,"bitxor_assign","","",37,[[["self"],["self"]]]],[11,"bitxor","","",37,[[["self"],["i64"]],["self"]]],[11,"bitand","","",37,[[["self"],["i64"]],["self"]]],[11,"bitor","","",37,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",37,[[["self"],["i64"]]]],[11,"bitor_assign","","",37,[[["self"],["i64"]]]],[11,"bitxor_assign","","",37,[[["self"],["i64"]]]],[11,"shl","","",37,[[["self"],["self"]],["self"]]],[11,"shr","","",37,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["self"]]]],[11,"shr_assign","","",37,[[["self"],["self"]]]],[11,"shl","","",37,[[["self"],["u32"]],["self"]]],[11,"shr","","",37,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",37,[[["self"],["u32"]]]],[11,"shr_assign","","",37,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",37,[[["self"],["i64x2"]],["i64x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",37,[[["self"],["i64x2"]],["i64x2"]]],[11,"neg","","",37,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",37,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",37,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",37,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",37,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",37,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",37,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",37,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",37,[[["self"]],["i64"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"from","","",37,N],[11,"from","","",37,[[["i8x2"]],["self"]]],[11,"from","","",37,[[["u8x2"]],["self"]]],[11,"from","","",37,[[["i16x2"]],["self"]]],[11,"from","","",37,[[["u16x2"]],["self"]]],[11,"from","","",37,[[["i32x2"]],["self"]]],[11,"from","","",37,[[["u32x2"]],["self"]]],[11,"default","","",37,[[],["self"]]],[11,"hash","","",37,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",37,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",37,N],[11,"swap_bytes","","Reverses the byte order of the vector.",37,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",37,[[["self"]],["self"]]],[11,"eq","","",37,[[["self"],["self"]],["bool"]]],[11,"ne","","",37,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",37,[[["self"],["i64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",37,[[["self"],["i64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",37,[[["self"],["i64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",37,[[["self"],["i64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",37,[[["self"],["i64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",37,[[["self"],["i64x2"]],["m64x2"]]],[11,"partial_cmp","","",37,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",37,[[["self"],["self"]],["bool"]]],[11,"le","","",37,[[["self"],["self"]],["bool"]]],[11,"ge","","",37,[[["self"],["self"]],["bool"]]],[11,"gt","","",37,[[["self"],["self"]],["bool"]]],[11,"cmp","","",37,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",38,[[["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",38,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",38,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",38,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",38,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",38,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",38,[[["self"],["self"]],["self"]]],[11,"sub","","",38,[[["self"],["self"]],["self"]]],[11,"mul","","",38,[[["self"],["self"]],["self"]]],[11,"div","","",38,[[["self"],["self"]],["self"]]],[11,"rem","","",38,[[["self"],["self"]],["self"]]],[11,"add_assign","","",38,[[["self"],["self"]]]],[11,"sub_assign","","",38,[[["self"],["self"]]]],[11,"mul_assign","","",38,[[["self"],["self"]]]],[11,"div_assign","","",38,[[["self"],["self"]]]],[11,"rem_assign","","",38,[[["self"],["self"]]]],[11,"add","","",38,[[["self"],["u64"]],["self"]]],[11,"sub","","",38,[[["self"],["u64"]],["self"]]],[11,"mul","","",38,[[["self"],["u64"]],["self"]]],[11,"div","","",38,[[["self"],["u64"]],["self"]]],[11,"rem","","",38,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",38,[[["self"],["u64"]]]],[11,"sub_assign","","",38,[[["self"],["u64"]]]],[11,"mul_assign","","",38,[[["self"],["u64"]]]],[11,"div_assign","","",38,[[["self"],["u64"]]]],[11,"rem_assign","","",38,[[["self"],["u64"]]]],[11,"not","","",38,[[["self"]],["self"]]],[11,"bitxor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand","","",38,[[["self"],["self"]],["self"]]],[11,"bitor","","",38,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["self"]]]],[11,"bitor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor_assign","","",38,[[["self"],["self"]]]],[11,"bitxor","","",38,[[["self"],["u64"]],["self"]]],[11,"bitand","","",38,[[["self"],["u64"]],["self"]]],[11,"bitor","","",38,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",38,[[["self"],["u64"]]]],[11,"bitor_assign","","",38,[[["self"],["u64"]]]],[11,"bitxor_assign","","",38,[[["self"],["u64"]]]],[11,"shl","","",38,[[["self"],["self"]],["self"]]],[11,"shr","","",38,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",38,[[["self"],["self"]]]],[11,"shr_assign","","",38,[[["self"],["self"]]]],[11,"shl","","",38,[[["self"],["u32"]],["self"]]],[11,"shr","","",38,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",38,[[["self"],["u32"]]]],[11,"shr_assign","","",38,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",38,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",38,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",38,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",38,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",38,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",38,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",38,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",38,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",38,[[["self"]],["u64"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"from","","",38,N],[11,"from","","",38,[[["u8x2"]],["self"]]],[11,"from","","",38,[[["u16x2"]],["self"]]],[11,"from","","",38,[[["u32x2"]],["self"]]],[11,"default","","",38,[[],["self"]]],[11,"hash","","",38,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",38,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",38,N],[11,"swap_bytes","","Reverses the byte order of the vector.",38,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",38,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",38,[[["self"]],["self"]]],[11,"eq","","",38,[[["self"],["self"]],["bool"]]],[11,"ne","","",38,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",38,[[["self"],["u64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",38,[[["self"],["u64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",38,[[["self"],["u64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",38,[[["self"],["u64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",38,[[["self"],["u64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",38,[[["self"],["u64x2"]],["m64x2"]]],[11,"partial_cmp","","",38,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",38,[[["self"],["self"]],["bool"]]],[11,"le","","",38,[[["self"],["self"]],["bool"]]],[11,"ge","","",38,[[["self"],["self"]],["bool"]]],[11,"gt","","",38,[[["self"],["self"]],["bool"]]],[11,"cmp","","",38,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",39,[[["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",39,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",39,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",39,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",39,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",39,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",39,[[["self"],["self"]],["self"]]],[11,"sub","","",39,[[["self"],["self"]],["self"]]],[11,"mul","","",39,[[["self"],["self"]],["self"]]],[11,"div","","",39,[[["self"],["self"]],["self"]]],[11,"rem","","",39,[[["self"],["self"]],["self"]]],[11,"add_assign","","",39,[[["self"],["self"]]]],[11,"sub_assign","","",39,[[["self"],["self"]]]],[11,"mul_assign","","",39,[[["self"],["self"]]]],[11,"div_assign","","",39,[[["self"],["self"]]]],[11,"rem_assign","","",39,[[["self"],["self"]]]],[11,"add","","",39,[[["self"],["f64"]],["self"]]],[11,"sub","","",39,[[["self"],["f64"]],["self"]]],[11,"mul","","",39,[[["self"],["f64"]],["self"]]],[11,"div","","",39,[[["self"],["f64"]],["self"]]],[11,"rem","","",39,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",39,[[["self"],["f64"]]]],[11,"sub_assign","","",39,[[["self"],["f64"]]]],[11,"mul_assign","","",39,[[["self"],["f64"]]]],[11,"div_assign","","",39,[[["self"],["f64"]]]],[11,"rem_assign","","",39,[[["self"],["f64"]]]],[11,"neg","","",39,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",39,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",39,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",39,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",39,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",39,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",39,[[["self"]],["f64"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"from","","",39,N],[11,"from","","",39,[[["i8x2"]],["self"]]],[11,"from","","",39,[[["u8x2"]],["self"]]],[11,"from","","",39,[[["i16x2"]],["self"]]],[11,"from","","",39,[[["u16x2"]],["self"]]],[11,"from","","",39,[[["i32x2"]],["self"]]],[11,"from","","",39,[[["u32x2"]],["self"]]],[11,"from","","",39,[[["f32x2"]],["self"]]],[11,"default","","",39,[[],["self"]]],[11,"eq","","",39,[[["self"],["self"]],["bool"]]],[11,"ne","","",39,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",39,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",39,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",39,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",39,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",39,N],[11,"abs","","Absolute value.",39,[[["self"]],["self"]]],[11,"cos","","Cosine.",39,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",39,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",39,[[["self"]],["self"]]],[11,"sin","","",39,[[["self"]],["self"]]],[11,"sqrt","","",39,[[["self"]],["self"]]],[11,"sqrte","","",39,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",39,[[["self"],["f64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",39,[[["self"],["f64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",39,[[["self"],["f64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",39,[[["self"],["f64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",39,[[["self"],["f64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",39,[[["self"],["f64x2"]],["m64x2"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",40,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",40,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",40,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",40,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",40,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",40,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",40,[[["self"]],["self"]]],[11,"bitxor","","",40,[[["self"],["self"]],["self"]]],[11,"bitand","","",40,[[["self"],["self"]],["self"]]],[11,"bitor","","",40,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",40,[[["self"],["self"]]]],[11,"bitor_assign","","",40,[[["self"],["self"]]]],[11,"bitxor_assign","","",40,[[["self"],["self"]]]],[11,"bitxor","","",40,[[["self"],["bool"]],["self"]]],[11,"bitand","","",40,[[["self"],["bool"]],["self"]]],[11,"bitor","","",40,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",40,[[["self"],["bool"]]]],[11,"bitor_assign","","",40,[[["self"],["bool"]]]],[11,"bitxor_assign","","",40,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",40,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",40,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",40,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",40,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",40,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",40,[[["self"]],["bool"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"from","","",40,N],[11,"from","","",40,[[["m8x2"]],["self"]]],[11,"from","","",40,[[["m16x2"]],["self"]]],[11,"from","","",40,[[["m32x2"]],["self"]]],[11,"from","","",40,[[["m128x2"]],["self"]]],[11,"default","","",40,[[],["self"]]],[11,"eq","","",40,[[["self"],["self"]],["bool"]]],[11,"ne","","",40,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",40,[[["self"],["m64x2"]],["m64x2"]]],[11,"ne","","Lane-wise inequality comparison.",40,[[["self"],["m64x2"]],["m64x2"]]],[11,"lt","","Lane-wise less-than comparison.",40,[[["self"],["m64x2"]],["m64x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",40,[[["self"],["m64x2"]],["m64x2"]]],[11,"gt","","Lane-wise greater-than comparison.",40,[[["self"],["m64x2"]],["m64x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",40,[[["self"],["m64x2"]],["m64x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",40,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",40,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",40,[[["self"],["self"]],["bool"]]],[11,"le","","",40,[[["self"],["self"]],["bool"]]],[11,"ge","","",40,[[["self"],["self"]],["bool"]]],[11,"gt","","",40,[[["self"],["self"]],["bool"]]],[11,"cmp","","",40,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",69,[[["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",69,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",69,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",69,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",69,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",69,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",69,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",69,[[["self"],["self"]],["self"]]],[11,"sub","","",69,[[["self"],["self"]],["self"]]],[11,"mul","","",69,[[["self"],["self"]],["self"]]],[11,"div","","",69,[[["self"],["self"]],["self"]]],[11,"rem","","",69,[[["self"],["self"]],["self"]]],[11,"add_assign","","",69,[[["self"],["self"]]]],[11,"sub_assign","","",69,[[["self"],["self"]]]],[11,"mul_assign","","",69,[[["self"],["self"]]]],[11,"div_assign","","",69,[[["self"],["self"]]]],[11,"rem_assign","","",69,[[["self"],["self"]]]],[11,"add","","",69,[[["self"],["i128"]],["self"]]],[11,"sub","","",69,[[["self"],["i128"]],["self"]]],[11,"mul","","",69,[[["self"],["i128"]],["self"]]],[11,"div","","",69,[[["self"],["i128"]],["self"]]],[11,"rem","","",69,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",69,[[["self"],["i128"]]]],[11,"sub_assign","","",69,[[["self"],["i128"]]]],[11,"mul_assign","","",69,[[["self"],["i128"]]]],[11,"div_assign","","",69,[[["self"],["i128"]]]],[11,"rem_assign","","",69,[[["self"],["i128"]]]],[11,"not","","",69,[[["self"]],["self"]]],[11,"bitxor","","",69,[[["self"],["self"]],["self"]]],[11,"bitand","","",69,[[["self"],["self"]],["self"]]],[11,"bitor","","",69,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",69,[[["self"],["self"]]]],[11,"bitor_assign","","",69,[[["self"],["self"]]]],[11,"bitxor_assign","","",69,[[["self"],["self"]]]],[11,"bitxor","","",69,[[["self"],["i128"]],["self"]]],[11,"bitand","","",69,[[["self"],["i128"]],["self"]]],[11,"bitor","","",69,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",69,[[["self"],["i128"]]]],[11,"bitor_assign","","",69,[[["self"],["i128"]]]],[11,"bitxor_assign","","",69,[[["self"],["i128"]]]],[11,"shl","","",69,[[["self"],["self"]],["self"]]],[11,"shr","","",69,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",69,[[["self"],["self"]]]],[11,"shr_assign","","",69,[[["self"],["self"]]]],[11,"shl","","",69,[[["self"],["u32"]],["self"]]],[11,"shr","","",69,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",69,[[["self"],["u32"]]]],[11,"shr_assign","","",69,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",69,[[["self"],["i128x1"]],["i128x1"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",69,[[["self"],["i128x1"]],["i128x1"]]],[11,"neg","","",69,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",69,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",69,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",69,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",69,[[["self"]],["i128"]]],[11,"max_element","","Largest vector element value.",69,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",69,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",69,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",69,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",69,[[["self"]],["i128"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"from","","",69,N],[11,"default","","",69,[[],["self"]]],[11,"hash","","",69,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",69,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",69,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",69,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",69,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",69,N],[11,"swap_bytes","","Reverses the byte order of the vector.",69,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",69,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",69,[[["self"]],["self"]]],[11,"eq","","",69,[[["self"],["self"]],["bool"]]],[11,"ne","","",69,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",69,[[["self"],["i128x1"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",69,[[["self"],["i128x1"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",69,[[["self"],["i128x1"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",69,[[["self"],["i128x1"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",69,[[["self"],["i128x1"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",69,[[["self"],["i128x1"]],["m128x1"]]],[11,"partial_cmp","","",69,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",69,[[["self"],["self"]],["bool"]]],[11,"le","","",69,[[["self"],["self"]],["bool"]]],[11,"ge","","",69,[[["self"],["self"]],["bool"]]],[11,"gt","","",69,[[["self"],["self"]],["bool"]]],[11,"cmp","","",69,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",70,[[["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",70,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",70,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",70,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",70,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",70,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",70,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",70,[[["self"],["self"]],["self"]]],[11,"sub","","",70,[[["self"],["self"]],["self"]]],[11,"mul","","",70,[[["self"],["self"]],["self"]]],[11,"div","","",70,[[["self"],["self"]],["self"]]],[11,"rem","","",70,[[["self"],["self"]],["self"]]],[11,"add_assign","","",70,[[["self"],["self"]]]],[11,"sub_assign","","",70,[[["self"],["self"]]]],[11,"mul_assign","","",70,[[["self"],["self"]]]],[11,"div_assign","","",70,[[["self"],["self"]]]],[11,"rem_assign","","",70,[[["self"],["self"]]]],[11,"add","","",70,[[["self"],["u128"]],["self"]]],[11,"sub","","",70,[[["self"],["u128"]],["self"]]],[11,"mul","","",70,[[["self"],["u128"]],["self"]]],[11,"div","","",70,[[["self"],["u128"]],["self"]]],[11,"rem","","",70,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",70,[[["self"],["u128"]]]],[11,"sub_assign","","",70,[[["self"],["u128"]]]],[11,"mul_assign","","",70,[[["self"],["u128"]]]],[11,"div_assign","","",70,[[["self"],["u128"]]]],[11,"rem_assign","","",70,[[["self"],["u128"]]]],[11,"not","","",70,[[["self"]],["self"]]],[11,"bitxor","","",70,[[["self"],["self"]],["self"]]],[11,"bitand","","",70,[[["self"],["self"]],["self"]]],[11,"bitor","","",70,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",70,[[["self"],["self"]]]],[11,"bitor_assign","","",70,[[["self"],["self"]]]],[11,"bitxor_assign","","",70,[[["self"],["self"]]]],[11,"bitxor","","",70,[[["self"],["u128"]],["self"]]],[11,"bitand","","",70,[[["self"],["u128"]],["self"]]],[11,"bitor","","",70,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",70,[[["self"],["u128"]]]],[11,"bitor_assign","","",70,[[["self"],["u128"]]]],[11,"bitxor_assign","","",70,[[["self"],["u128"]]]],[11,"shl","","",70,[[["self"],["self"]],["self"]]],[11,"shr","","",70,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",70,[[["self"],["self"]]]],[11,"shr_assign","","",70,[[["self"],["self"]]]],[11,"shl","","",70,[[["self"],["u32"]],["self"]]],[11,"shr","","",70,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",70,[[["self"],["u32"]]]],[11,"shr_assign","","",70,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",70,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",70,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",70,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",70,[[["self"]],["u128"]]],[11,"max_element","","Largest vector element value.",70,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",70,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",70,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",70,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",70,[[["self"]],["u128"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"from","","",70,N],[11,"default","","",70,[[],["self"]]],[11,"hash","","",70,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",70,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",70,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",70,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",70,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",70,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",70,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",70,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",70,N],[11,"swap_bytes","","Reverses the byte order of the vector.",70,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",70,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",70,[[["self"]],["self"]]],[11,"eq","","",70,[[["self"],["self"]],["bool"]]],[11,"ne","","",70,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",70,[[["self"],["u128x1"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",70,[[["self"],["u128x1"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",70,[[["self"],["u128x1"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",70,[[["self"],["u128x1"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",70,[[["self"],["u128x1"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",70,[[["self"],["u128x1"]],["m128x1"]]],[11,"partial_cmp","","",70,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",70,[[["self"],["self"]],["bool"]]],[11,"le","","",70,[[["self"],["self"]],["bool"]]],[11,"ge","","",70,[[["self"],["self"]],["bool"]]],[11,"gt","","",70,[[["self"],["self"]],["bool"]]],[11,"cmp","","",70,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",71,[[["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",71,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",71,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",71,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",71,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",71,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",71,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",71,[[["self"]],["self"]]],[11,"bitxor","","",71,[[["self"],["self"]],["self"]]],[11,"bitand","","",71,[[["self"],["self"]],["self"]]],[11,"bitor","","",71,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",71,[[["self"],["self"]]]],[11,"bitor_assign","","",71,[[["self"],["self"]]]],[11,"bitxor_assign","","",71,[[["self"],["self"]]]],[11,"bitxor","","",71,[[["self"],["bool"]],["self"]]],[11,"bitand","","",71,[[["self"],["bool"]],["self"]]],[11,"bitor","","",71,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",71,[[["self"],["bool"]]]],[11,"bitor_assign","","",71,[[["self"],["bool"]]]],[11,"bitxor_assign","","",71,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",71,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",71,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",71,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",71,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",71,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",71,[[["self"]],["bool"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"from","","",71,N],[11,"default","","",71,[[],["self"]]],[11,"eq","","",71,[[["self"],["self"]],["bool"]]],[11,"ne","","",71,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",71,[[["self"],["m128x1"]],["m128x1"]]],[11,"ne","","Lane-wise inequality comparison.",71,[[["self"],["m128x1"]],["m128x1"]]],[11,"lt","","Lane-wise less-than comparison.",71,[[["self"],["m128x1"]],["m128x1"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",71,[[["self"],["m128x1"]],["m128x1"]]],[11,"gt","","Lane-wise greater-than comparison.",71,[[["self"],["m128x1"]],["m128x1"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",71,[[["self"],["m128x1"]],["m128x1"]]],[11,"select","","Selects elements of `a` and `b` using mask.",71,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",71,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["self"]],["bool"]]],[11,"le","","",71,[[["self"],["self"]],["bool"]]],[11,"ge","","",71,[[["self"],["self"]],["bool"]]],[11,"gt","","",71,[[["self"],["self"]],["bool"]]],[11,"cmp","","",71,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",41,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",41,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",41,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",41,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",41,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",41,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",41,[[["self"],["self"]],["self"]]],[11,"sub","","",41,[[["self"],["self"]],["self"]]],[11,"mul","","",41,[[["self"],["self"]],["self"]]],[11,"div","","",41,[[["self"],["self"]],["self"]]],[11,"rem","","",41,[[["self"],["self"]],["self"]]],[11,"add_assign","","",41,[[["self"],["self"]]]],[11,"sub_assign","","",41,[[["self"],["self"]]]],[11,"mul_assign","","",41,[[["self"],["self"]]]],[11,"div_assign","","",41,[[["self"],["self"]]]],[11,"rem_assign","","",41,[[["self"],["self"]]]],[11,"add","","",41,[[["self"],["i8"]],["self"]]],[11,"sub","","",41,[[["self"],["i8"]],["self"]]],[11,"mul","","",41,[[["self"],["i8"]],["self"]]],[11,"div","","",41,[[["self"],["i8"]],["self"]]],[11,"rem","","",41,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",41,[[["self"],["i8"]]]],[11,"sub_assign","","",41,[[["self"],["i8"]]]],[11,"mul_assign","","",41,[[["self"],["i8"]]]],[11,"div_assign","","",41,[[["self"],["i8"]]]],[11,"rem_assign","","",41,[[["self"],["i8"]]]],[11,"not","","",41,[[["self"]],["self"]]],[11,"bitxor","","",41,[[["self"],["self"]],["self"]]],[11,"bitand","","",41,[[["self"],["self"]],["self"]]],[11,"bitor","","",41,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",41,[[["self"],["self"]]]],[11,"bitor_assign","","",41,[[["self"],["self"]]]],[11,"bitxor_assign","","",41,[[["self"],["self"]]]],[11,"bitxor","","",41,[[["self"],["i8"]],["self"]]],[11,"bitand","","",41,[[["self"],["i8"]],["self"]]],[11,"bitor","","",41,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",41,[[["self"],["i8"]]]],[11,"bitor_assign","","",41,[[["self"],["i8"]]]],[11,"bitxor_assign","","",41,[[["self"],["i8"]]]],[11,"shl","","",41,[[["self"],["self"]],["self"]]],[11,"shr","","",41,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",41,[[["self"],["self"]]]],[11,"shr_assign","","",41,[[["self"],["self"]]]],[11,"shl","","",41,[[["self"],["u32"]],["self"]]],[11,"shr","","",41,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",41,[[["self"],["u32"]]]],[11,"shr_assign","","",41,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",41,[[["self"],["i8x32"]],["i8x32"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",41,[[["self"],["i8x32"]],["i8x32"]]],[11,"neg","","",41,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",41,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",41,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",41,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",41,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",41,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",41,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",41,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",41,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",41,[[["self"]],["i8"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"from","","",41,N],[11,"default","","",41,[[],["self"]]],[11,"hash","","",41,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",41,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",41,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",41,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",41,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",41,N],[11,"swap_bytes","","Reverses the byte order of the vector.",41,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",41,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",41,[[["self"]],["self"]]],[11,"eq","","",41,[[["self"],["self"]],["bool"]]],[11,"ne","","",41,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",41,[[["self"],["i8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",41,[[["self"],["i8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",41,[[["self"],["i8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",41,[[["self"],["i8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",41,[[["self"],["i8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",41,[[["self"],["i8x32"]],["m8x32"]]],[11,"partial_cmp","","",41,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",41,[[["self"],["self"]],["bool"]]],[11,"le","","",41,[[["self"],["self"]],["bool"]]],[11,"ge","","",41,[[["self"],["self"]],["bool"]]],[11,"gt","","",41,[[["self"],["self"]],["bool"]]],[11,"cmp","","",41,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",42,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",42,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",42,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",42,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",42,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",42,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",42,[[["self"],["self"]],["self"]]],[11,"sub","","",42,[[["self"],["self"]],["self"]]],[11,"mul","","",42,[[["self"],["self"]],["self"]]],[11,"div","","",42,[[["self"],["self"]],["self"]]],[11,"rem","","",42,[[["self"],["self"]],["self"]]],[11,"add_assign","","",42,[[["self"],["self"]]]],[11,"sub_assign","","",42,[[["self"],["self"]]]],[11,"mul_assign","","",42,[[["self"],["self"]]]],[11,"div_assign","","",42,[[["self"],["self"]]]],[11,"rem_assign","","",42,[[["self"],["self"]]]],[11,"add","","",42,[[["self"],["u8"]],["self"]]],[11,"sub","","",42,[[["self"],["u8"]],["self"]]],[11,"mul","","",42,[[["self"],["u8"]],["self"]]],[11,"div","","",42,[[["self"],["u8"]],["self"]]],[11,"rem","","",42,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",42,[[["self"],["u8"]]]],[11,"sub_assign","","",42,[[["self"],["u8"]]]],[11,"mul_assign","","",42,[[["self"],["u8"]]]],[11,"div_assign","","",42,[[["self"],["u8"]]]],[11,"rem_assign","","",42,[[["self"],["u8"]]]],[11,"not","","",42,[[["self"]],["self"]]],[11,"bitxor","","",42,[[["self"],["self"]],["self"]]],[11,"bitand","","",42,[[["self"],["self"]],["self"]]],[11,"bitor","","",42,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",42,[[["self"],["self"]]]],[11,"bitor_assign","","",42,[[["self"],["self"]]]],[11,"bitxor_assign","","",42,[[["self"],["self"]]]],[11,"bitxor","","",42,[[["self"],["u8"]],["self"]]],[11,"bitand","","",42,[[["self"],["u8"]],["self"]]],[11,"bitor","","",42,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",42,[[["self"],["u8"]]]],[11,"bitor_assign","","",42,[[["self"],["u8"]]]],[11,"bitxor_assign","","",42,[[["self"],["u8"]]]],[11,"shl","","",42,[[["self"],["self"]],["self"]]],[11,"shr","","",42,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["self"]]]],[11,"shr_assign","","",42,[[["self"],["self"]]]],[11,"shl","","",42,[[["self"],["u32"]],["self"]]],[11,"shr","","",42,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",42,[[["self"],["u32"]]]],[11,"shr_assign","","",42,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",42,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",42,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",42,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",42,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",42,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",42,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",42,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",42,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",42,[[["self"]],["u8"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"from","","",42,N],[11,"default","","",42,[[],["self"]]],[11,"hash","","",42,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",42,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",42,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",42,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",42,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",42,N],[11,"swap_bytes","","Reverses the byte order of the vector.",42,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",42,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",42,[[["self"]],["self"]]],[11,"eq","","",42,[[["self"],["self"]],["bool"]]],[11,"ne","","",42,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",42,[[["self"],["u8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",42,[[["self"],["u8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",42,[[["self"],["u8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",42,[[["self"],["u8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",42,[[["self"],["u8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",42,[[["self"],["u8x32"]],["m8x32"]]],[11,"partial_cmp","","",42,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",42,[[["self"],["self"]],["bool"]]],[11,"le","","",42,[[["self"],["self"]],["bool"]]],[11,"ge","","",42,[[["self"],["self"]],["bool"]]],[11,"gt","","",42,[[["self"],["self"]],["bool"]]],[11,"cmp","","",42,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",43,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",43,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",43,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",43,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",43,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",43,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",43,[[["self"]],["self"]]],[11,"bitxor","","",43,[[["self"],["self"]],["self"]]],[11,"bitand","","",43,[[["self"],["self"]],["self"]]],[11,"bitor","","",43,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",43,[[["self"],["self"]]]],[11,"bitor_assign","","",43,[[["self"],["self"]]]],[11,"bitxor_assign","","",43,[[["self"],["self"]]]],[11,"bitxor","","",43,[[["self"],["bool"]],["self"]]],[11,"bitand","","",43,[[["self"],["bool"]],["self"]]],[11,"bitor","","",43,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",43,[[["self"],["bool"]]]],[11,"bitor_assign","","",43,[[["self"],["bool"]]]],[11,"bitxor_assign","","",43,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",43,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",43,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",43,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",43,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",43,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",43,[[["self"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"from","","",43,N],[11,"default","","",43,[[],["self"]]],[11,"eq","","",43,[[["self"],["self"]],["bool"]]],[11,"ne","","",43,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",43,[[["self"],["m8x32"]],["m8x32"]]],[11,"ne","","Lane-wise inequality comparison.",43,[[["self"],["m8x32"]],["m8x32"]]],[11,"lt","","Lane-wise less-than comparison.",43,[[["self"],["m8x32"]],["m8x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",43,[[["self"],["m8x32"]],["m8x32"]]],[11,"gt","","Lane-wise greater-than comparison.",43,[[["self"],["m8x32"]],["m8x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",43,[[["self"],["m8x32"]],["m8x32"]]],[11,"select","","Selects elements of `a` and `b` using mask.",43,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",43,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",43,[[["self"],["self"]],["bool"]]],[11,"le","","",43,[[["self"],["self"]],["bool"]]],[11,"ge","","",43,[[["self"],["self"]],["bool"]]],[11,"gt","","",43,[[["self"],["self"]],["bool"]]],[11,"cmp","","",43,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",44,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",44,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",44,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",44,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",44,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",44,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",44,[[["self"],["self"]],["self"]]],[11,"sub","","",44,[[["self"],["self"]],["self"]]],[11,"mul","","",44,[[["self"],["self"]],["self"]]],[11,"div","","",44,[[["self"],["self"]],["self"]]],[11,"rem","","",44,[[["self"],["self"]],["self"]]],[11,"add_assign","","",44,[[["self"],["self"]]]],[11,"sub_assign","","",44,[[["self"],["self"]]]],[11,"mul_assign","","",44,[[["self"],["self"]]]],[11,"div_assign","","",44,[[["self"],["self"]]]],[11,"rem_assign","","",44,[[["self"],["self"]]]],[11,"add","","",44,[[["self"],["i16"]],["self"]]],[11,"sub","","",44,[[["self"],["i16"]],["self"]]],[11,"mul","","",44,[[["self"],["i16"]],["self"]]],[11,"div","","",44,[[["self"],["i16"]],["self"]]],[11,"rem","","",44,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",44,[[["self"],["i16"]]]],[11,"sub_assign","","",44,[[["self"],["i16"]]]],[11,"mul_assign","","",44,[[["self"],["i16"]]]],[11,"div_assign","","",44,[[["self"],["i16"]]]],[11,"rem_assign","","",44,[[["self"],["i16"]]]],[11,"not","","",44,[[["self"]],["self"]]],[11,"bitxor","","",44,[[["self"],["self"]],["self"]]],[11,"bitand","","",44,[[["self"],["self"]],["self"]]],[11,"bitor","","",44,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",44,[[["self"],["self"]]]],[11,"bitor_assign","","",44,[[["self"],["self"]]]],[11,"bitxor_assign","","",44,[[["self"],["self"]]]],[11,"bitxor","","",44,[[["self"],["i16"]],["self"]]],[11,"bitand","","",44,[[["self"],["i16"]],["self"]]],[11,"bitor","","",44,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",44,[[["self"],["i16"]]]],[11,"bitor_assign","","",44,[[["self"],["i16"]]]],[11,"bitxor_assign","","",44,[[["self"],["i16"]]]],[11,"shl","","",44,[[["self"],["self"]],["self"]]],[11,"shr","","",44,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",44,[[["self"],["self"]]]],[11,"shr_assign","","",44,[[["self"],["self"]]]],[11,"shl","","",44,[[["self"],["u32"]],["self"]]],[11,"shr","","",44,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",44,[[["self"],["u32"]]]],[11,"shr_assign","","",44,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",44,[[["self"],["i16x16"]],["i16x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",44,[[["self"],["i16x16"]],["i16x16"]]],[11,"neg","","",44,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",44,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",44,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",44,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",44,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",44,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",44,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",44,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",44,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",44,[[["self"]],["i16"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"from","","",44,N],[11,"from","","",44,[[["i8x16"]],["self"]]],[11,"from","","",44,[[["u8x16"]],["self"]]],[11,"default","","",44,[[],["self"]]],[11,"hash","","",44,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",44,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",44,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",44,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",44,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",44,N],[11,"swap_bytes","","Reverses the byte order of the vector.",44,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",44,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",44,[[["self"]],["self"]]],[11,"eq","","",44,[[["self"],["self"]],["bool"]]],[11,"ne","","",44,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",44,[[["self"],["i16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",44,[[["self"],["i16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",44,[[["self"],["i16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",44,[[["self"],["i16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",44,[[["self"],["i16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",44,[[["self"],["i16x16"]],["m16x16"]]],[11,"partial_cmp","","",44,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",44,[[["self"],["self"]],["bool"]]],[11,"le","","",44,[[["self"],["self"]],["bool"]]],[11,"ge","","",44,[[["self"],["self"]],["bool"]]],[11,"gt","","",44,[[["self"],["self"]],["bool"]]],[11,"cmp","","",44,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",45,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",45,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",45,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",45,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",45,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",45,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",45,[[["self"],["self"]],["self"]]],[11,"sub","","",45,[[["self"],["self"]],["self"]]],[11,"mul","","",45,[[["self"],["self"]],["self"]]],[11,"div","","",45,[[["self"],["self"]],["self"]]],[11,"rem","","",45,[[["self"],["self"]],["self"]]],[11,"add_assign","","",45,[[["self"],["self"]]]],[11,"sub_assign","","",45,[[["self"],["self"]]]],[11,"mul_assign","","",45,[[["self"],["self"]]]],[11,"div_assign","","",45,[[["self"],["self"]]]],[11,"rem_assign","","",45,[[["self"],["self"]]]],[11,"add","","",45,[[["self"],["u16"]],["self"]]],[11,"sub","","",45,[[["self"],["u16"]],["self"]]],[11,"mul","","",45,[[["self"],["u16"]],["self"]]],[11,"div","","",45,[[["self"],["u16"]],["self"]]],[11,"rem","","",45,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",45,[[["self"],["u16"]]]],[11,"sub_assign","","",45,[[["self"],["u16"]]]],[11,"mul_assign","","",45,[[["self"],["u16"]]]],[11,"div_assign","","",45,[[["self"],["u16"]]]],[11,"rem_assign","","",45,[[["self"],["u16"]]]],[11,"not","","",45,[[["self"]],["self"]]],[11,"bitxor","","",45,[[["self"],["self"]],["self"]]],[11,"bitand","","",45,[[["self"],["self"]],["self"]]],[11,"bitor","","",45,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",45,[[["self"],["self"]]]],[11,"bitor_assign","","",45,[[["self"],["self"]]]],[11,"bitxor_assign","","",45,[[["self"],["self"]]]],[11,"bitxor","","",45,[[["self"],["u16"]],["self"]]],[11,"bitand","","",45,[[["self"],["u16"]],["self"]]],[11,"bitor","","",45,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",45,[[["self"],["u16"]]]],[11,"bitor_assign","","",45,[[["self"],["u16"]]]],[11,"bitxor_assign","","",45,[[["self"],["u16"]]]],[11,"shl","","",45,[[["self"],["self"]],["self"]]],[11,"shr","","",45,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["self"]]]],[11,"shr_assign","","",45,[[["self"],["self"]]]],[11,"shl","","",45,[[["self"],["u32"]],["self"]]],[11,"shr","","",45,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",45,[[["self"],["u32"]]]],[11,"shr_assign","","",45,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",45,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",45,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",45,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",45,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",45,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",45,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",45,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",45,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",45,[[["self"]],["u16"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"from","","",45,N],[11,"from","","",45,[[["u8x16"]],["self"]]],[11,"default","","",45,[[],["self"]]],[11,"hash","","",45,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",45,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",45,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",45,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",45,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",45,N],[11,"swap_bytes","","Reverses the byte order of the vector.",45,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",45,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",45,[[["self"]],["self"]]],[11,"eq","","",45,[[["self"],["self"]],["bool"]]],[11,"ne","","",45,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",45,[[["self"],["u16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",45,[[["self"],["u16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",45,[[["self"],["u16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",45,[[["self"],["u16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",45,[[["self"],["u16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",45,[[["self"],["u16x16"]],["m16x16"]]],[11,"partial_cmp","","",45,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",45,[[["self"],["self"]],["bool"]]],[11,"le","","",45,[[["self"],["self"]],["bool"]]],[11,"ge","","",45,[[["self"],["self"]],["bool"]]],[11,"gt","","",45,[[["self"],["self"]],["bool"]]],[11,"cmp","","",45,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",46,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",46,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",46,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",46,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",46,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",46,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",46,[[["self"]],["self"]]],[11,"bitxor","","",46,[[["self"],["self"]],["self"]]],[11,"bitand","","",46,[[["self"],["self"]],["self"]]],[11,"bitor","","",46,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",46,[[["self"],["self"]]]],[11,"bitor_assign","","",46,[[["self"],["self"]]]],[11,"bitxor_assign","","",46,[[["self"],["self"]]]],[11,"bitxor","","",46,[[["self"],["bool"]],["self"]]],[11,"bitand","","",46,[[["self"],["bool"]],["self"]]],[11,"bitor","","",46,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",46,[[["self"],["bool"]]]],[11,"bitor_assign","","",46,[[["self"],["bool"]]]],[11,"bitxor_assign","","",46,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",46,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",46,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",46,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",46,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",46,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",46,[[["self"]],["bool"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"from","","",46,N],[11,"from","","",46,[[["m8x16"]],["self"]]],[11,"default","","",46,[[],["self"]]],[11,"eq","","",46,[[["self"],["self"]],["bool"]]],[11,"ne","","",46,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",46,[[["self"],["m16x16"]],["m16x16"]]],[11,"ne","","Lane-wise inequality comparison.",46,[[["self"],["m16x16"]],["m16x16"]]],[11,"lt","","Lane-wise less-than comparison.",46,[[["self"],["m16x16"]],["m16x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",46,[[["self"],["m16x16"]],["m16x16"]]],[11,"gt","","Lane-wise greater-than comparison.",46,[[["self"],["m16x16"]],["m16x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",46,[[["self"],["m16x16"]],["m16x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",46,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",46,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",46,[[["self"],["self"]],["bool"]]],[11,"le","","",46,[[["self"],["self"]],["bool"]]],[11,"ge","","",46,[[["self"],["self"]],["bool"]]],[11,"gt","","",46,[[["self"],["self"]],["bool"]]],[11,"cmp","","",46,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",47,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",47,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",47,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",47,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",47,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",47,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",47,[[["self"],["self"]],["self"]]],[11,"sub","","",47,[[["self"],["self"]],["self"]]],[11,"mul","","",47,[[["self"],["self"]],["self"]]],[11,"div","","",47,[[["self"],["self"]],["self"]]],[11,"rem","","",47,[[["self"],["self"]],["self"]]],[11,"add_assign","","",47,[[["self"],["self"]]]],[11,"sub_assign","","",47,[[["self"],["self"]]]],[11,"mul_assign","","",47,[[["self"],["self"]]]],[11,"div_assign","","",47,[[["self"],["self"]]]],[11,"rem_assign","","",47,[[["self"],["self"]]]],[11,"add","","",47,[[["self"],["i32"]],["self"]]],[11,"sub","","",47,[[["self"],["i32"]],["self"]]],[11,"mul","","",47,[[["self"],["i32"]],["self"]]],[11,"div","","",47,[[["self"],["i32"]],["self"]]],[11,"rem","","",47,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",47,[[["self"],["i32"]]]],[11,"sub_assign","","",47,[[["self"],["i32"]]]],[11,"mul_assign","","",47,[[["self"],["i32"]]]],[11,"div_assign","","",47,[[["self"],["i32"]]]],[11,"rem_assign","","",47,[[["self"],["i32"]]]],[11,"not","","",47,[[["self"]],["self"]]],[11,"bitxor","","",47,[[["self"],["self"]],["self"]]],[11,"bitand","","",47,[[["self"],["self"]],["self"]]],[11,"bitor","","",47,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",47,[[["self"],["self"]]]],[11,"bitor_assign","","",47,[[["self"],["self"]]]],[11,"bitxor_assign","","",47,[[["self"],["self"]]]],[11,"bitxor","","",47,[[["self"],["i32"]],["self"]]],[11,"bitand","","",47,[[["self"],["i32"]],["self"]]],[11,"bitor","","",47,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",47,[[["self"],["i32"]]]],[11,"bitor_assign","","",47,[[["self"],["i32"]]]],[11,"bitxor_assign","","",47,[[["self"],["i32"]]]],[11,"shl","","",47,[[["self"],["self"]],["self"]]],[11,"shr","","",47,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",47,[[["self"],["self"]]]],[11,"shr_assign","","",47,[[["self"],["self"]]]],[11,"shl","","",47,[[["self"],["u32"]],["self"]]],[11,"shr","","",47,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",47,[[["self"],["u32"]]]],[11,"shr_assign","","",47,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",47,[[["self"],["i32x8"]],["i32x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",47,[[["self"],["i32x8"]],["i32x8"]]],[11,"neg","","",47,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",47,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",47,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",47,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",47,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",47,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",47,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",47,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",47,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",47,[[["self"]],["i32"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"from","","",47,N],[11,"from","","",47,[[["i8x8"]],["self"]]],[11,"from","","",47,[[["u8x8"]],["self"]]],[11,"from","","",47,[[["i16x8"]],["self"]]],[11,"from","","",47,[[["u16x8"]],["self"]]],[11,"default","","",47,[[],["self"]]],[11,"hash","","",47,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",47,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",47,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",47,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",47,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",47,N],[11,"swap_bytes","","Reverses the byte order of the vector.",47,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",47,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",47,[[["self"]],["self"]]],[11,"eq","","",47,[[["self"],["self"]],["bool"]]],[11,"ne","","",47,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",47,[[["self"],["i32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",47,[[["self"],["i32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",47,[[["self"],["i32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",47,[[["self"],["i32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",47,[[["self"],["i32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",47,[[["self"],["i32x8"]],["m32x8"]]],[11,"partial_cmp","","",47,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",47,[[["self"],["self"]],["bool"]]],[11,"le","","",47,[[["self"],["self"]],["bool"]]],[11,"ge","","",47,[[["self"],["self"]],["bool"]]],[11,"gt","","",47,[[["self"],["self"]],["bool"]]],[11,"cmp","","",47,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",48,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",48,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",48,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",48,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",48,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",48,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",48,[[["self"],["self"]],["self"]]],[11,"sub","","",48,[[["self"],["self"]],["self"]]],[11,"mul","","",48,[[["self"],["self"]],["self"]]],[11,"div","","",48,[[["self"],["self"]],["self"]]],[11,"rem","","",48,[[["self"],["self"]],["self"]]],[11,"add_assign","","",48,[[["self"],["self"]]]],[11,"sub_assign","","",48,[[["self"],["self"]]]],[11,"mul_assign","","",48,[[["self"],["self"]]]],[11,"div_assign","","",48,[[["self"],["self"]]]],[11,"rem_assign","","",48,[[["self"],["self"]]]],[11,"add","","",48,[[["self"],["u32"]],["self"]]],[11,"sub","","",48,[[["self"],["u32"]],["self"]]],[11,"mul","","",48,[[["self"],["u32"]],["self"]]],[11,"div","","",48,[[["self"],["u32"]],["self"]]],[11,"rem","","",48,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",48,[[["self"],["u32"]]]],[11,"sub_assign","","",48,[[["self"],["u32"]]]],[11,"mul_assign","","",48,[[["self"],["u32"]]]],[11,"div_assign","","",48,[[["self"],["u32"]]]],[11,"rem_assign","","",48,[[["self"],["u32"]]]],[11,"not","","",48,[[["self"]],["self"]]],[11,"bitxor","","",48,[[["self"],["self"]],["self"]]],[11,"bitand","","",48,[[["self"],["self"]],["self"]]],[11,"bitor","","",48,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",48,[[["self"],["self"]]]],[11,"bitor_assign","","",48,[[["self"],["self"]]]],[11,"bitxor_assign","","",48,[[["self"],["self"]]]],[11,"bitxor","","",48,[[["self"],["u32"]],["self"]]],[11,"bitand","","",48,[[["self"],["u32"]],["self"]]],[11,"bitor","","",48,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",48,[[["self"],["u32"]]]],[11,"bitor_assign","","",48,[[["self"],["u32"]]]],[11,"bitxor_assign","","",48,[[["self"],["u32"]]]],[11,"shl","","",48,[[["self"],["self"]],["self"]]],[11,"shr","","",48,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",48,[[["self"],["self"]]]],[11,"shr_assign","","",48,[[["self"],["self"]]]],[11,"shl","","",48,[[["self"],["u32"]],["self"]]],[11,"shr","","",48,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",48,[[["self"],["u32"]]]],[11,"shr_assign","","",48,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",48,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",48,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",48,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",48,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",48,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",48,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",48,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",48,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",48,[[["self"]],["u32"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"from","","",48,N],[11,"from","","",48,[[["u8x8"]],["self"]]],[11,"from","","",48,[[["u16x8"]],["self"]]],[11,"default","","",48,[[],["self"]]],[11,"hash","","",48,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",48,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",48,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",48,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",48,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",48,N],[11,"swap_bytes","","Reverses the byte order of the vector.",48,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",48,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",48,[[["self"]],["self"]]],[11,"eq","","",48,[[["self"],["self"]],["bool"]]],[11,"ne","","",48,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",48,[[["self"],["u32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",48,[[["self"],["u32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",48,[[["self"],["u32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",48,[[["self"],["u32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",48,[[["self"],["u32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",48,[[["self"],["u32x8"]],["m32x8"]]],[11,"partial_cmp","","",48,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",48,[[["self"],["self"]],["bool"]]],[11,"le","","",48,[[["self"],["self"]],["bool"]]],[11,"ge","","",48,[[["self"],["self"]],["bool"]]],[11,"gt","","",48,[[["self"],["self"]],["bool"]]],[11,"cmp","","",48,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",49,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",49,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",49,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",49,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",49,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",49,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",49,[[["self"],["self"]],["self"]]],[11,"sub","","",49,[[["self"],["self"]],["self"]]],[11,"mul","","",49,[[["self"],["self"]],["self"]]],[11,"div","","",49,[[["self"],["self"]],["self"]]],[11,"rem","","",49,[[["self"],["self"]],["self"]]],[11,"add_assign","","",49,[[["self"],["self"]]]],[11,"sub_assign","","",49,[[["self"],["self"]]]],[11,"mul_assign","","",49,[[["self"],["self"]]]],[11,"div_assign","","",49,[[["self"],["self"]]]],[11,"rem_assign","","",49,[[["self"],["self"]]]],[11,"add","","",49,[[["self"],["f32"]],["self"]]],[11,"sub","","",49,[[["self"],["f32"]],["self"]]],[11,"mul","","",49,[[["self"],["f32"]],["self"]]],[11,"div","","",49,[[["self"],["f32"]],["self"]]],[11,"rem","","",49,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",49,[[["self"],["f32"]]]],[11,"sub_assign","","",49,[[["self"],["f32"]]]],[11,"mul_assign","","",49,[[["self"],["f32"]]]],[11,"div_assign","","",49,[[["self"],["f32"]]]],[11,"rem_assign","","",49,[[["self"],["f32"]]]],[11,"neg","","",49,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",49,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",49,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",49,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",49,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",49,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",49,[[["self"]],["f32"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"from","","",49,N],[11,"from","","",49,[[["i8x8"]],["self"]]],[11,"from","","",49,[[["u8x8"]],["self"]]],[11,"from","","",49,[[["i16x8"]],["self"]]],[11,"from","","",49,[[["u16x8"]],["self"]]],[11,"default","","",49,[[],["self"]]],[11,"eq","","",49,[[["self"],["self"]],["bool"]]],[11,"ne","","",49,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",49,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",49,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",49,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",49,N],[11,"abs","","Absolute value.",49,[[["self"]],["self"]]],[11,"cos","","Cosine.",49,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",49,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",49,[[["self"]],["self"]]],[11,"sin","","",49,[[["self"]],["self"]]],[11,"sqrt","","",49,[[["self"]],["self"]]],[11,"sqrte","","",49,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",49,[[["self"],["f32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",49,[[["self"],["f32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",49,[[["self"],["f32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",49,[[["self"],["f32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",49,[[["self"],["f32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",49,[[["self"],["f32x8"]],["m32x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",50,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",50,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",50,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",50,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",50,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",50,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",50,[[["self"]],["self"]]],[11,"bitxor","","",50,[[["self"],["self"]],["self"]]],[11,"bitand","","",50,[[["self"],["self"]],["self"]]],[11,"bitor","","",50,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",50,[[["self"],["self"]]]],[11,"bitor_assign","","",50,[[["self"],["self"]]]],[11,"bitxor_assign","","",50,[[["self"],["self"]]]],[11,"bitxor","","",50,[[["self"],["bool"]],["self"]]],[11,"bitand","","",50,[[["self"],["bool"]],["self"]]],[11,"bitor","","",50,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",50,[[["self"],["bool"]]]],[11,"bitor_assign","","",50,[[["self"],["bool"]]]],[11,"bitxor_assign","","",50,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",50,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",50,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",50,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",50,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",50,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",50,[[["self"]],["bool"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"from","","",50,N],[11,"from","","",50,[[["m8x8"]],["self"]]],[11,"from","","",50,[[["m16x8"]],["self"]]],[11,"default","","",50,[[],["self"]]],[11,"eq","","",50,[[["self"],["self"]],["bool"]]],[11,"ne","","",50,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",50,[[["self"],["m32x8"]],["m32x8"]]],[11,"ne","","Lane-wise inequality comparison.",50,[[["self"],["m32x8"]],["m32x8"]]],[11,"lt","","Lane-wise less-than comparison.",50,[[["self"],["m32x8"]],["m32x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",50,[[["self"],["m32x8"]],["m32x8"]]],[11,"gt","","Lane-wise greater-than comparison.",50,[[["self"],["m32x8"]],["m32x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",50,[[["self"],["m32x8"]],["m32x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",50,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",50,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",50,[[["self"],["self"]],["bool"]]],[11,"le","","",50,[[["self"],["self"]],["bool"]]],[11,"ge","","",50,[[["self"],["self"]],["bool"]]],[11,"gt","","",50,[[["self"],["self"]],["bool"]]],[11,"cmp","","",50,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",51,[[["i64"],["i64"],["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",51,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",51,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",51,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",51,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",51,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",51,[[["self"],["self"]],["self"]]],[11,"sub","","",51,[[["self"],["self"]],["self"]]],[11,"mul","","",51,[[["self"],["self"]],["self"]]],[11,"div","","",51,[[["self"],["self"]],["self"]]],[11,"rem","","",51,[[["self"],["self"]],["self"]]],[11,"add_assign","","",51,[[["self"],["self"]]]],[11,"sub_assign","","",51,[[["self"],["self"]]]],[11,"mul_assign","","",51,[[["self"],["self"]]]],[11,"div_assign","","",51,[[["self"],["self"]]]],[11,"rem_assign","","",51,[[["self"],["self"]]]],[11,"add","","",51,[[["self"],["i64"]],["self"]]],[11,"sub","","",51,[[["self"],["i64"]],["self"]]],[11,"mul","","",51,[[["self"],["i64"]],["self"]]],[11,"div","","",51,[[["self"],["i64"]],["self"]]],[11,"rem","","",51,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",51,[[["self"],["i64"]]]],[11,"sub_assign","","",51,[[["self"],["i64"]]]],[11,"mul_assign","","",51,[[["self"],["i64"]]]],[11,"div_assign","","",51,[[["self"],["i64"]]]],[11,"rem_assign","","",51,[[["self"],["i64"]]]],[11,"not","","",51,[[["self"]],["self"]]],[11,"bitxor","","",51,[[["self"],["self"]],["self"]]],[11,"bitand","","",51,[[["self"],["self"]],["self"]]],[11,"bitor","","",51,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",51,[[["self"],["self"]]]],[11,"bitor_assign","","",51,[[["self"],["self"]]]],[11,"bitxor_assign","","",51,[[["self"],["self"]]]],[11,"bitxor","","",51,[[["self"],["i64"]],["self"]]],[11,"bitand","","",51,[[["self"],["i64"]],["self"]]],[11,"bitor","","",51,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",51,[[["self"],["i64"]]]],[11,"bitor_assign","","",51,[[["self"],["i64"]]]],[11,"bitxor_assign","","",51,[[["self"],["i64"]]]],[11,"shl","","",51,[[["self"],["self"]],["self"]]],[11,"shr","","",51,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",51,[[["self"],["self"]]]],[11,"shr_assign","","",51,[[["self"],["self"]]]],[11,"shl","","",51,[[["self"],["u32"]],["self"]]],[11,"shr","","",51,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",51,[[["self"],["u32"]]]],[11,"shr_assign","","",51,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",51,[[["self"],["i64x4"]],["i64x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",51,[[["self"],["i64x4"]],["i64x4"]]],[11,"neg","","",51,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",51,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",51,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",51,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",51,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",51,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",51,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",51,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",51,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",51,[[["self"]],["i64"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"from","","",51,N],[11,"from","","",51,[[["i8x4"]],["self"]]],[11,"from","","",51,[[["u8x4"]],["self"]]],[11,"from","","",51,[[["i16x4"]],["self"]]],[11,"from","","",51,[[["u16x4"]],["self"]]],[11,"from","","",51,[[["i32x4"]],["self"]]],[11,"from","","",51,[[["u32x4"]],["self"]]],[11,"default","","",51,[[],["self"]]],[11,"hash","","",51,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",51,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",51,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",51,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",51,N],[11,"swap_bytes","","Reverses the byte order of the vector.",51,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",51,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",51,[[["self"]],["self"]]],[11,"eq","","",51,[[["self"],["self"]],["bool"]]],[11,"ne","","",51,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",51,[[["self"],["i64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",51,[[["self"],["i64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",51,[[["self"],["i64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",51,[[["self"],["i64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",51,[[["self"],["i64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",51,[[["self"],["i64x4"]],["m64x4"]]],[11,"partial_cmp","","",51,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",51,[[["self"],["self"]],["bool"]]],[11,"le","","",51,[[["self"],["self"]],["bool"]]],[11,"ge","","",51,[[["self"],["self"]],["bool"]]],[11,"gt","","",51,[[["self"],["self"]],["bool"]]],[11,"cmp","","",51,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",52,[[["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",52,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",52,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",52,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",52,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",52,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",52,[[["self"],["self"]],["self"]]],[11,"sub","","",52,[[["self"],["self"]],["self"]]],[11,"mul","","",52,[[["self"],["self"]],["self"]]],[11,"div","","",52,[[["self"],["self"]],["self"]]],[11,"rem","","",52,[[["self"],["self"]],["self"]]],[11,"add_assign","","",52,[[["self"],["self"]]]],[11,"sub_assign","","",52,[[["self"],["self"]]]],[11,"mul_assign","","",52,[[["self"],["self"]]]],[11,"div_assign","","",52,[[["self"],["self"]]]],[11,"rem_assign","","",52,[[["self"],["self"]]]],[11,"add","","",52,[[["self"],["u64"]],["self"]]],[11,"sub","","",52,[[["self"],["u64"]],["self"]]],[11,"mul","","",52,[[["self"],["u64"]],["self"]]],[11,"div","","",52,[[["self"],["u64"]],["self"]]],[11,"rem","","",52,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",52,[[["self"],["u64"]]]],[11,"sub_assign","","",52,[[["self"],["u64"]]]],[11,"mul_assign","","",52,[[["self"],["u64"]]]],[11,"div_assign","","",52,[[["self"],["u64"]]]],[11,"rem_assign","","",52,[[["self"],["u64"]]]],[11,"not","","",52,[[["self"]],["self"]]],[11,"bitxor","","",52,[[["self"],["self"]],["self"]]],[11,"bitand","","",52,[[["self"],["self"]],["self"]]],[11,"bitor","","",52,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",52,[[["self"],["self"]]]],[11,"bitor_assign","","",52,[[["self"],["self"]]]],[11,"bitxor_assign","","",52,[[["self"],["self"]]]],[11,"bitxor","","",52,[[["self"],["u64"]],["self"]]],[11,"bitand","","",52,[[["self"],["u64"]],["self"]]],[11,"bitor","","",52,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",52,[[["self"],["u64"]]]],[11,"bitor_assign","","",52,[[["self"],["u64"]]]],[11,"bitxor_assign","","",52,[[["self"],["u64"]]]],[11,"shl","","",52,[[["self"],["self"]],["self"]]],[11,"shr","","",52,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",52,[[["self"],["self"]]]],[11,"shr_assign","","",52,[[["self"],["self"]]]],[11,"shl","","",52,[[["self"],["u32"]],["self"]]],[11,"shr","","",52,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",52,[[["self"],["u32"]]]],[11,"shr_assign","","",52,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",52,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",52,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",52,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",52,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",52,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",52,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",52,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",52,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",52,[[["self"]],["u64"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"from","","",52,N],[11,"from","","",52,[[["u8x4"]],["self"]]],[11,"from","","",52,[[["u16x4"]],["self"]]],[11,"from","","",52,[[["u32x4"]],["self"]]],[11,"default","","",52,[[],["self"]]],[11,"hash","","",52,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",52,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",52,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",52,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",52,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",52,N],[11,"swap_bytes","","Reverses the byte order of the vector.",52,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",52,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",52,[[["self"]],["self"]]],[11,"eq","","",52,[[["self"],["self"]],["bool"]]],[11,"ne","","",52,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",52,[[["self"],["u64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",52,[[["self"],["u64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",52,[[["self"],["u64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",52,[[["self"],["u64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",52,[[["self"],["u64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",52,[[["self"],["u64x4"]],["m64x4"]]],[11,"partial_cmp","","",52,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",52,[[["self"],["self"]],["bool"]]],[11,"le","","",52,[[["self"],["self"]],["bool"]]],[11,"ge","","",52,[[["self"],["self"]],["bool"]]],[11,"gt","","",52,[[["self"],["self"]],["bool"]]],[11,"cmp","","",52,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",53,[[["f64"],["f64"],["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",53,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",53,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",53,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",53,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",53,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",53,[[["self"],["self"]],["self"]]],[11,"sub","","",53,[[["self"],["self"]],["self"]]],[11,"mul","","",53,[[["self"],["self"]],["self"]]],[11,"div","","",53,[[["self"],["self"]],["self"]]],[11,"rem","","",53,[[["self"],["self"]],["self"]]],[11,"add_assign","","",53,[[["self"],["self"]]]],[11,"sub_assign","","",53,[[["self"],["self"]]]],[11,"mul_assign","","",53,[[["self"],["self"]]]],[11,"div_assign","","",53,[[["self"],["self"]]]],[11,"rem_assign","","",53,[[["self"],["self"]]]],[11,"add","","",53,[[["self"],["f64"]],["self"]]],[11,"sub","","",53,[[["self"],["f64"]],["self"]]],[11,"mul","","",53,[[["self"],["f64"]],["self"]]],[11,"div","","",53,[[["self"],["f64"]],["self"]]],[11,"rem","","",53,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",53,[[["self"],["f64"]]]],[11,"sub_assign","","",53,[[["self"],["f64"]]]],[11,"mul_assign","","",53,[[["self"],["f64"]]]],[11,"div_assign","","",53,[[["self"],["f64"]]]],[11,"rem_assign","","",53,[[["self"],["f64"]]]],[11,"neg","","",53,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",53,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",53,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",53,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",53,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",53,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",53,[[["self"]],["f64"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"from","","",53,N],[11,"from","","",53,[[["i8x4"]],["self"]]],[11,"from","","",53,[[["u8x4"]],["self"]]],[11,"from","","",53,[[["i16x4"]],["self"]]],[11,"from","","",53,[[["u16x4"]],["self"]]],[11,"from","","",53,[[["i32x4"]],["self"]]],[11,"from","","",53,[[["u32x4"]],["self"]]],[11,"from","","",53,[[["f32x4"]],["self"]]],[11,"default","","",53,[[],["self"]]],[11,"eq","","",53,[[["self"],["self"]],["bool"]]],[11,"ne","","",53,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",53,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",53,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",53,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",53,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",53,N],[11,"abs","","Absolute value.",53,[[["self"]],["self"]]],[11,"cos","","Cosine.",53,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",53,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",53,[[["self"]],["self"]]],[11,"sin","","",53,[[["self"]],["self"]]],[11,"sqrt","","",53,[[["self"]],["self"]]],[11,"sqrte","","",53,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",53,[[["self"],["f64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",53,[[["self"],["f64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",53,[[["self"],["f64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",53,[[["self"],["f64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",53,[[["self"],["f64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",53,[[["self"],["f64x4"]],["m64x4"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",54,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",54,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",54,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",54,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",54,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",54,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",54,[[["self"]],["self"]]],[11,"bitxor","","",54,[[["self"],["self"]],["self"]]],[11,"bitand","","",54,[[["self"],["self"]],["self"]]],[11,"bitor","","",54,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",54,[[["self"],["self"]]]],[11,"bitor_assign","","",54,[[["self"],["self"]]]],[11,"bitxor_assign","","",54,[[["self"],["self"]]]],[11,"bitxor","","",54,[[["self"],["bool"]],["self"]]],[11,"bitand","","",54,[[["self"],["bool"]],["self"]]],[11,"bitor","","",54,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",54,[[["self"],["bool"]]]],[11,"bitor_assign","","",54,[[["self"],["bool"]]]],[11,"bitxor_assign","","",54,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",54,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",54,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",54,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",54,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",54,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",54,[[["self"]],["bool"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"from","","",54,N],[11,"from","","",54,[[["m8x4"]],["self"]]],[11,"from","","",54,[[["m16x4"]],["self"]]],[11,"from","","",54,[[["m32x4"]],["self"]]],[11,"default","","",54,[[],["self"]]],[11,"eq","","",54,[[["self"],["self"]],["bool"]]],[11,"ne","","",54,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",54,[[["self"],["m64x4"]],["m64x4"]]],[11,"ne","","Lane-wise inequality comparison.",54,[[["self"],["m64x4"]],["m64x4"]]],[11,"lt","","Lane-wise less-than comparison.",54,[[["self"],["m64x4"]],["m64x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",54,[[["self"],["m64x4"]],["m64x4"]]],[11,"gt","","Lane-wise greater-than comparison.",54,[[["self"],["m64x4"]],["m64x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",54,[[["self"],["m64x4"]],["m64x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",54,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",54,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",54,[[["self"],["self"]],["bool"]]],[11,"le","","",54,[[["self"],["self"]],["bool"]]],[11,"ge","","",54,[[["self"],["self"]],["bool"]]],[11,"gt","","",54,[[["self"],["self"]],["bool"]]],[11,"cmp","","",54,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",72,[[["i128"],["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",72,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",72,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",72,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",72,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",72,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",72,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",72,[[["self"],["self"]],["self"]]],[11,"sub","","",72,[[["self"],["self"]],["self"]]],[11,"mul","","",72,[[["self"],["self"]],["self"]]],[11,"div","","",72,[[["self"],["self"]],["self"]]],[11,"rem","","",72,[[["self"],["self"]],["self"]]],[11,"add_assign","","",72,[[["self"],["self"]]]],[11,"sub_assign","","",72,[[["self"],["self"]]]],[11,"mul_assign","","",72,[[["self"],["self"]]]],[11,"div_assign","","",72,[[["self"],["self"]]]],[11,"rem_assign","","",72,[[["self"],["self"]]]],[11,"add","","",72,[[["self"],["i128"]],["self"]]],[11,"sub","","",72,[[["self"],["i128"]],["self"]]],[11,"mul","","",72,[[["self"],["i128"]],["self"]]],[11,"div","","",72,[[["self"],["i128"]],["self"]]],[11,"rem","","",72,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",72,[[["self"],["i128"]]]],[11,"sub_assign","","",72,[[["self"],["i128"]]]],[11,"mul_assign","","",72,[[["self"],["i128"]]]],[11,"div_assign","","",72,[[["self"],["i128"]]]],[11,"rem_assign","","",72,[[["self"],["i128"]]]],[11,"not","","",72,[[["self"]],["self"]]],[11,"bitxor","","",72,[[["self"],["self"]],["self"]]],[11,"bitand","","",72,[[["self"],["self"]],["self"]]],[11,"bitor","","",72,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",72,[[["self"],["self"]]]],[11,"bitor_assign","","",72,[[["self"],["self"]]]],[11,"bitxor_assign","","",72,[[["self"],["self"]]]],[11,"bitxor","","",72,[[["self"],["i128"]],["self"]]],[11,"bitand","","",72,[[["self"],["i128"]],["self"]]],[11,"bitor","","",72,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",72,[[["self"],["i128"]]]],[11,"bitor_assign","","",72,[[["self"],["i128"]]]],[11,"bitxor_assign","","",72,[[["self"],["i128"]]]],[11,"shl","","",72,[[["self"],["self"]],["self"]]],[11,"shr","","",72,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",72,[[["self"],["self"]]]],[11,"shr_assign","","",72,[[["self"],["self"]]]],[11,"shl","","",72,[[["self"],["u32"]],["self"]]],[11,"shr","","",72,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",72,[[["self"],["u32"]]]],[11,"shr_assign","","",72,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",72,[[["self"],["i128x2"]],["i128x2"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",72,[[["self"],["i128x2"]],["i128x2"]]],[11,"neg","","",72,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",72,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",72,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",72,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",72,[[["self"]],["i128"]]],[11,"max_element","","Largest vector element value.",72,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",72,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",72,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",72,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",72,[[["self"]],["i128"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"from","","",72,N],[11,"from","","",72,[[["i8x2"]],["self"]]],[11,"from","","",72,[[["u8x2"]],["self"]]],[11,"from","","",72,[[["i16x2"]],["self"]]],[11,"from","","",72,[[["u16x2"]],["self"]]],[11,"from","","",72,[[["i32x2"]],["self"]]],[11,"from","","",72,[[["u32x2"]],["self"]]],[11,"from","","",72,[[["i64x2"]],["self"]]],[11,"from","","",72,[[["u64x2"]],["self"]]],[11,"default","","",72,[[],["self"]]],[11,"hash","","",72,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",72,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",72,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",72,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",72,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",72,N],[11,"swap_bytes","","Reverses the byte order of the vector.",72,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",72,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",72,[[["self"]],["self"]]],[11,"eq","","",72,[[["self"],["self"]],["bool"]]],[11,"ne","","",72,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",72,[[["self"],["i128x2"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",72,[[["self"],["i128x2"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",72,[[["self"],["i128x2"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",72,[[["self"],["i128x2"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",72,[[["self"],["i128x2"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",72,[[["self"],["i128x2"]],["m128x2"]]],[11,"partial_cmp","","",72,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",72,[[["self"],["self"]],["bool"]]],[11,"le","","",72,[[["self"],["self"]],["bool"]]],[11,"ge","","",72,[[["self"],["self"]],["bool"]]],[11,"gt","","",72,[[["self"],["self"]],["bool"]]],[11,"cmp","","",72,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",73,[[["u128"],["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",73,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",73,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",73,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",73,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",73,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",73,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",73,[[["self"],["self"]],["self"]]],[11,"sub","","",73,[[["self"],["self"]],["self"]]],[11,"mul","","",73,[[["self"],["self"]],["self"]]],[11,"div","","",73,[[["self"],["self"]],["self"]]],[11,"rem","","",73,[[["self"],["self"]],["self"]]],[11,"add_assign","","",73,[[["self"],["self"]]]],[11,"sub_assign","","",73,[[["self"],["self"]]]],[11,"mul_assign","","",73,[[["self"],["self"]]]],[11,"div_assign","","",73,[[["self"],["self"]]]],[11,"rem_assign","","",73,[[["self"],["self"]]]],[11,"add","","",73,[[["self"],["u128"]],["self"]]],[11,"sub","","",73,[[["self"],["u128"]],["self"]]],[11,"mul","","",73,[[["self"],["u128"]],["self"]]],[11,"div","","",73,[[["self"],["u128"]],["self"]]],[11,"rem","","",73,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",73,[[["self"],["u128"]]]],[11,"sub_assign","","",73,[[["self"],["u128"]]]],[11,"mul_assign","","",73,[[["self"],["u128"]]]],[11,"div_assign","","",73,[[["self"],["u128"]]]],[11,"rem_assign","","",73,[[["self"],["u128"]]]],[11,"not","","",73,[[["self"]],["self"]]],[11,"bitxor","","",73,[[["self"],["self"]],["self"]]],[11,"bitand","","",73,[[["self"],["self"]],["self"]]],[11,"bitor","","",73,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",73,[[["self"],["self"]]]],[11,"bitor_assign","","",73,[[["self"],["self"]]]],[11,"bitxor_assign","","",73,[[["self"],["self"]]]],[11,"bitxor","","",73,[[["self"],["u128"]],["self"]]],[11,"bitand","","",73,[[["self"],["u128"]],["self"]]],[11,"bitor","","",73,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",73,[[["self"],["u128"]]]],[11,"bitor_assign","","",73,[[["self"],["u128"]]]],[11,"bitxor_assign","","",73,[[["self"],["u128"]]]],[11,"shl","","",73,[[["self"],["self"]],["self"]]],[11,"shr","","",73,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",73,[[["self"],["self"]]]],[11,"shr_assign","","",73,[[["self"],["self"]]]],[11,"shl","","",73,[[["self"],["u32"]],["self"]]],[11,"shr","","",73,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",73,[[["self"],["u32"]]]],[11,"shr_assign","","",73,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",73,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",73,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",73,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",73,[[["self"]],["u128"]]],[11,"max_element","","Largest vector element value.",73,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",73,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",73,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",73,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",73,[[["self"]],["u128"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"from","","",73,N],[11,"from","","",73,[[["u8x2"]],["self"]]],[11,"from","","",73,[[["u16x2"]],["self"]]],[11,"from","","",73,[[["u32x2"]],["self"]]],[11,"from","","",73,[[["u64x2"]],["self"]]],[11,"default","","",73,[[],["self"]]],[11,"hash","","",73,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",73,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",73,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",73,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",73,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",73,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",73,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",73,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",73,N],[11,"swap_bytes","","Reverses the byte order of the vector.",73,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",73,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",73,[[["self"]],["self"]]],[11,"eq","","",73,[[["self"],["self"]],["bool"]]],[11,"ne","","",73,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",73,[[["self"],["u128x2"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",73,[[["self"],["u128x2"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",73,[[["self"],["u128x2"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",73,[[["self"],["u128x2"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",73,[[["self"],["u128x2"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",73,[[["self"],["u128x2"]],["m128x2"]]],[11,"partial_cmp","","",73,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",73,[[["self"],["self"]],["bool"]]],[11,"le","","",73,[[["self"],["self"]],["bool"]]],[11,"ge","","",73,[[["self"],["self"]],["bool"]]],[11,"gt","","",73,[[["self"],["self"]],["bool"]]],[11,"cmp","","",73,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",74,[[["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",74,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",74,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",74,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",74,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",74,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",74,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",74,[[["self"]],["self"]]],[11,"bitxor","","",74,[[["self"],["self"]],["self"]]],[11,"bitand","","",74,[[["self"],["self"]],["self"]]],[11,"bitor","","",74,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",74,[[["self"],["self"]]]],[11,"bitor_assign","","",74,[[["self"],["self"]]]],[11,"bitxor_assign","","",74,[[["self"],["self"]]]],[11,"bitxor","","",74,[[["self"],["bool"]],["self"]]],[11,"bitand","","",74,[[["self"],["bool"]],["self"]]],[11,"bitor","","",74,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",74,[[["self"],["bool"]]]],[11,"bitor_assign","","",74,[[["self"],["bool"]]]],[11,"bitxor_assign","","",74,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",74,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",74,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",74,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",74,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",74,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",74,[[["self"]],["bool"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"from","","",74,N],[11,"from","","",74,[[["m8x2"]],["self"]]],[11,"from","","",74,[[["m16x2"]],["self"]]],[11,"from","","",74,[[["m32x2"]],["self"]]],[11,"from","","",74,[[["m64x2"]],["self"]]],[11,"default","","",74,[[],["self"]]],[11,"eq","","",74,[[["self"],["self"]],["bool"]]],[11,"ne","","",74,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",74,[[["self"],["m128x2"]],["m128x2"]]],[11,"ne","","Lane-wise inequality comparison.",74,[[["self"],["m128x2"]],["m128x2"]]],[11,"lt","","Lane-wise less-than comparison.",74,[[["self"],["m128x2"]],["m128x2"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",74,[[["self"],["m128x2"]],["m128x2"]]],[11,"gt","","Lane-wise greater-than comparison.",74,[[["self"],["m128x2"]],["m128x2"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",74,[[["self"],["m128x2"]],["m128x2"]]],[11,"select","","Selects elements of `a` and `b` using mask.",74,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",74,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",74,[[["self"],["self"]],["bool"]]],[11,"le","","",74,[[["self"],["self"]],["bool"]]],[11,"ge","","",74,[[["self"],["self"]],["bool"]]],[11,"gt","","",74,[[["self"],["self"]],["bool"]]],[11,"cmp","","",74,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",55,[[["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"],["i8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",55,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",55,[[["i8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",55,[[["self"],["usize"]],["i8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",55,[[["self"],["usize"]],["i8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["i8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",55,[[["self"],["usize"],["i8"]],["self"]]],[11,"add","","",55,[[["self"],["self"]],["self"]]],[11,"sub","","",55,[[["self"],["self"]],["self"]]],[11,"mul","","",55,[[["self"],["self"]],["self"]]],[11,"div","","",55,[[["self"],["self"]],["self"]]],[11,"rem","","",55,[[["self"],["self"]],["self"]]],[11,"add_assign","","",55,[[["self"],["self"]]]],[11,"sub_assign","","",55,[[["self"],["self"]]]],[11,"mul_assign","","",55,[[["self"],["self"]]]],[11,"div_assign","","",55,[[["self"],["self"]]]],[11,"rem_assign","","",55,[[["self"],["self"]]]],[11,"add","","",55,[[["self"],["i8"]],["self"]]],[11,"sub","","",55,[[["self"],["i8"]],["self"]]],[11,"mul","","",55,[[["self"],["i8"]],["self"]]],[11,"div","","",55,[[["self"],["i8"]],["self"]]],[11,"rem","","",55,[[["self"],["i8"]],["self"]]],[11,"add_assign","","",55,[[["self"],["i8"]]]],[11,"sub_assign","","",55,[[["self"],["i8"]]]],[11,"mul_assign","","",55,[[["self"],["i8"]]]],[11,"div_assign","","",55,[[["self"],["i8"]]]],[11,"rem_assign","","",55,[[["self"],["i8"]]]],[11,"not","","",55,[[["self"]],["self"]]],[11,"bitxor","","",55,[[["self"],["self"]],["self"]]],[11,"bitand","","",55,[[["self"],["self"]],["self"]]],[11,"bitor","","",55,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",55,[[["self"],["self"]]]],[11,"bitor_assign","","",55,[[["self"],["self"]]]],[11,"bitxor_assign","","",55,[[["self"],["self"]]]],[11,"bitxor","","",55,[[["self"],["i8"]],["self"]]],[11,"bitand","","",55,[[["self"],["i8"]],["self"]]],[11,"bitor","","",55,[[["self"],["i8"]],["self"]]],[11,"bitand_assign","","",55,[[["self"],["i8"]]]],[11,"bitor_assign","","",55,[[["self"],["i8"]]]],[11,"bitxor_assign","","",55,[[["self"],["i8"]]]],[11,"shl","","",55,[[["self"],["self"]],["self"]]],[11,"shr","","",55,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",55,[[["self"],["self"]]]],[11,"shr_assign","","",55,[[["self"],["self"]]]],[11,"shl","","",55,[[["self"],["u32"]],["self"]]],[11,"shr","","",55,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",55,[[["self"],["u32"]]]],[11,"shr_assign","","",55,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",55,[[["self"],["i8x64"]],["i8x64"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",55,[[["self"],["i8x64"]],["i8x64"]]],[11,"neg","","",55,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",55,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",55,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",55,[[["self"]],["i8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",55,[[["self"]],["i8"]]],[11,"max_element","","Largest vector element value.",55,[[["self"]],["i8"]]],[11,"min_element","","Smallest vector element value.",55,[[["self"]],["i8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",55,[[["self"]],["i8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",55,[[["self"]],["i8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",55,[[["self"]],["i8"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"from","","",55,N],[11,"default","","",55,[[],["self"]]],[11,"hash","","",55,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",55,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",55,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",55,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",55,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",55,N],[11,"swap_bytes","","Reverses the byte order of the vector.",55,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",55,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",55,[[["self"]],["self"]]],[11,"eq","","",55,[[["self"],["self"]],["bool"]]],[11,"ne","","",55,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",55,[[["self"],["i8x64"]],["m8x64"]]],[11,"ne","","Lane-wise inequality comparison.",55,[[["self"],["i8x64"]],["m8x64"]]],[11,"lt","","Lane-wise less-than comparison.",55,[[["self"],["i8x64"]],["m8x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",55,[[["self"],["i8x64"]],["m8x64"]]],[11,"gt","","Lane-wise greater-than comparison.",55,[[["self"],["i8x64"]],["m8x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",55,[[["self"],["i8x64"]],["m8x64"]]],[11,"partial_cmp","","",55,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",55,[[["self"],["self"]],["bool"]]],[11,"le","","",55,[[["self"],["self"]],["bool"]]],[11,"ge","","",55,[[["self"],["self"]],["bool"]]],[11,"gt","","",55,[[["self"],["self"]],["bool"]]],[11,"cmp","","",55,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",56,[[["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"],["u8"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",56,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",56,[[["u8"]],["self"]]],[11,"extract","","Extracts the value at `index`.",56,[[["self"],["usize"]],["u8"]]],[11,"extract_unchecked","","Extracts the value at `index`.",56,[[["self"],["usize"]],["u8"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["u8"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",56,[[["self"],["usize"],["u8"]],["self"]]],[11,"add","","",56,[[["self"],["self"]],["self"]]],[11,"sub","","",56,[[["self"],["self"]],["self"]]],[11,"mul","","",56,[[["self"],["self"]],["self"]]],[11,"div","","",56,[[["self"],["self"]],["self"]]],[11,"rem","","",56,[[["self"],["self"]],["self"]]],[11,"add_assign","","",56,[[["self"],["self"]]]],[11,"sub_assign","","",56,[[["self"],["self"]]]],[11,"mul_assign","","",56,[[["self"],["self"]]]],[11,"div_assign","","",56,[[["self"],["self"]]]],[11,"rem_assign","","",56,[[["self"],["self"]]]],[11,"add","","",56,[[["self"],["u8"]],["self"]]],[11,"sub","","",56,[[["self"],["u8"]],["self"]]],[11,"mul","","",56,[[["self"],["u8"]],["self"]]],[11,"div","","",56,[[["self"],["u8"]],["self"]]],[11,"rem","","",56,[[["self"],["u8"]],["self"]]],[11,"add_assign","","",56,[[["self"],["u8"]]]],[11,"sub_assign","","",56,[[["self"],["u8"]]]],[11,"mul_assign","","",56,[[["self"],["u8"]]]],[11,"div_assign","","",56,[[["self"],["u8"]]]],[11,"rem_assign","","",56,[[["self"],["u8"]]]],[11,"not","","",56,[[["self"]],["self"]]],[11,"bitxor","","",56,[[["self"],["self"]],["self"]]],[11,"bitand","","",56,[[["self"],["self"]],["self"]]],[11,"bitor","","",56,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",56,[[["self"],["self"]]]],[11,"bitor_assign","","",56,[[["self"],["self"]]]],[11,"bitxor_assign","","",56,[[["self"],["self"]]]],[11,"bitxor","","",56,[[["self"],["u8"]],["self"]]],[11,"bitand","","",56,[[["self"],["u8"]],["self"]]],[11,"bitor","","",56,[[["self"],["u8"]],["self"]]],[11,"bitand_assign","","",56,[[["self"],["u8"]]]],[11,"bitor_assign","","",56,[[["self"],["u8"]]]],[11,"bitxor_assign","","",56,[[["self"],["u8"]]]],[11,"shl","","",56,[[["self"],["self"]],["self"]]],[11,"shr","","",56,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["self"]]]],[11,"shr_assign","","",56,[[["self"],["self"]]]],[11,"shl","","",56,[[["self"],["u32"]],["self"]]],[11,"shr","","",56,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",56,[[["self"],["u32"]]]],[11,"shr_assign","","",56,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",56,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",56,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",56,[[["self"]],["u8"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",56,[[["self"]],["u8"]]],[11,"max_element","","Largest vector element value.",56,[[["self"]],["u8"]]],[11,"min_element","","Smallest vector element value.",56,[[["self"]],["u8"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",56,[[["self"]],["u8"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",56,[[["self"]],["u8"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",56,[[["self"]],["u8"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"from","","",56,N],[11,"default","","",56,[[],["self"]]],[11,"hash","","",56,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",56,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",56,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",56,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",56,N],[11,"swap_bytes","","Reverses the byte order of the vector.",56,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",56,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",56,[[["self"]],["self"]]],[11,"eq","","",56,[[["self"],["self"]],["bool"]]],[11,"ne","","",56,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",56,[[["self"],["u8x64"]],["m8x64"]]],[11,"ne","","Lane-wise inequality comparison.",56,[[["self"],["u8x64"]],["m8x64"]]],[11,"lt","","Lane-wise less-than comparison.",56,[[["self"],["u8x64"]],["m8x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",56,[[["self"],["u8x64"]],["m8x64"]]],[11,"gt","","Lane-wise greater-than comparison.",56,[[["self"],["u8x64"]],["m8x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",56,[[["self"],["u8x64"]],["m8x64"]]],[11,"partial_cmp","","",56,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",56,[[["self"],["self"]],["bool"]]],[11,"le","","",56,[[["self"],["self"]],["bool"]]],[11,"ge","","",56,[[["self"],["self"]],["bool"]]],[11,"gt","","",56,[[["self"],["self"]],["bool"]]],[11,"cmp","","",56,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",57,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",57,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",57,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",57,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",57,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",57,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",57,[[["self"]],["self"]]],[11,"bitxor","","",57,[[["self"],["self"]],["self"]]],[11,"bitand","","",57,[[["self"],["self"]],["self"]]],[11,"bitor","","",57,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",57,[[["self"],["self"]]]],[11,"bitor_assign","","",57,[[["self"],["self"]]]],[11,"bitxor_assign","","",57,[[["self"],["self"]]]],[11,"bitxor","","",57,[[["self"],["bool"]],["self"]]],[11,"bitand","","",57,[[["self"],["bool"]],["self"]]],[11,"bitor","","",57,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",57,[[["self"],["bool"]]]],[11,"bitor_assign","","",57,[[["self"],["bool"]]]],[11,"bitxor_assign","","",57,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",57,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",57,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",57,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",57,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",57,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",57,[[["self"]],["bool"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"from","","",57,N],[11,"default","","",57,[[],["self"]]],[11,"eq","","",57,[[["self"],["self"]],["bool"]]],[11,"ne","","",57,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",57,[[["self"],["m8x64"]],["m8x64"]]],[11,"ne","","Lane-wise inequality comparison.",57,[[["self"],["m8x64"]],["m8x64"]]],[11,"lt","","Lane-wise less-than comparison.",57,[[["self"],["m8x64"]],["m8x64"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",57,[[["self"],["m8x64"]],["m8x64"]]],[11,"gt","","Lane-wise greater-than comparison.",57,[[["self"],["m8x64"]],["m8x64"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",57,[[["self"],["m8x64"]],["m8x64"]]],[11,"select","","Selects elements of `a` and `b` using mask.",57,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",57,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",57,[[["self"],["self"]],["bool"]]],[11,"le","","",57,[[["self"],["self"]],["bool"]]],[11,"ge","","",57,[[["self"],["self"]],["bool"]]],[11,"gt","","",57,[[["self"],["self"]],["bool"]]],[11,"cmp","","",57,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",58,[[["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"],["i16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",58,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",58,[[["i16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",58,[[["self"],["usize"]],["i16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",58,[[["self"],["usize"]],["i16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["i16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",58,[[["self"],["usize"],["i16"]],["self"]]],[11,"add","","",58,[[["self"],["self"]],["self"]]],[11,"sub","","",58,[[["self"],["self"]],["self"]]],[11,"mul","","",58,[[["self"],["self"]],["self"]]],[11,"div","","",58,[[["self"],["self"]],["self"]]],[11,"rem","","",58,[[["self"],["self"]],["self"]]],[11,"add_assign","","",58,[[["self"],["self"]]]],[11,"sub_assign","","",58,[[["self"],["self"]]]],[11,"mul_assign","","",58,[[["self"],["self"]]]],[11,"div_assign","","",58,[[["self"],["self"]]]],[11,"rem_assign","","",58,[[["self"],["self"]]]],[11,"add","","",58,[[["self"],["i16"]],["self"]]],[11,"sub","","",58,[[["self"],["i16"]],["self"]]],[11,"mul","","",58,[[["self"],["i16"]],["self"]]],[11,"div","","",58,[[["self"],["i16"]],["self"]]],[11,"rem","","",58,[[["self"],["i16"]],["self"]]],[11,"add_assign","","",58,[[["self"],["i16"]]]],[11,"sub_assign","","",58,[[["self"],["i16"]]]],[11,"mul_assign","","",58,[[["self"],["i16"]]]],[11,"div_assign","","",58,[[["self"],["i16"]]]],[11,"rem_assign","","",58,[[["self"],["i16"]]]],[11,"not","","",58,[[["self"]],["self"]]],[11,"bitxor","","",58,[[["self"],["self"]],["self"]]],[11,"bitand","","",58,[[["self"],["self"]],["self"]]],[11,"bitor","","",58,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",58,[[["self"],["self"]]]],[11,"bitor_assign","","",58,[[["self"],["self"]]]],[11,"bitxor_assign","","",58,[[["self"],["self"]]]],[11,"bitxor","","",58,[[["self"],["i16"]],["self"]]],[11,"bitand","","",58,[[["self"],["i16"]],["self"]]],[11,"bitor","","",58,[[["self"],["i16"]],["self"]]],[11,"bitand_assign","","",58,[[["self"],["i16"]]]],[11,"bitor_assign","","",58,[[["self"],["i16"]]]],[11,"bitxor_assign","","",58,[[["self"],["i16"]]]],[11,"shl","","",58,[[["self"],["self"]],["self"]]],[11,"shr","","",58,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",58,[[["self"],["self"]]]],[11,"shr_assign","","",58,[[["self"],["self"]]]],[11,"shl","","",58,[[["self"],["u32"]],["self"]]],[11,"shr","","",58,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",58,[[["self"],["u32"]]]],[11,"shr_assign","","",58,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",58,[[["self"],["i16x32"]],["i16x32"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",58,[[["self"],["i16x32"]],["i16x32"]]],[11,"neg","","",58,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",58,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",58,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",58,[[["self"]],["i16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",58,[[["self"]],["i16"]]],[11,"max_element","","Largest vector element value.",58,[[["self"]],["i16"]]],[11,"min_element","","Smallest vector element value.",58,[[["self"]],["i16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",58,[[["self"]],["i16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",58,[[["self"]],["i16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",58,[[["self"]],["i16"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"from","","",58,N],[11,"from","","",58,[[["i8x32"]],["self"]]],[11,"from","","",58,[[["u8x32"]],["self"]]],[11,"default","","",58,[[],["self"]]],[11,"hash","","",58,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",58,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",58,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",58,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",58,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",58,N],[11,"swap_bytes","","Reverses the byte order of the vector.",58,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",58,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",58,[[["self"]],["self"]]],[11,"eq","","",58,[[["self"],["self"]],["bool"]]],[11,"ne","","",58,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",58,[[["self"],["i16x32"]],["m16x32"]]],[11,"ne","","Lane-wise inequality comparison.",58,[[["self"],["i16x32"]],["m16x32"]]],[11,"lt","","Lane-wise less-than comparison.",58,[[["self"],["i16x32"]],["m16x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",58,[[["self"],["i16x32"]],["m16x32"]]],[11,"gt","","Lane-wise greater-than comparison.",58,[[["self"],["i16x32"]],["m16x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",58,[[["self"],["i16x32"]],["m16x32"]]],[11,"partial_cmp","","",58,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",58,[[["self"],["self"]],["bool"]]],[11,"le","","",58,[[["self"],["self"]],["bool"]]],[11,"ge","","",58,[[["self"],["self"]],["bool"]]],[11,"gt","","",58,[[["self"],["self"]],["bool"]]],[11,"cmp","","",58,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",59,[[["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"],["u16"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",59,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",59,[[["u16"]],["self"]]],[11,"extract","","Extracts the value at `index`.",59,[[["self"],["usize"]],["u16"]]],[11,"extract_unchecked","","Extracts the value at `index`.",59,[[["self"],["usize"]],["u16"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["u16"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",59,[[["self"],["usize"],["u16"]],["self"]]],[11,"add","","",59,[[["self"],["self"]],["self"]]],[11,"sub","","",59,[[["self"],["self"]],["self"]]],[11,"mul","","",59,[[["self"],["self"]],["self"]]],[11,"div","","",59,[[["self"],["self"]],["self"]]],[11,"rem","","",59,[[["self"],["self"]],["self"]]],[11,"add_assign","","",59,[[["self"],["self"]]]],[11,"sub_assign","","",59,[[["self"],["self"]]]],[11,"mul_assign","","",59,[[["self"],["self"]]]],[11,"div_assign","","",59,[[["self"],["self"]]]],[11,"rem_assign","","",59,[[["self"],["self"]]]],[11,"add","","",59,[[["self"],["u16"]],["self"]]],[11,"sub","","",59,[[["self"],["u16"]],["self"]]],[11,"mul","","",59,[[["self"],["u16"]],["self"]]],[11,"div","","",59,[[["self"],["u16"]],["self"]]],[11,"rem","","",59,[[["self"],["u16"]],["self"]]],[11,"add_assign","","",59,[[["self"],["u16"]]]],[11,"sub_assign","","",59,[[["self"],["u16"]]]],[11,"mul_assign","","",59,[[["self"],["u16"]]]],[11,"div_assign","","",59,[[["self"],["u16"]]]],[11,"rem_assign","","",59,[[["self"],["u16"]]]],[11,"not","","",59,[[["self"]],["self"]]],[11,"bitxor","","",59,[[["self"],["self"]],["self"]]],[11,"bitand","","",59,[[["self"],["self"]],["self"]]],[11,"bitor","","",59,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",59,[[["self"],["self"]]]],[11,"bitor_assign","","",59,[[["self"],["self"]]]],[11,"bitxor_assign","","",59,[[["self"],["self"]]]],[11,"bitxor","","",59,[[["self"],["u16"]],["self"]]],[11,"bitand","","",59,[[["self"],["u16"]],["self"]]],[11,"bitor","","",59,[[["self"],["u16"]],["self"]]],[11,"bitand_assign","","",59,[[["self"],["u16"]]]],[11,"bitor_assign","","",59,[[["self"],["u16"]]]],[11,"bitxor_assign","","",59,[[["self"],["u16"]]]],[11,"shl","","",59,[[["self"],["self"]],["self"]]],[11,"shr","","",59,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["self"]]]],[11,"shr_assign","","",59,[[["self"],["self"]]]],[11,"shl","","",59,[[["self"],["u32"]],["self"]]],[11,"shr","","",59,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",59,[[["self"],["u32"]]]],[11,"shr_assign","","",59,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",59,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",59,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",59,[[["self"]],["u16"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",59,[[["self"]],["u16"]]],[11,"max_element","","Largest vector element value.",59,[[["self"]],["u16"]]],[11,"min_element","","Smallest vector element value.",59,[[["self"]],["u16"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",59,[[["self"]],["u16"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",59,[[["self"]],["u16"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",59,[[["self"]],["u16"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"from","","",59,N],[11,"from","","",59,[[["u8x32"]],["self"]]],[11,"default","","",59,[[],["self"]]],[11,"hash","","",59,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",59,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",59,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",59,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",59,N],[11,"swap_bytes","","Reverses the byte order of the vector.",59,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",59,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",59,[[["self"]],["self"]]],[11,"eq","","",59,[[["self"],["self"]],["bool"]]],[11,"ne","","",59,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",59,[[["self"],["u16x32"]],["m16x32"]]],[11,"ne","","Lane-wise inequality comparison.",59,[[["self"],["u16x32"]],["m16x32"]]],[11,"lt","","Lane-wise less-than comparison.",59,[[["self"],["u16x32"]],["m16x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",59,[[["self"],["u16x32"]],["m16x32"]]],[11,"gt","","Lane-wise greater-than comparison.",59,[[["self"],["u16x32"]],["m16x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",59,[[["self"],["u16x32"]],["m16x32"]]],[11,"partial_cmp","","",59,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",59,[[["self"],["self"]],["bool"]]],[11,"le","","",59,[[["self"],["self"]],["bool"]]],[11,"ge","","",59,[[["self"],["self"]],["bool"]]],[11,"gt","","",59,[[["self"],["self"]],["bool"]]],[11,"cmp","","",59,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",60,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",60,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",60,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",60,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",60,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",60,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",60,[[["self"]],["self"]]],[11,"bitxor","","",60,[[["self"],["self"]],["self"]]],[11,"bitand","","",60,[[["self"],["self"]],["self"]]],[11,"bitor","","",60,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",60,[[["self"],["self"]]]],[11,"bitor_assign","","",60,[[["self"],["self"]]]],[11,"bitxor_assign","","",60,[[["self"],["self"]]]],[11,"bitxor","","",60,[[["self"],["bool"]],["self"]]],[11,"bitand","","",60,[[["self"],["bool"]],["self"]]],[11,"bitor","","",60,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",60,[[["self"],["bool"]]]],[11,"bitor_assign","","",60,[[["self"],["bool"]]]],[11,"bitxor_assign","","",60,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",60,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",60,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",60,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",60,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",60,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",60,[[["self"]],["bool"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"from","","",60,N],[11,"from","","",60,[[["m8x32"]],["self"]]],[11,"default","","",60,[[],["self"]]],[11,"eq","","",60,[[["self"],["self"]],["bool"]]],[11,"ne","","",60,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",60,[[["self"],["m16x32"]],["m16x32"]]],[11,"ne","","Lane-wise inequality comparison.",60,[[["self"],["m16x32"]],["m16x32"]]],[11,"lt","","Lane-wise less-than comparison.",60,[[["self"],["m16x32"]],["m16x32"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",60,[[["self"],["m16x32"]],["m16x32"]]],[11,"gt","","Lane-wise greater-than comparison.",60,[[["self"],["m16x32"]],["m16x32"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",60,[[["self"],["m16x32"]],["m16x32"]]],[11,"select","","Selects elements of `a` and `b` using mask.",60,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",60,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",60,[[["self"],["self"]],["bool"]]],[11,"le","","",60,[[["self"],["self"]],["bool"]]],[11,"ge","","",60,[[["self"],["self"]],["bool"]]],[11,"gt","","",60,[[["self"],["self"]],["bool"]]],[11,"cmp","","",60,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",61,[[["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"],["i32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",61,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",61,[[["i32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",61,[[["self"],["usize"]],["i32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",61,[[["self"],["usize"]],["i32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["i32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",61,[[["self"],["usize"],["i32"]],["self"]]],[11,"add","","",61,[[["self"],["self"]],["self"]]],[11,"sub","","",61,[[["self"],["self"]],["self"]]],[11,"mul","","",61,[[["self"],["self"]],["self"]]],[11,"div","","",61,[[["self"],["self"]],["self"]]],[11,"rem","","",61,[[["self"],["self"]],["self"]]],[11,"add_assign","","",61,[[["self"],["self"]]]],[11,"sub_assign","","",61,[[["self"],["self"]]]],[11,"mul_assign","","",61,[[["self"],["self"]]]],[11,"div_assign","","",61,[[["self"],["self"]]]],[11,"rem_assign","","",61,[[["self"],["self"]]]],[11,"add","","",61,[[["self"],["i32"]],["self"]]],[11,"sub","","",61,[[["self"],["i32"]],["self"]]],[11,"mul","","",61,[[["self"],["i32"]],["self"]]],[11,"div","","",61,[[["self"],["i32"]],["self"]]],[11,"rem","","",61,[[["self"],["i32"]],["self"]]],[11,"add_assign","","",61,[[["self"],["i32"]]]],[11,"sub_assign","","",61,[[["self"],["i32"]]]],[11,"mul_assign","","",61,[[["self"],["i32"]]]],[11,"div_assign","","",61,[[["self"],["i32"]]]],[11,"rem_assign","","",61,[[["self"],["i32"]]]],[11,"not","","",61,[[["self"]],["self"]]],[11,"bitxor","","",61,[[["self"],["self"]],["self"]]],[11,"bitand","","",61,[[["self"],["self"]],["self"]]],[11,"bitor","","",61,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",61,[[["self"],["self"]]]],[11,"bitor_assign","","",61,[[["self"],["self"]]]],[11,"bitxor_assign","","",61,[[["self"],["self"]]]],[11,"bitxor","","",61,[[["self"],["i32"]],["self"]]],[11,"bitand","","",61,[[["self"],["i32"]],["self"]]],[11,"bitor","","",61,[[["self"],["i32"]],["self"]]],[11,"bitand_assign","","",61,[[["self"],["i32"]]]],[11,"bitor_assign","","",61,[[["self"],["i32"]]]],[11,"bitxor_assign","","",61,[[["self"],["i32"]]]],[11,"shl","","",61,[[["self"],["self"]],["self"]]],[11,"shr","","",61,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",61,[[["self"],["self"]]]],[11,"shr_assign","","",61,[[["self"],["self"]]]],[11,"shl","","",61,[[["self"],["u32"]],["self"]]],[11,"shr","","",61,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",61,[[["self"],["u32"]]]],[11,"shr_assign","","",61,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",61,[[["self"],["i32x16"]],["i32x16"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",61,[[["self"],["i32x16"]],["i32x16"]]],[11,"neg","","",61,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",61,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",61,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",61,[[["self"]],["i32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",61,[[["self"]],["i32"]]],[11,"max_element","","Largest vector element value.",61,[[["self"]],["i32"]]],[11,"min_element","","Smallest vector element value.",61,[[["self"]],["i32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",61,[[["self"]],["i32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",61,[[["self"]],["i32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",61,[[["self"]],["i32"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"from","","",61,N],[11,"from","","",61,[[["i8x16"]],["self"]]],[11,"from","","",61,[[["u8x16"]],["self"]]],[11,"from","","",61,[[["i16x16"]],["self"]]],[11,"from","","",61,[[["u16x16"]],["self"]]],[11,"default","","",61,[[],["self"]]],[11,"hash","","",61,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",61,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",61,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",61,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",61,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",61,N],[11,"swap_bytes","","Reverses the byte order of the vector.",61,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",61,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",61,[[["self"]],["self"]]],[11,"eq","","",61,[[["self"],["self"]],["bool"]]],[11,"ne","","",61,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",61,[[["self"],["i32x16"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",61,[[["self"],["i32x16"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",61,[[["self"],["i32x16"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",61,[[["self"],["i32x16"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",61,[[["self"],["i32x16"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",61,[[["self"],["i32x16"]],["m32x16"]]],[11,"partial_cmp","","",61,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",61,[[["self"],["self"]],["bool"]]],[11,"le","","",61,[[["self"],["self"]],["bool"]]],[11,"ge","","",61,[[["self"],["self"]],["bool"]]],[11,"gt","","",61,[[["self"],["self"]],["bool"]]],[11,"cmp","","",61,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",62,[[["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",62,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",62,[[["u32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",62,[[["self"],["usize"]],["u32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",62,[[["self"],["usize"]],["u32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["u32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",62,[[["self"],["usize"],["u32"]],["self"]]],[11,"add","","",62,[[["self"],["self"]],["self"]]],[11,"sub","","",62,[[["self"],["self"]],["self"]]],[11,"mul","","",62,[[["self"],["self"]],["self"]]],[11,"div","","",62,[[["self"],["self"]],["self"]]],[11,"rem","","",62,[[["self"],["self"]],["self"]]],[11,"add_assign","","",62,[[["self"],["self"]]]],[11,"sub_assign","","",62,[[["self"],["self"]]]],[11,"mul_assign","","",62,[[["self"],["self"]]]],[11,"div_assign","","",62,[[["self"],["self"]]]],[11,"rem_assign","","",62,[[["self"],["self"]]]],[11,"add","","",62,[[["self"],["u32"]],["self"]]],[11,"sub","","",62,[[["self"],["u32"]],["self"]]],[11,"mul","","",62,[[["self"],["u32"]],["self"]]],[11,"div","","",62,[[["self"],["u32"]],["self"]]],[11,"rem","","",62,[[["self"],["u32"]],["self"]]],[11,"add_assign","","",62,[[["self"],["u32"]]]],[11,"sub_assign","","",62,[[["self"],["u32"]]]],[11,"mul_assign","","",62,[[["self"],["u32"]]]],[11,"div_assign","","",62,[[["self"],["u32"]]]],[11,"rem_assign","","",62,[[["self"],["u32"]]]],[11,"not","","",62,[[["self"]],["self"]]],[11,"bitxor","","",62,[[["self"],["self"]],["self"]]],[11,"bitand","","",62,[[["self"],["self"]],["self"]]],[11,"bitor","","",62,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",62,[[["self"],["self"]]]],[11,"bitor_assign","","",62,[[["self"],["self"]]]],[11,"bitxor_assign","","",62,[[["self"],["self"]]]],[11,"bitxor","","",62,[[["self"],["u32"]],["self"]]],[11,"bitand","","",62,[[["self"],["u32"]],["self"]]],[11,"bitor","","",62,[[["self"],["u32"]],["self"]]],[11,"bitand_assign","","",62,[[["self"],["u32"]]]],[11,"bitor_assign","","",62,[[["self"],["u32"]]]],[11,"bitxor_assign","","",62,[[["self"],["u32"]]]],[11,"shl","","",62,[[["self"],["self"]],["self"]]],[11,"shr","","",62,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",62,[[["self"],["self"]]]],[11,"shr_assign","","",62,[[["self"],["self"]]]],[11,"shl","","",62,[[["self"],["u32"]],["self"]]],[11,"shr","","",62,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",62,[[["self"],["u32"]]]],[11,"shr_assign","","",62,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",62,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",62,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",62,[[["self"]],["u32"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",62,[[["self"]],["u32"]]],[11,"max_element","","Largest vector element value.",62,[[["self"]],["u32"]]],[11,"min_element","","Smallest vector element value.",62,[[["self"]],["u32"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",62,[[["self"]],["u32"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",62,[[["self"]],["u32"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",62,[[["self"]],["u32"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"from","","",62,N],[11,"from","","",62,[[["u8x16"]],["self"]]],[11,"from","","",62,[[["u16x16"]],["self"]]],[11,"default","","",62,[[],["self"]]],[11,"hash","","",62,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",62,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",62,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",62,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",62,N],[11,"swap_bytes","","Reverses the byte order of the vector.",62,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",62,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",62,[[["self"]],["self"]]],[11,"eq","","",62,[[["self"],["self"]],["bool"]]],[11,"ne","","",62,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",62,[[["self"],["u32x16"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",62,[[["self"],["u32x16"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",62,[[["self"],["u32x16"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",62,[[["self"],["u32x16"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",62,[[["self"],["u32x16"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",62,[[["self"],["u32x16"]],["m32x16"]]],[11,"partial_cmp","","",62,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",62,[[["self"],["self"]],["bool"]]],[11,"le","","",62,[[["self"],["self"]],["bool"]]],[11,"ge","","",62,[[["self"],["self"]],["bool"]]],[11,"gt","","",62,[[["self"],["self"]],["bool"]]],[11,"cmp","","",62,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",63,[[["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"],["f32"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",63,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",63,[[["f32"]],["self"]]],[11,"extract","","Extracts the value at `index`.",63,[[["self"],["usize"]],["f32"]]],[11,"extract_unchecked","","Extracts the value at `index`.",63,[[["self"],["usize"]],["f32"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",63,[[["self"],["usize"],["f32"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",63,[[["self"],["usize"],["f32"]],["self"]]],[11,"add","","",63,[[["self"],["self"]],["self"]]],[11,"sub","","",63,[[["self"],["self"]],["self"]]],[11,"mul","","",63,[[["self"],["self"]],["self"]]],[11,"div","","",63,[[["self"],["self"]],["self"]]],[11,"rem","","",63,[[["self"],["self"]],["self"]]],[11,"add_assign","","",63,[[["self"],["self"]]]],[11,"sub_assign","","",63,[[["self"],["self"]]]],[11,"mul_assign","","",63,[[["self"],["self"]]]],[11,"div_assign","","",63,[[["self"],["self"]]]],[11,"rem_assign","","",63,[[["self"],["self"]]]],[11,"add","","",63,[[["self"],["f32"]],["self"]]],[11,"sub","","",63,[[["self"],["f32"]],["self"]]],[11,"mul","","",63,[[["self"],["f32"]],["self"]]],[11,"div","","",63,[[["self"],["f32"]],["self"]]],[11,"rem","","",63,[[["self"],["f32"]],["self"]]],[11,"add_assign","","",63,[[["self"],["f32"]]]],[11,"sub_assign","","",63,[[["self"],["f32"]]]],[11,"mul_assign","","",63,[[["self"],["f32"]]]],[11,"div_assign","","",63,[[["self"],["f32"]]]],[11,"rem_assign","","",63,[[["self"],["f32"]]]],[11,"neg","","",63,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",63,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",63,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",63,[[["self"]],["f32"]]],[11,"product","","Horizontal product of the vector elements.",63,[[["self"]],["f32"]]],[11,"max_element","","Largest vector element value.",63,[[["self"]],["f32"]]],[11,"min_element","","Smallest vector element value.",63,[[["self"]],["f32"]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"from","","",63,N],[11,"from","","",63,[[["i8x16"]],["self"]]],[11,"from","","",63,[[["u8x16"]],["self"]]],[11,"from","","",63,[[["i16x16"]],["self"]]],[11,"from","","",63,[[["u16x16"]],["self"]]],[11,"default","","",63,[[],["self"]]],[11,"eq","","",63,[[["self"],["self"]],["bool"]]],[11,"ne","","",63,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",63,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",63,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",63,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",63,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",63,N],[11,"abs","","Absolute value.",63,[[["self"]],["self"]]],[11,"cos","","Cosine.",63,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",63,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",63,[[["self"]],["self"]]],[11,"sin","","",63,[[["self"]],["self"]]],[11,"sqrt","","",63,[[["self"]],["self"]]],[11,"sqrte","","",63,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",63,[[["self"],["f32x16"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",63,[[["self"],["f32x16"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",63,[[["self"],["f32x16"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",63,[[["self"],["f32x16"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",63,[[["self"],["f32x16"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",63,[[["self"],["f32x16"]],["m32x16"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",64,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",64,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",64,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",64,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",64,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",64,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",64,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",64,[[["self"]],["self"]]],[11,"bitxor","","",64,[[["self"],["self"]],["self"]]],[11,"bitand","","",64,[[["self"],["self"]],["self"]]],[11,"bitor","","",64,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",64,[[["self"],["self"]]]],[11,"bitor_assign","","",64,[[["self"],["self"]]]],[11,"bitxor_assign","","",64,[[["self"],["self"]]]],[11,"bitxor","","",64,[[["self"],["bool"]],["self"]]],[11,"bitand","","",64,[[["self"],["bool"]],["self"]]],[11,"bitor","","",64,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",64,[[["self"],["bool"]]]],[11,"bitor_assign","","",64,[[["self"],["bool"]]]],[11,"bitxor_assign","","",64,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",64,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",64,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",64,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",64,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",64,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",64,[[["self"]],["bool"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"from","","",64,N],[11,"from","","",64,[[["m8x16"]],["self"]]],[11,"from","","",64,[[["m16x16"]],["self"]]],[11,"default","","",64,[[],["self"]]],[11,"eq","","",64,[[["self"],["self"]],["bool"]]],[11,"ne","","",64,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",64,[[["self"],["m32x16"]],["m32x16"]]],[11,"ne","","Lane-wise inequality comparison.",64,[[["self"],["m32x16"]],["m32x16"]]],[11,"lt","","Lane-wise less-than comparison.",64,[[["self"],["m32x16"]],["m32x16"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",64,[[["self"],["m32x16"]],["m32x16"]]],[11,"gt","","Lane-wise greater-than comparison.",64,[[["self"],["m32x16"]],["m32x16"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",64,[[["self"],["m32x16"]],["m32x16"]]],[11,"select","","Selects elements of `a` and `b` using mask.",64,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",64,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",64,[[["self"],["self"]],["bool"]]],[11,"le","","",64,[[["self"],["self"]],["bool"]]],[11,"ge","","",64,[[["self"],["self"]],["bool"]]],[11,"gt","","",64,[[["self"],["self"]],["bool"]]],[11,"cmp","","",64,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",65,[[["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"],["i64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",65,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",65,[[["i64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",65,[[["self"],["usize"]],["i64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",65,[[["self"],["usize"]],["i64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",65,[[["self"],["usize"],["i64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",65,[[["self"],["usize"],["i64"]],["self"]]],[11,"add","","",65,[[["self"],["self"]],["self"]]],[11,"sub","","",65,[[["self"],["self"]],["self"]]],[11,"mul","","",65,[[["self"],["self"]],["self"]]],[11,"div","","",65,[[["self"],["self"]],["self"]]],[11,"rem","","",65,[[["self"],["self"]],["self"]]],[11,"add_assign","","",65,[[["self"],["self"]]]],[11,"sub_assign","","",65,[[["self"],["self"]]]],[11,"mul_assign","","",65,[[["self"],["self"]]]],[11,"div_assign","","",65,[[["self"],["self"]]]],[11,"rem_assign","","",65,[[["self"],["self"]]]],[11,"add","","",65,[[["self"],["i64"]],["self"]]],[11,"sub","","",65,[[["self"],["i64"]],["self"]]],[11,"mul","","",65,[[["self"],["i64"]],["self"]]],[11,"div","","",65,[[["self"],["i64"]],["self"]]],[11,"rem","","",65,[[["self"],["i64"]],["self"]]],[11,"add_assign","","",65,[[["self"],["i64"]]]],[11,"sub_assign","","",65,[[["self"],["i64"]]]],[11,"mul_assign","","",65,[[["self"],["i64"]]]],[11,"div_assign","","",65,[[["self"],["i64"]]]],[11,"rem_assign","","",65,[[["self"],["i64"]]]],[11,"not","","",65,[[["self"]],["self"]]],[11,"bitxor","","",65,[[["self"],["self"]],["self"]]],[11,"bitand","","",65,[[["self"],["self"]],["self"]]],[11,"bitor","","",65,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",65,[[["self"],["self"]]]],[11,"bitor_assign","","",65,[[["self"],["self"]]]],[11,"bitxor_assign","","",65,[[["self"],["self"]]]],[11,"bitxor","","",65,[[["self"],["i64"]],["self"]]],[11,"bitand","","",65,[[["self"],["i64"]],["self"]]],[11,"bitor","","",65,[[["self"],["i64"]],["self"]]],[11,"bitand_assign","","",65,[[["self"],["i64"]]]],[11,"bitor_assign","","",65,[[["self"],["i64"]]]],[11,"bitxor_assign","","",65,[[["self"],["i64"]]]],[11,"shl","","",65,[[["self"],["self"]],["self"]]],[11,"shr","","",65,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",65,[[["self"],["self"]]]],[11,"shr_assign","","",65,[[["self"],["self"]]]],[11,"shl","","",65,[[["self"],["u32"]],["self"]]],[11,"shr","","",65,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",65,[[["self"],["u32"]]]],[11,"shr_assign","","",65,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",65,[[["self"],["i64x8"]],["i64x8"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",65,[[["self"],["i64x8"]],["i64x8"]]],[11,"neg","","",65,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",65,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",65,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",65,[[["self"]],["i64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",65,[[["self"]],["i64"]]],[11,"max_element","","Largest vector element value.",65,[[["self"]],["i64"]]],[11,"min_element","","Smallest vector element value.",65,[[["self"]],["i64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",65,[[["self"]],["i64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",65,[[["self"]],["i64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",65,[[["self"]],["i64"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"from","","",65,N],[11,"from","","",65,[[["i8x8"]],["self"]]],[11,"from","","",65,[[["u8x8"]],["self"]]],[11,"from","","",65,[[["i16x8"]],["self"]]],[11,"from","","",65,[[["u16x8"]],["self"]]],[11,"from","","",65,[[["i32x8"]],["self"]]],[11,"from","","",65,[[["u32x8"]],["self"]]],[11,"default","","",65,[[],["self"]]],[11,"hash","","",65,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",65,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",65,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",65,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",65,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",65,N],[11,"swap_bytes","","Reverses the byte order of the vector.",65,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",65,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",65,[[["self"]],["self"]]],[11,"eq","","",65,[[["self"],["self"]],["bool"]]],[11,"ne","","",65,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",65,[[["self"],["i64x8"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",65,[[["self"],["i64x8"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",65,[[["self"],["i64x8"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",65,[[["self"],["i64x8"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",65,[[["self"],["i64x8"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",65,[[["self"],["i64x8"]],["m64x8"]]],[11,"partial_cmp","","",65,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",65,[[["self"],["self"]],["bool"]]],[11,"le","","",65,[[["self"],["self"]],["bool"]]],[11,"ge","","",65,[[["self"],["self"]],["bool"]]],[11,"gt","","",65,[[["self"],["self"]],["bool"]]],[11,"cmp","","",65,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",66,[[["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"],["u64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",66,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",66,[[["u64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",66,[[["self"],["usize"]],["u64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",66,[[["self"],["usize"]],["u64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",66,[[["self"],["usize"],["u64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",66,[[["self"],["usize"],["u64"]],["self"]]],[11,"add","","",66,[[["self"],["self"]],["self"]]],[11,"sub","","",66,[[["self"],["self"]],["self"]]],[11,"mul","","",66,[[["self"],["self"]],["self"]]],[11,"div","","",66,[[["self"],["self"]],["self"]]],[11,"rem","","",66,[[["self"],["self"]],["self"]]],[11,"add_assign","","",66,[[["self"],["self"]]]],[11,"sub_assign","","",66,[[["self"],["self"]]]],[11,"mul_assign","","",66,[[["self"],["self"]]]],[11,"div_assign","","",66,[[["self"],["self"]]]],[11,"rem_assign","","",66,[[["self"],["self"]]]],[11,"add","","",66,[[["self"],["u64"]],["self"]]],[11,"sub","","",66,[[["self"],["u64"]],["self"]]],[11,"mul","","",66,[[["self"],["u64"]],["self"]]],[11,"div","","",66,[[["self"],["u64"]],["self"]]],[11,"rem","","",66,[[["self"],["u64"]],["self"]]],[11,"add_assign","","",66,[[["self"],["u64"]]]],[11,"sub_assign","","",66,[[["self"],["u64"]]]],[11,"mul_assign","","",66,[[["self"],["u64"]]]],[11,"div_assign","","",66,[[["self"],["u64"]]]],[11,"rem_assign","","",66,[[["self"],["u64"]]]],[11,"not","","",66,[[["self"]],["self"]]],[11,"bitxor","","",66,[[["self"],["self"]],["self"]]],[11,"bitand","","",66,[[["self"],["self"]],["self"]]],[11,"bitor","","",66,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",66,[[["self"],["self"]]]],[11,"bitor_assign","","",66,[[["self"],["self"]]]],[11,"bitxor_assign","","",66,[[["self"],["self"]]]],[11,"bitxor","","",66,[[["self"],["u64"]],["self"]]],[11,"bitand","","",66,[[["self"],["u64"]],["self"]]],[11,"bitor","","",66,[[["self"],["u64"]],["self"]]],[11,"bitand_assign","","",66,[[["self"],["u64"]]]],[11,"bitor_assign","","",66,[[["self"],["u64"]]]],[11,"bitxor_assign","","",66,[[["self"],["u64"]]]],[11,"shl","","",66,[[["self"],["self"]],["self"]]],[11,"shr","","",66,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",66,[[["self"],["self"]]]],[11,"shr_assign","","",66,[[["self"],["self"]]]],[11,"shl","","",66,[[["self"],["u32"]],["self"]]],[11,"shr","","",66,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",66,[[["self"],["u32"]]]],[11,"shr_assign","","",66,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",66,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",66,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",66,[[["self"]],["u64"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",66,[[["self"]],["u64"]]],[11,"max_element","","Largest vector element value.",66,[[["self"]],["u64"]]],[11,"min_element","","Smallest vector element value.",66,[[["self"]],["u64"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",66,[[["self"]],["u64"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",66,[[["self"]],["u64"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",66,[[["self"]],["u64"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"from","","",66,N],[11,"from","","",66,[[["u8x8"]],["self"]]],[11,"from","","",66,[[["u16x8"]],["self"]]],[11,"from","","",66,[[["u32x8"]],["self"]]],[11,"default","","",66,[[],["self"]]],[11,"hash","","",66,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",66,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",66,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",66,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",66,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",66,N],[11,"swap_bytes","","Reverses the byte order of the vector.",66,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",66,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",66,[[["self"]],["self"]]],[11,"eq","","",66,[[["self"],["self"]],["bool"]]],[11,"ne","","",66,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",66,[[["self"],["u64x8"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",66,[[["self"],["u64x8"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",66,[[["self"],["u64x8"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",66,[[["self"],["u64x8"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",66,[[["self"],["u64x8"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",66,[[["self"],["u64x8"]],["m64x8"]]],[11,"partial_cmp","","",66,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",66,[[["self"],["self"]],["bool"]]],[11,"le","","",66,[[["self"],["self"]],["bool"]]],[11,"ge","","",66,[[["self"],["self"]],["bool"]]],[11,"gt","","",66,[[["self"],["self"]],["bool"]]],[11,"cmp","","",66,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",67,[[["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"],["f64"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",67,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",67,[[["f64"]],["self"]]],[11,"extract","","Extracts the value at `index`.",67,[[["self"],["usize"]],["f64"]]],[11,"extract_unchecked","","Extracts the value at `index`.",67,[[["self"],["usize"]],["f64"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",67,[[["self"],["usize"],["f64"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",67,[[["self"],["usize"],["f64"]],["self"]]],[11,"add","","",67,[[["self"],["self"]],["self"]]],[11,"sub","","",67,[[["self"],["self"]],["self"]]],[11,"mul","","",67,[[["self"],["self"]],["self"]]],[11,"div","","",67,[[["self"],["self"]],["self"]]],[11,"rem","","",67,[[["self"],["self"]],["self"]]],[11,"add_assign","","",67,[[["self"],["self"]]]],[11,"sub_assign","","",67,[[["self"],["self"]]]],[11,"mul_assign","","",67,[[["self"],["self"]]]],[11,"div_assign","","",67,[[["self"],["self"]]]],[11,"rem_assign","","",67,[[["self"],["self"]]]],[11,"add","","",67,[[["self"],["f64"]],["self"]]],[11,"sub","","",67,[[["self"],["f64"]],["self"]]],[11,"mul","","",67,[[["self"],["f64"]],["self"]]],[11,"div","","",67,[[["self"],["f64"]],["self"]]],[11,"rem","","",67,[[["self"],["f64"]],["self"]]],[11,"add_assign","","",67,[[["self"],["f64"]]]],[11,"sub_assign","","",67,[[["self"],["f64"]]]],[11,"mul_assign","","",67,[[["self"],["f64"]]]],[11,"div_assign","","",67,[[["self"],["f64"]]]],[11,"rem_assign","","",67,[[["self"],["f64"]]]],[11,"neg","","",67,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",67,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",67,[[["self"],["self"]],["self"]]],[11,"sum","","Horizontal sum of the vector elements.",67,[[["self"]],["f64"]]],[11,"product","","Horizontal product of the vector elements.",67,[[["self"]],["f64"]]],[11,"max_element","","Largest vector element value.",67,[[["self"]],["f64"]]],[11,"min_element","","Smallest vector element value.",67,[[["self"]],["f64"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"from","","",67,N],[11,"from","","",67,[[["i8x8"]],["self"]]],[11,"from","","",67,[[["u8x8"]],["self"]]],[11,"from","","",67,[[["i16x8"]],["self"]]],[11,"from","","",67,[[["u16x8"]],["self"]]],[11,"from","","",67,[[["i32x8"]],["self"]]],[11,"from","","",67,[[["u32x8"]],["self"]]],[11,"from","","",67,[[["f32x8"]],["self"]]],[11,"default","","",67,[[],["self"]]],[11,"eq","","",67,[[["self"],["self"]],["bool"]]],[11,"ne","","",67,[[["self"],["self"]],["bool"]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",67,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",67,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",67,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",67,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",67,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",67,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",67,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",67,N],[11,"abs","","Absolute value.",67,[[["self"]],["self"]]],[11,"cos","","Cosine.",67,[[["self"]],["self"]]],[11,"fma","","Fused multiply add: `self * y + z`",67,[[["self"],["self"],["self"]],["self"]]],[11,"rsqrte","","",67,[[["self"]],["self"]]],[11,"sin","","",67,[[["self"]],["self"]]],[11,"sqrt","","",67,[[["self"]],["self"]]],[11,"sqrte","","",67,[[["self"]],["self"]]],[11,"eq","","Lane-wise equality comparison.",67,[[["self"],["f64x8"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",67,[[["self"],["f64x8"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",67,[[["self"],["f64x8"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",67,[[["self"],["f64x8"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",67,[[["self"],["f64x8"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",67,[[["self"],["f64x8"]],["m64x8"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",68,[[["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",68,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",68,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",68,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",68,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",68,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",68,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",68,[[["self"]],["self"]]],[11,"bitxor","","",68,[[["self"],["self"]],["self"]]],[11,"bitand","","",68,[[["self"],["self"]],["self"]]],[11,"bitor","","",68,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",68,[[["self"],["self"]]]],[11,"bitor_assign","","",68,[[["self"],["self"]]]],[11,"bitxor_assign","","",68,[[["self"],["self"]]]],[11,"bitxor","","",68,[[["self"],["bool"]],["self"]]],[11,"bitand","","",68,[[["self"],["bool"]],["self"]]],[11,"bitor","","",68,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",68,[[["self"],["bool"]]]],[11,"bitor_assign","","",68,[[["self"],["bool"]]]],[11,"bitxor_assign","","",68,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",68,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",68,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",68,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",68,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",68,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",68,[[["self"]],["bool"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"from","","",68,N],[11,"from","","",68,[[["m8x8"]],["self"]]],[11,"from","","",68,[[["m16x8"]],["self"]]],[11,"from","","",68,[[["m32x8"]],["self"]]],[11,"default","","",68,[[],["self"]]],[11,"eq","","",68,[[["self"],["self"]],["bool"]]],[11,"ne","","",68,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",68,[[["self"],["m64x8"]],["m64x8"]]],[11,"ne","","Lane-wise inequality comparison.",68,[[["self"],["m64x8"]],["m64x8"]]],[11,"lt","","Lane-wise less-than comparison.",68,[[["self"],["m64x8"]],["m64x8"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",68,[[["self"],["m64x8"]],["m64x8"]]],[11,"gt","","Lane-wise greater-than comparison.",68,[[["self"],["m64x8"]],["m64x8"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",68,[[["self"],["m64x8"]],["m64x8"]]],[11,"select","","Selects elements of `a` and `b` using mask.",68,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",68,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["self"]],["bool"]]],[11,"le","","",68,[[["self"],["self"]],["bool"]]],[11,"ge","","",68,[[["self"],["self"]],["bool"]]],[11,"gt","","",68,[[["self"],["self"]],["bool"]]],[11,"cmp","","",68,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",75,[[["i128"],["i128"],["i128"],["i128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",75,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",75,[[["i128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",75,[[["self"],["usize"]],["i128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",75,[[["self"],["usize"]],["i128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",75,[[["self"],["usize"],["i128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",75,[[["self"],["usize"],["i128"]],["self"]]],[11,"add","","",75,[[["self"],["self"]],["self"]]],[11,"sub","","",75,[[["self"],["self"]],["self"]]],[11,"mul","","",75,[[["self"],["self"]],["self"]]],[11,"div","","",75,[[["self"],["self"]],["self"]]],[11,"rem","","",75,[[["self"],["self"]],["self"]]],[11,"add_assign","","",75,[[["self"],["self"]]]],[11,"sub_assign","","",75,[[["self"],["self"]]]],[11,"mul_assign","","",75,[[["self"],["self"]]]],[11,"div_assign","","",75,[[["self"],["self"]]]],[11,"rem_assign","","",75,[[["self"],["self"]]]],[11,"add","","",75,[[["self"],["i128"]],["self"]]],[11,"sub","","",75,[[["self"],["i128"]],["self"]]],[11,"mul","","",75,[[["self"],["i128"]],["self"]]],[11,"div","","",75,[[["self"],["i128"]],["self"]]],[11,"rem","","",75,[[["self"],["i128"]],["self"]]],[11,"add_assign","","",75,[[["self"],["i128"]]]],[11,"sub_assign","","",75,[[["self"],["i128"]]]],[11,"mul_assign","","",75,[[["self"],["i128"]]]],[11,"div_assign","","",75,[[["self"],["i128"]]]],[11,"rem_assign","","",75,[[["self"],["i128"]]]],[11,"not","","",75,[[["self"]],["self"]]],[11,"bitxor","","",75,[[["self"],["self"]],["self"]]],[11,"bitand","","",75,[[["self"],["self"]],["self"]]],[11,"bitor","","",75,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",75,[[["self"],["self"]]]],[11,"bitor_assign","","",75,[[["self"],["self"]]]],[11,"bitxor_assign","","",75,[[["self"],["self"]]]],[11,"bitxor","","",75,[[["self"],["i128"]],["self"]]],[11,"bitand","","",75,[[["self"],["i128"]],["self"]]],[11,"bitor","","",75,[[["self"],["i128"]],["self"]]],[11,"bitand_assign","","",75,[[["self"],["i128"]]]],[11,"bitor_assign","","",75,[[["self"],["i128"]]]],[11,"bitxor_assign","","",75,[[["self"],["i128"]]]],[11,"shl","","",75,[[["self"],["self"]],["self"]]],[11,"shr","","",75,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",75,[[["self"],["self"]]]],[11,"shr_assign","","",75,[[["self"],["self"]]]],[11,"shl","","",75,[[["self"],["u32"]],["self"]]],[11,"shr","","",75,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",75,[[["self"],["u32"]]]],[11,"shr_assign","","",75,[[["self"],["u32"]]]],[11,"rotate_left","","Shifts the bits of each lane to the left by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the end of the resulting integer.",75,[[["self"],["i128x4"]],["i128x4"]]],[11,"rotate_right","","Shifts the bits of each lane to the right by the specified amount in the corresponding lane of `n`, wrapping the truncated bits to the beginning of the resulting integer.",75,[[["self"],["i128x4"]],["i128x4"]]],[11,"neg","","",75,[[["self"]],["self"]]],[11,"min","","Minimum of two vectors.",75,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",75,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",75,[[["self"]],["i128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",75,[[["self"]],["i128"]]],[11,"max_element","","Largest vector element value.",75,[[["self"]],["i128"]]],[11,"min_element","","Smallest vector element value.",75,[[["self"]],["i128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",75,[[["self"]],["i128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",75,[[["self"]],["i128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",75,[[["self"]],["i128"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"from","","",75,N],[11,"from","","",75,[[["i8x4"]],["self"]]],[11,"from","","",75,[[["u8x4"]],["self"]]],[11,"from","","",75,[[["i16x4"]],["self"]]],[11,"from","","",75,[[["u16x4"]],["self"]]],[11,"from","","",75,[[["i32x4"]],["self"]]],[11,"from","","",75,[[["u32x4"]],["self"]]],[11,"from","","",75,[[["i64x4"]],["self"]]],[11,"from","","",75,[[["u64x4"]],["self"]]],[11,"default","","",75,[[],["self"]]],[11,"hash","","",75,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",75,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",75,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",75,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",75,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",75,N],[11,"swap_bytes","","Reverses the byte order of the vector.",75,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",75,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",75,[[["self"]],["self"]]],[11,"eq","","",75,[[["self"],["self"]],["bool"]]],[11,"ne","","",75,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",75,[[["self"],["i128x4"]],["m128x4"]]],[11,"ne","","Lane-wise inequality comparison.",75,[[["self"],["i128x4"]],["m128x4"]]],[11,"lt","","Lane-wise less-than comparison.",75,[[["self"],["i128x4"]],["m128x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",75,[[["self"],["i128x4"]],["m128x4"]]],[11,"gt","","Lane-wise greater-than comparison.",75,[[["self"],["i128x4"]],["m128x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",75,[[["self"],["i128x4"]],["m128x4"]]],[11,"partial_cmp","","",75,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",75,[[["self"],["self"]],["bool"]]],[11,"le","","",75,[[["self"],["self"]],["bool"]]],[11,"ge","","",75,[[["self"],["self"]],["bool"]]],[11,"gt","","",75,[[["self"],["self"]],["bool"]]],[11,"cmp","","",75,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",76,[[["u128"],["u128"],["u128"],["u128"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",76,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",76,[[["u128"]],["self"]]],[11,"extract","","Extracts the value at `index`.",76,[[["self"],["usize"]],["u128"]]],[11,"extract_unchecked","","Extracts the value at `index`.",76,[[["self"],["usize"]],["u128"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",76,[[["self"],["usize"],["u128"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",76,[[["self"],["usize"],["u128"]],["self"]]],[11,"add","","",76,[[["self"],["self"]],["self"]]],[11,"sub","","",76,[[["self"],["self"]],["self"]]],[11,"mul","","",76,[[["self"],["self"]],["self"]]],[11,"div","","",76,[[["self"],["self"]],["self"]]],[11,"rem","","",76,[[["self"],["self"]],["self"]]],[11,"add_assign","","",76,[[["self"],["self"]]]],[11,"sub_assign","","",76,[[["self"],["self"]]]],[11,"mul_assign","","",76,[[["self"],["self"]]]],[11,"div_assign","","",76,[[["self"],["self"]]]],[11,"rem_assign","","",76,[[["self"],["self"]]]],[11,"add","","",76,[[["self"],["u128"]],["self"]]],[11,"sub","","",76,[[["self"],["u128"]],["self"]]],[11,"mul","","",76,[[["self"],["u128"]],["self"]]],[11,"div","","",76,[[["self"],["u128"]],["self"]]],[11,"rem","","",76,[[["self"],["u128"]],["self"]]],[11,"add_assign","","",76,[[["self"],["u128"]]]],[11,"sub_assign","","",76,[[["self"],["u128"]]]],[11,"mul_assign","","",76,[[["self"],["u128"]]]],[11,"div_assign","","",76,[[["self"],["u128"]]]],[11,"rem_assign","","",76,[[["self"],["u128"]]]],[11,"not","","",76,[[["self"]],["self"]]],[11,"bitxor","","",76,[[["self"],["self"]],["self"]]],[11,"bitand","","",76,[[["self"],["self"]],["self"]]],[11,"bitor","","",76,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",76,[[["self"],["self"]]]],[11,"bitor_assign","","",76,[[["self"],["self"]]]],[11,"bitxor_assign","","",76,[[["self"],["self"]]]],[11,"bitxor","","",76,[[["self"],["u128"]],["self"]]],[11,"bitand","","",76,[[["self"],["u128"]],["self"]]],[11,"bitor","","",76,[[["self"],["u128"]],["self"]]],[11,"bitand_assign","","",76,[[["self"],["u128"]]]],[11,"bitor_assign","","",76,[[["self"],["u128"]]]],[11,"bitxor_assign","","",76,[[["self"],["u128"]]]],[11,"shl","","",76,[[["self"],["self"]],["self"]]],[11,"shr","","",76,[[["self"],["self"]],["self"]]],[11,"shl_assign","","",76,[[["self"],["self"]]]],[11,"shr_assign","","",76,[[["self"],["self"]]]],[11,"shl","","",76,[[["self"],["u32"]],["self"]]],[11,"shr","","",76,[[["self"],["u32"]],["self"]]],[11,"shl_assign","","",76,[[["self"],["u32"]]]],[11,"shr_assign","","",76,[[["self"],["u32"]]]],[11,"min","","Minimum of two vectors.",76,[[["self"],["self"]],["self"]]],[11,"max","","Maximum of two vectors.",76,[[["self"],["self"]],["self"]]],[11,"wrapping_sum","","Horizontal wrapping sum of the vector elements.",76,[[["self"]],["u128"]]],[11,"wrapping_product","","Horizontal wrapping product of the vector elements.",76,[[["self"]],["u128"]]],[11,"max_element","","Largest vector element value.",76,[[["self"]],["u128"]]],[11,"min_element","","Smallest vector element value.",76,[[["self"]],["u128"]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",76,[[["self"]],["u128"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",76,[[["self"]],["u128"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",76,[[["self"]],["u128"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"from","","",76,N],[11,"from","","",76,[[["u8x4"]],["self"]]],[11,"from","","",76,[[["u16x4"]],["self"]]],[11,"from","","",76,[[["u32x4"]],["self"]]],[11,"from","","",76,[[["u64x4"]],["self"]]],[11,"default","","",76,[[],["self"]]],[11,"hash","","",76,[[["self"],["h"]]]],[11,"from_slice_aligned","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"from_slice_unaligned","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"from_slice_aligned_unchecked","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"from_slice_unaligned_unchecked","","Instantiates a new vector with the values of the `slice`.",76,N],[11,"write_to_slice_aligned","","Writes the values of the vector to the `slice`.",76,N],[11,"write_to_slice_unaligned","","Writes the values of the vector to the `slice`.",76,N],[11,"write_to_slice_aligned_unchecked","","Writes the values of the vector to the `slice`.",76,N],[11,"write_to_slice_unaligned_unchecked","","Writes the values of the vector to the `slice`.",76,N],[11,"swap_bytes","","Reverses the byte order of the vector.",76,[[["self"]],["self"]]],[11,"to_le","","Converts self to little endian from the target's endianness.",76,[[["self"]],["self"]]],[11,"to_be","","Converts self to big endian from the target's endianness.",76,[[["self"]],["self"]]],[11,"eq","","",76,[[["self"],["self"]],["bool"]]],[11,"ne","","",76,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",76,[[["self"],["u128x4"]],["m128x4"]]],[11,"ne","","Lane-wise inequality comparison.",76,[[["self"],["u128x4"]],["m128x4"]]],[11,"lt","","Lane-wise less-than comparison.",76,[[["self"],["u128x4"]],["m128x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",76,[[["self"],["u128x4"]],["m128x4"]]],[11,"gt","","Lane-wise greater-than comparison.",76,[[["self"],["u128x4"]],["m128x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",76,[[["self"],["u128x4"]],["m128x4"]]],[11,"partial_cmp","","",76,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",76,[[["self"],["self"]],["bool"]]],[11,"le","","",76,[[["self"],["self"]],["bool"]]],[11,"ge","","",76,[[["self"],["self"]],["bool"]]],[11,"gt","","",76,[[["self"],["self"]],["bool"]]],[11,"cmp","","",76,[[["self"],["self"]],["ordering"]]],[11,"new","","Creates a new instance with each vector elements initialized with the provided values.",77,[[["bool"],["bool"],["bool"],["bool"]],["self"]]],[11,"lanes","","Returns the number of vector lanes.",77,[[],["usize"]]],[11,"splat","","Constructs a new instance with each element initialized to `value`.",77,[[["bool"]],["self"]]],[11,"extract","","Extracts the value at `index`.",77,[[["self"],["usize"]],["bool"]]],[11,"extract_unchecked","","Extracts the value at `index`.",77,[[["self"],["usize"]],["bool"]]],[11,"replace","","Returns a new vector where the value at `index` is replaced by `new_value`.",77,[[["self"],["usize"],["bool"]],["self"]]],[11,"replace_unchecked","","Returns a new vector where the value at `index` is replaced by `new_value`.",77,[[["self"],["usize"],["bool"]],["self"]]],[11,"not","","",77,[[["self"]],["self"]]],[11,"bitxor","","",77,[[["self"],["self"]],["self"]]],[11,"bitand","","",77,[[["self"],["self"]],["self"]]],[11,"bitor","","",77,[[["self"],["self"]],["self"]]],[11,"bitand_assign","","",77,[[["self"],["self"]]]],[11,"bitor_assign","","",77,[[["self"],["self"]]]],[11,"bitxor_assign","","",77,[[["self"],["self"]]]],[11,"bitxor","","",77,[[["self"],["bool"]],["self"]]],[11,"bitand","","",77,[[["self"],["bool"]],["self"]]],[11,"bitor","","",77,[[["self"],["bool"]],["self"]]],[11,"bitand_assign","","",77,[[["self"],["bool"]]]],[11,"bitor_assign","","",77,[[["self"],["bool"]]]],[11,"bitxor_assign","","",77,[[["self"],["bool"]]]],[11,"and","","Lane-wise bitwise `and` of the vector elements.",77,[[["self"]],["bool"]]],[11,"or","","Lane-wise bitwise `or` of the vector elements.",77,[[["self"]],["bool"]]],[11,"xor","","Lane-wise bitwise `xor` of the vector elements.",77,[[["self"]],["bool"]]],[11,"all","","Are `all` vector lanes `true`?",77,[[["self"]],["bool"]]],[11,"any","","Is `any` vector lane `true`?",77,[[["self"]],["bool"]]],[11,"none","","Are `all` vector lanes `false`?",77,[[["self"]],["bool"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"from","","",77,N],[11,"from","","",77,[[["m8x4"]],["self"]]],[11,"from","","",77,[[["m16x4"]],["self"]]],[11,"from","","",77,[[["m32x4"]],["self"]]],[11,"from","","",77,[[["m64x4"]],["self"]]],[11,"default","","",77,[[],["self"]]],[11,"eq","","",77,[[["self"],["self"]],["bool"]]],[11,"ne","","",77,[[["self"],["self"]],["bool"]]],[11,"eq","","Lane-wise equality comparison.",77,[[["self"],["m128x4"]],["m128x4"]]],[11,"ne","","Lane-wise inequality comparison.",77,[[["self"],["m128x4"]],["m128x4"]]],[11,"lt","","Lane-wise less-than comparison.",77,[[["self"],["m128x4"]],["m128x4"]]],[11,"le","","Lane-wise less-than-or-equals comparison.",77,[[["self"],["m128x4"]],["m128x4"]]],[11,"gt","","Lane-wise greater-than comparison.",77,[[["self"],["m128x4"]],["m128x4"]]],[11,"ge","","Lane-wise greater-than-or-equals comparison.",77,[[["self"],["m128x4"]],["m128x4"]]],[11,"select","","Selects elements of `a` and `b` using mask.",77,[[["self"],["simd"],["simd"]],["simd"]]],[11,"partial_cmp","","",77,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",77,[[["self"],["self"]],["bool"]]],[11,"le","","",77,[[["self"],["self"]],["bool"]]],[11,"ge","","",77,[[["self"],["self"]],["bool"]]],[11,"gt","","",77,[[["self"],["self"]],["bool"]]],[11,"cmp","","",77,[[["self"],["self"]],["ordering"]]]],"paths":[[3,"m8"],[3,"m16"],[3,"m32"],[3,"m64"],[3,"m128"],[8,"FromCast"],[8,"Cast"],[3,"Simd"],[6,"i8x2"],[6,"u8x2"],[6,"m8x2"],[6,"i8x4"],[6,"u8x4"],[6,"m8x4"],[6,"i16x2"],[6,"u16x2"],[6,"m16x2"],[6,"i8x8"],[6,"u8x8"],[6,"m8x8"],[6,"i16x4"],[6,"u16x4"],[6,"m16x4"],[6,"i32x2"],[6,"u32x2"],[6,"f32x2"],[6,"m32x2"],[6,"i8x16"],[6,"u8x16"],[6,"m8x16"],[6,"i16x8"],[6,"u16x8"],[6,"m16x8"],[6,"i32x4"],[6,"u32x4"],[6,"f32x4"],[6,"m32x4"],[6,"i64x2"],[6,"u64x2"],[6,"f64x2"],[6,"m64x2"],[6,"i8x32"],[6,"u8x32"],[6,"m8x32"],[6,"i16x16"],[6,"u16x16"],[6,"m16x16"],[6,"i32x8"],[6,"u32x8"],[6,"f32x8"],[6,"m32x8"],[6,"i64x4"],[6,"u64x4"],[6,"f64x4"],[6,"m64x4"],[6,"i8x64"],[6,"u8x64"],[6,"m8x64"],[6,"i16x32"],[6,"u16x32"],[6,"m16x32"],[6,"i32x16"],[6,"u32x16"],[6,"f32x16"],[6,"m32x16"],[6,"i64x8"],[6,"u64x8"],[6,"f64x8"],[6,"m64x8"],[6,"i128x1"],[6,"u128x1"],[6,"m128x1"],[6,"i128x2"],[6,"u128x2"],[6,"m128x2"],[6,"i128x4"],[6,"u128x4"],[6,"m128x4"]]};
initSearch(searchIndex);
